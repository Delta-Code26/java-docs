{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":[" "]},"docs":[{"location":"","title":"Selamat Datang di Dokumentasi Belajar Java dari Nol || Delta Code \ud83d\ude80","text":""},{"location":"#apa-itu-java","title":"\ud83d\udccc Apa itu Java?","text":"<p>Java adalah bahasa pemrograman tingkat tinggi, berorientasi objek, dan platform independent. Diciptakan oleh James Gosling dan dirilis oleh Sun Microsystems pada tahun 1995, Java saat ini dikelola oleh Oracle.</p> <p>Java dikenal dengan prinsipnya: \"Write Once, Run Anywhere\" (WORA) \u2014 artinya kode yang ditulis sekali di Java dapat dijalankan di berbagai platform tanpa perubahan besar.</p>"},{"location":"#kenapa-harus-belajar-java","title":"\ud83c\udfaf Kenapa Harus Belajar Java?","text":"<p>Java digunakan dalam berbagai bidang: - \u2705 Aplikasi Android - \u2705 Aplikasi Desktop (GUI) - \u2705 Aplikasi Web (Spring Boot) - \u2705 Sistem Enterprise (ERP, CRM) - \u2705 Internet of Things (IoT) - \u2705 Big Data dan Cloud Computing</p> <p>Bahkan beberapa perusahaan besar seperti Netflix, Spotify, dan Amazon menggunakan Java dalam sistem mereka.</p>"},{"location":"#apa-yang-akan-kamu-pelajari","title":"\ud83e\udde0 Apa yang Akan Kamu Pelajari?","text":"<p>Dokumentasi ini disusun untuk membimbingmu dari nol (pemula total) hingga menjadi mahir dan siap terjun ke industri.</p> <p>Kita akan belajar dari: - Dasar-dasar Java (struktur kode, variabel, kontrol alur) - OOP (Object-Oriented Programming) secara mendalam - Penanganan file dan database - Java di dunia nyata: Android &amp; Spring Boot - Tips dan praktik terbaik ala developer profesional</p>"},{"location":"#siapa-dokumentasi-ini-cocok-untuk","title":"\ud83d\udcda Siapa Dokumentasi Ini Cocok Untuk?","text":"<p>Dokumentasi ini cocok untuk: - Mahasiswa/i teknik informatika dan rekayasa perangkat lunak - Developer pemula yang ingin terjun ke Java - Profesional dari bahasa lain (Python, JS, dll) yang ingin ekspansi ke Java - Siapa pun yang ingin membuat aplikasi Android atau backend berbasis Java</p>"},{"location":"#persiapan-sebelum-memulai","title":"\ud83d\udee0\ufe0f Persiapan Sebelum Memulai","text":"<p>Sebelum kamu menyelam lebih dalam, pastikan kamu sudah mengatur lingkungan pengembangan. Jika belum, silakan lanjut ke halaman berikut:</p> <p>\u27a1\ufe0f Persiapan Lingkungan Java</p>"},{"location":"#tentang-penulis","title":"\u270d\ufe0f Tentang Penulis","text":"<p>Dokumentasi ini dibuat oleh Marno, mahasiswa Teknik Informatika yang juga aktif di dunia industri perkebunan sawit. Didasari semangat belajar dan berbagi, proyek ini terbuka untuk kontribusi dari siapa pun.</p> <p>\ud83d\udca1 \u201cMembagikan ilmu tak akan pernah membuat kita kehilangan apa-apa. Justru memperluas cakrawala kita dan orang lain.\u201d</p>"},{"location":"#lisensi","title":"\u2696\ufe0f Lisensi","text":"<p>Dokumentasi ini dilisensikan di bawah MIT License. Bebas digunakan untuk belajar, mengajar, atau dikembangkan lebih lanjut.</p>"},{"location":"#ayo-mulai","title":"\ud83d\ude80 Ayo Mulai!","text":"<p>Klik menu di sebelah kiri untuk mulai belajar dari bab pertama \u2014 dan mari kita kuasai Java bersama \ud83d\udcbb\ud83d\udd25</p>"},{"location":"setup/","title":"\ud83d\udee0\ufe0f Persiapan Lingkungan Pemrograman Java","text":"<p>Sebelum mulai menulis kode Java, kita perlu menyiapkan lingkungan pengembangan yang meliputi:</p> <ol> <li>Instalasi JDK (Java Development Kit)</li> <li>Instalasi IDE (Integrated Development Environment)</li> <li>Uji Coba Jalankan Program Pertama</li> </ol>"},{"location":"setup/#1-instalasi-jdk-java-development-kit","title":"1. \u2705 Instalasi JDK (Java Development Kit)","text":"<p>JDK adalah paket perangkat lunak yang berisi compiler, JVM (Java Virtual Machine), dan tools lainnya.</p>"},{"location":"setup/#unduh-jdk","title":"\ud83d\udd3d Unduh JDK","text":"<ul> <li> <p>Oracle JDK (resmi): https://www.oracle.com/java/technologies/javase-downloads.html</p> </li> <li> <p>Alternatif Open Source (lebih ringan):  </p> </li> <li>Adoptium (OpenJDK)</li> <li>Amazon Corretto</li> </ul> <p>\ud83d\udca1 Gunakan JDK versi 17 atau lebih baru untuk stabilitas dan fitur terkini.</p>"},{"location":"setup/#cara-instal-windowsmaclinux","title":"\ud83d\udda5\ufe0f Cara Instal (Windows/Mac/Linux)","text":"<ul> <li> <p>Windows:   Unduh file <code>.exe</code>, lalu jalankan seperti instalasi biasa. Setelah itu, tambahkan JDK ke <code>PATH</code>.</p> </li> <li> <p>Linux (Ubuntu):   ```bash   sudo apt update   sudo apt install openjdk-17-jdk ````</p> </li> <li> <p>MacOS:   Gunakan Homebrew</p> </li> </ul> <pre><code>brew install openjdk@17\n</code></pre>"},{"location":"setup/#verifikasi-instalasi","title":"\ud83d\udd0d Verifikasi Instalasi","text":"<p>Cek apakah Java sudah terinstal:</p> <pre><code>java -version\n</code></pre>"},{"location":"setup/#2-instalasi-ide-editor-kode","title":"2. \ud83d\udcbb Instalasi IDE (Editor Kode)","text":"<p>Agar lebih mudah menulis dan menjalankan Java, kita gunakan IDE.</p>"},{"location":"setup/#rekomendasi-ide","title":"Rekomendasi IDE:","text":"IDE Keterangan IntelliJ IDEA Powerful, lengkap, dan smart Eclipse Ringan dan fleksibel VS Code Modern, butuh plugin tambahan Java NetBeans Sudah built-in Java GUI support <p>\ud83d\udca1 Untuk pemula: IntelliJ IDEA Community Edition sangat direkomendasikan.</p>"},{"location":"setup/#3-menjalankan-program-pertama","title":"3. \ud83e\uddea Menjalankan Program Pertama","text":"<p>Buat file <code>HelloWorld.java</code>:</p> <pre><code>public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Halo, dunia!\");\n    }\n}\n</code></pre>"},{"location":"setup/#kompilasi-jalankan","title":"Kompilasi &amp; Jalankan","text":"<pre><code>javac HelloWorld.java   # Kompilasi\njava HelloWorld         # Jalankan\n</code></pre> <p>Jika berhasil, akan muncul:</p> <pre><code>Halo, dunia!\n</code></pre>"},{"location":"setup/#tips-tambahan","title":"\ud83d\udcdd Tips Tambahan","text":"<ul> <li>Gunakan folder khusus untuk proyek Java-mu.</li> <li>Simpan file dengan nama yang sama seperti kelasnya (<code>HelloWorld.java</code> untuk <code>class HelloWorld</code>)</li> <li>Jangan takut membuat kesalahan \u2014 debugging adalah bagian dari proses belajar!</li> </ul>"},{"location":"setup/#siap-belajar-java","title":"\ud83c\udf89 Siap Belajar Java!","text":"<p>Sekarang kamu sudah siap menulis dan menjalankan program Java. Mari lanjut ke materi pertama: Struktur Dasar Program Java</p> <p>\u27a1\ufe0f Lanjut ke Struktur Program Java</p>"},{"location":"dasar/expression/","title":"\ud83e\udde0 Ekspresi (Expression) dalam Java","text":"<p>Expression adalah pernyataan dalam kode yang menghasilkan suatu nilai. Setiap ekspresi memiliki tipe data tertentu (int, boolean, String, dll.) dan bisa digunakan dalam operasi, pengambilan keputusan, dan logika program.</p>"},{"location":"dasar/expression/#contoh-ekspresi-sederhana","title":"\ud83d\udccc Contoh Ekspresi Sederhana","text":"<pre><code>int a = 5;\nint b = 10;\nint c = a + b; // a + b adalah ekspresi\n````\n\n* `5` \u2192 ekspresi literal\n* `a + b` \u2192 ekspresi aritmatika\n* `c = a + b` \u2192 ekspresi penugasan (assignment)\n\n---\n\n## \ud83e\uddee Jenis Ekspresi dalam Java\n\n| Jenis       | Contoh                     | Penjelasan                   |\n| ----------- | -------------------------- | ---------------------------- |\n| Literal     | `42`, `\"Halo\"`, `true`     | Nilai tetap                  |\n| Aritmatika  | `a + b`, `x * 10`          | Operasi matematika           |\n| Relasional  | `a &gt; b`, `x == y`          | Menghasilkan boolean         |\n| Logika      | `a &gt; 5 &amp;&amp; b &lt; 10`          | Kombinasi ekspresi boolean   |\n| Penugasan   | `x = 7`, `total += 1`      | Menyimpan nilai ke variabel  |\n| Unary       | `-a`, `!isBenar`, `++x`    | Satu operand                 |\n| Ternary     | `(a &gt; b) ? a : b`          | Pemilihan nilai              |\n| Method Call | `System.out.println(\"Hi\")` | Ekspresi dengan efek samping |\n\n---\n\n## \ud83d\udd01 Ekspresi vs Statement\n\n* **Ekspresi** menghasilkan nilai\n* **Statement** adalah perintah lengkap (bisa mengandung ekspresi)\n\n```java\nint x = 3 + 4; // Statement, mengandung ekspresi \"3 + 4\"\n</code></pre>"},{"location":"dasar/expression/#contoh-dalam-if-dan-while","title":"\ud83e\uddea Contoh dalam <code>if</code> dan <code>while</code>","text":"<pre><code>if (nilai &gt;= 75) { // nilai &gt;= 75 adalah ekspresi boolean\n    System.out.println(\"Lulus\");\n}\n\nwhile (i &lt; 10) {  // i &lt; 10 adalah ekspresi boolean\n    i++;          // i++ adalah ekspresi unary\n}\n</code></pre>"},{"location":"dasar/expression/#kenapa-penting","title":"\ud83d\udccc Kenapa Penting?","text":"<p>Memahami ekspresi:</p> <ul> <li>Membantu menulis kode yang ringkas dan efisien</li> <li>Penting saat debugging atau membaca logika</li> <li>Dasar untuk memahami operator dan control flow</li> </ul>"},{"location":"dasar/expression/#tips","title":"\ud83d\udca1 Tips","text":"<ul> <li>Semua ekspresi punya tipe data: int, boolean, double, dll.</li> <li>Jangan bingung dengan statement \u2014 ekspresi bisa menjadi bagian dari statement</li> <li>Beberapa ekspresi punya efek samping (misal: <code>x++</code>, <code>System.out.println()</code>)</li> </ul>"},{"location":"dasar/expression/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"Konsep Penjelasan Expression Pernyataan yang menghasilkan nilai Digunakan di Penugasan, percabangan, perulangan, return Jenis umum Aritmatika, logika, relasional, unary, dst. Dasar dari Operator, perhitungan, dan struktur logika <p>\u27a1\ufe0f Lanjut ke: operator.md atau kontrol_alur.md</p> <p>```</p>"},{"location":"dasar/kontrol_alur/","title":"\ud83d\udd00 Kontrol Alur dalam Java (if, else, switch)","text":"<p>Kontrol alur adalah struktur dalam Java yang memungkinkan program mengambil keputusan berdasarkan kondisi tertentu.</p> <p>Dengan kontrol alur, kita bisa membuat program yang berpikir dan bereaksi terhadap data.</p>"},{"location":"dasar/kontrol_alur/#1-pernyataan-if","title":"\ud83e\udde0 1. Pernyataan <code>if</code>","text":"<p>Struktur dasar: <pre><code>if (kondisi) {\n    // kode dijalankan jika kondisi true\n}\n````\n\n### Contoh:\n\n```java\nint usia = 20;\nif (usia &gt;= 18) {\n    System.out.println(\"Anda sudah dewasa.\");\n}\n</code></pre></p>"},{"location":"dasar/kontrol_alur/#2-if-else","title":"\ud83d\udd00 2. <code>if</code> - <code>else</code>","text":"<p>Gunakan <code>else</code> untuk kondisi sebaliknya:</p> <pre><code>if (kondisi) {\n    // jika true\n} else {\n    // jika false\n}\n</code></pre>"},{"location":"dasar/kontrol_alur/#contoh","title":"Contoh:","text":"<pre><code>int nilai = 55;\nif (nilai &gt;= 60) {\n    System.out.println(\"Lulus\");\n} else {\n    System.out.println(\"Tidak Lulus\");\n}\n</code></pre>"},{"location":"dasar/kontrol_alur/#3-if-else-if-else","title":"\ud83e\uddf1 3. <code>if</code> - <code>else if</code> - <code>else</code>","text":"<p>Untuk banyak kondisi:</p> <pre><code>if (kondisi1) {\n    // aksi 1\n} else if (kondisi2) {\n    // aksi 2\n} else {\n    // aksi default\n}\n</code></pre>"},{"location":"dasar/kontrol_alur/#contoh_1","title":"Contoh:","text":"<pre><code>int nilai = 80;\n\nif (nilai &gt;= 90) {\n    System.out.println(\"A\");\n} else if (nilai &gt;= 80) {\n    System.out.println(\"B\");\n} else if (nilai &gt;= 70) {\n    System.out.println(\"C\");\n} else {\n    System.out.println(\"D\");\n}\n</code></pre>"},{"location":"dasar/kontrol_alur/#4-operator-logika-dalam-if","title":"\ud83c\udf9a\ufe0f 4. Operator Logika dalam <code>if</code>","text":"<p>Gabungkan beberapa kondisi:</p> <pre><code>if (x &gt; 10 &amp;&amp; x &lt; 20) {\n    // antara 10 dan 20\n}\n</code></pre> Operator Fungsi <code>&amp;&amp;</code> dan ` ` atau <code>!</code> bukan"},{"location":"dasar/kontrol_alur/#5-pernyataan-switch","title":"\ud83c\udf9b\ufe0f 5. Pernyataan <code>switch</code>","text":"<p>Alternatif lebih rapi daripada <code>if-else</code> berantai ketika mengevaluasi satu variabel dengan banyak kemungkinan nilai.</p> <pre><code>switch (variabel) {\n    case nilai1:\n        // aksi\n        break;\n    case nilai2:\n        // aksi\n        break;\n    default:\n        // aksi default\n}\n</code></pre>"},{"location":"dasar/kontrol_alur/#contoh_2","title":"Contoh:","text":"<pre><code>int hari = 3;\nswitch (hari) {\n    case 1:\n        System.out.println(\"Senin\"); break;\n    case 2:\n        System.out.println(\"Selasa\"); break;\n    case 3:\n        System.out.println(\"Rabu\"); break;\n    default:\n        System.out.println(\"Hari tidak diketahui\");\n}\n</code></pre>"},{"location":"dasar/kontrol_alur/#studi-kasus-menentukan-ganjilgenap","title":"\ud83e\uddea Studi Kasus: Menentukan Ganjil/Genap","text":"<pre><code>int angka = 7;\n\nif (angka % 2 == 0) {\n    System.out.println(\"Genap\");\n} else {\n    System.out.println(\"Ganjil\");\n}\n</code></pre>"},{"location":"dasar/kontrol_alur/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"Struktur Kegunaan <code>if</code> Mengecek kondisi benar <code>else</code> Aksi jika kondisi salah <code>else if</code> Mengecek banyak kondisi <code>switch</code> Menangani banyak pilihan nilai dengan rapi <p>\u27a1\ufe0f Selanjutnya: Perulangan (Loop) dalam Java</p>"},{"location":"dasar/method/","title":"\ud83d\udd27 Method &amp; Parameter dalam Java","text":"<p>Method adalah blok kode yang dirancang untuk melakukan tugas tertentu. Dengan method, kita bisa mengelola kode lebih rapi, menghindari duplikasi, dan mengulang logika tanpa menulis ulang.</p>"},{"location":"dasar/method/#struktur-dasar-method","title":"\ud83e\uddf1 Struktur Dasar Method","text":"<pre><code>tipeKembalian namaMethod(parameter) {\n    // blok kode\n}\n````\n\n### Contoh:\n\n```java\nvoid sapa() {\n    System.out.println(\"Halo, Dunia!\");\n}\n</code></pre> <p>Method <code>sapa()</code> tidak mengembalikan nilai (<code>void</code>) dan tidak menerima parameter.</p>"},{"location":"dasar/method/#memanggil-method","title":"\ud83d\udd01 Memanggil Method","text":"<p>Untuk menjalankan method, cukup panggil namanya:</p> <pre><code>public class Demo {\n    static void sapa() {\n        System.out.println(\"Halo, Dunia!\");\n    }\n\n    public static void main(String[] args) {\n        sapa(); // memanggil method\n    }\n}\n</code></pre>"},{"location":"dasar/method/#method-dengan-parameter","title":"\ud83c\udfaf Method dengan Parameter","text":"<p>Kita bisa mengirimkan nilai ke dalam method sebagai parameter.</p> <pre><code>static void sapa(String nama) {\n    System.out.println(\"Halo, \" + nama + \"!\");\n}\n</code></pre>"},{"location":"dasar/method/#contoh-pemanggilan","title":"Contoh Pemanggilan:","text":"<pre><code>sapa(\"Marno\");\nsapa(\"Dunia\");\n</code></pre> <p>\ud83d\udca1 Output:</p> <pre><code>Halo, Marno!\nHalo, Dunia!\n</code></pre>"},{"location":"dasar/method/#method-dengan-nilai-kembalian","title":"\ud83d\udd01 Method dengan Nilai Kembalian","text":"<p>Jika method menghasilkan output, gunakan <code>return</code> dan tentukan tipe data:</p> <pre><code>static int tambah(int a, int b) {\n    return a + b;\n}\n</code></pre>"},{"location":"dasar/method/#contoh","title":"Contoh:","text":"<pre><code>int hasil = tambah(5, 3);\nSystem.out.println(\"Hasil = \" + hasil);\n</code></pre> <p>\ud83d\udca1 Output:</p> <pre><code>Hasil = 8\n</code></pre>"},{"location":"dasar/method/#overloading-method","title":"\ud83d\udd00 Overloading Method","text":"<p>Java memungkinkan dua method dengan nama sama, tapi parameter berbeda. Ini disebut method overloading.</p> <pre><code>static void cetak(String teks) {\n    System.out.println(teks);\n}\n\nstatic void cetak(int angka) {\n    System.out.println(\"Angka: \" + angka);\n}\n</code></pre> <p>Pemanggilan <code>cetak(\"Hai\")</code> dan <code>cetak(5)</code> akan memilih versi method yang sesuai.</p>"},{"location":"dasar/method/#studi-kasus-hitung-luas-persegi-panjang","title":"\ud83d\udcda Studi Kasus: Hitung Luas Persegi Panjang","text":"<pre><code>static int hitungLuas(int panjang, int lebar) {\n    return panjang * lebar;\n}\n\npublic static void main(String[] args) {\n    int luas = hitungLuas(5, 3);\n    System.out.println(\"Luas = \" + luas);\n}\n</code></pre>"},{"location":"dasar/method/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"Konsep Penjelasan Method Blok kode yang bisa digunakan berulang Parameter Data yang dikirimkan ke dalam method Return Nilai yang dikembalikan oleh method Overloading Method dengan nama sama tapi parameter beda <p>\u27a1\ufe0f Selanjutnya: Konsep OOP: Object-Oriented Programming</p>"},{"location":"dasar/operator/","title":"\u2795 Operator dan Ekspresi dalam Java","text":"<p>Operator adalah simbol atau kata kunci yang digunakan untuk melakukan operasi terhadap variabel atau nilai dalam Java. Ekspresi adalah kombinasi dari variabel, nilai, dan operator yang menghasilkan nilai baru. Bagian ini menjelaskan jenis-jenis operator utama di Java dan cara penggunaannya dalam program.</p>"},{"location":"dasar/operator/#jenis-jenis-operator-di-java","title":"\ud83c\udf9b\ufe0f Jenis-Jenis Operator di Java","text":"<p>Java menyediakan beberapa kategori operator untuk berbagai keperluan, mulai dari operasi matematika hingga logika.</p>"},{"location":"dasar/operator/#1-operator-aritmatika","title":"1. \ud83e\uddee Operator Aritmatika","text":"<p>Operator aritmatika digunakan untuk operasi matematika dasar.</p> Operator Nama Contoh (<code>a = 10</code>, <code>b = 3</code>) Hasil <code>+</code> Penjumlahan <code>a + b</code> <code>13</code> <code>-</code> Pengurangan <code>a - b</code> <code>7</code> <code>*</code> Perkalian <code>a * b</code> <code>30</code> <code>/</code> Pembagian <code>a / b</code> <code>3</code> <code>%</code> Modulo (sisa bagi) <code>a % b</code> <code>1</code> <p>\ud83d\udca1 Tips: Operator modulo (<code>%</code>) sering digunakan untuk mengecek bilangan genap/ganjil. Contoh: <code>if (x % 2 == 0)</code> untuk mengecek bilangan genap.</p>"},{"location":"dasar/operator/#2-operator-perbandingan-relasional","title":"2. \u2696\ufe0f Operator Perbandingan (Relasional)","text":"<p>Operator perbandingan digunakan untuk membandingkan dua nilai dan menghasilkan nilai boolean (<code>true</code> atau <code>false</code>).</p> Operator Arti Contoh (<code>a = 10</code>, <code>b = 3</code>) <code>==</code> Sama dengan <code>a == b</code> \u2192 <code>false</code> <code>!=</code> Tidak sama dengan <code>a != b</code> \u2192 <code>true</code> <code>&gt;</code> Lebih besar <code>a &gt; b</code> \u2192 <code>true</code> <code>&lt;</code> Lebih kecil <code>a &lt; b</code> \u2192 <code>false</code> <code>&gt;=</code> Lebih besar atau sama dengan <code>a &gt;= b</code> \u2192 <code>true</code> <code>&lt;=</code> Lebih kecil atau sama dengan <code>a &lt;= b</code> \u2192 <code>false</code>"},{"location":"dasar/operator/#3-operator-logika-boolean","title":"3. \ud83d\udca1 Operator Logika (Boolean)","text":"<p>Operator logika digunakan untuk menggabungkan ekspresi boolean, sering digunakan dalam struktur seperti <code>if</code> atau <code>while</code>.</p> Operator Nama Contoh Hasil <code>&amp;&amp;</code> AND <code>true &amp;&amp; false</code> <code>false</code> <code>||</code> OR <code>true || false</code> <code>true</code> <code>!</code> NOT <code>!true</code> <code>false</code> <p>\ud83d\udccc Catatan: Operator <code>&amp;&amp;</code> hanya mengembalikan <code>true</code> jika kedua kondisi benar, sedangkan <code>||</code> mengembalikan <code>true</code> jika salah satu kondisi benar.</p>"},{"location":"dasar/operator/#4-operator-penugasan","title":"4. \ud83d\udd8a\ufe0f Operator Penugasan","text":"<p>Operator penugasan digunakan untuk menetapkan atau memperbarui nilai variabel.</p> Operator Contoh Sama Dengan <code>=</code> <code>x = 5</code> Menetapkan 5 ke <code>x</code> <code>+=</code> <code>x += 2</code> <code>x = x + 2</code> <code>-=</code> <code>x -= 2</code> <code>x = x - 2</code> <code>*=</code> <code>x *= 2</code> <code>x = x * 2</code> <code>/=</code> <code>x /= 2</code> <code>x = x / 2</code> <code>%=</code> <code>x %= 2</code> <code>x = x % 2</code>"},{"location":"dasar/operator/#5-operator-inkrement-dan-dekrement","title":"5. \u2b06\ufe0f Operator Inkrement dan Dekrement","text":"<p>Operator inkrement dan dekrement digunakan untuk menambah atau mengurangi nilai variabel sebesar 1.</p> Operator Contoh Efek <code>++</code> <code>x++</code> Menambah <code>x</code> sebesar 1 <code>--</code> <code>x--</code> Mengurangi <code>x</code> sebesar 1 <p>\ud83d\udca1 Info: - <code>x++</code> (post-increment) mengembalikan nilai <code>x</code> sebelum ditambah. - <code>++x</code> (pre-increment) mengembalikan nilai <code>x</code> setelah ditambah. Contoh: Jika <code>x = 5</code>, maka <code>System.out.println(x++)</code> mencetak <code>5</code>, tetapi <code>System.out.println(++x)</code> mencetak <code>6</code>.</p>"},{"location":"dasar/operator/#contoh-program","title":"\ud83e\uddea Contoh Program","text":"<p>Berikut adalah contoh program yang menggunakan berbagai jenis operator:</p> <pre><code>public class OperatorDemo {\n    public static void main(String[] args) {\n        int a = 10, b = 3;\n        boolean hasil;\n\n        // Operator Aritmatika\n        System.out.println(\"a + b = \" + (a + b)); // Penjumlahan\n        System.out.println(\"a % b = \" + (a % b)); // Modulo\n\n        // Operator Perbandingan\n        System.out.println(\"a &gt; b = \" + (a &gt; b)); // Lebih besar\n\n        // Operator Logika\n        hasil = (a &gt; 5) &amp;&amp; (b &lt; 5);\n        System.out.println(\"Logika AND (a &gt; 5 &amp;&amp; b &lt; 5): \" + hasil);\n\n        // Operator Penugasan\n        int x = 5;\n        x += 3;\n        System.out.println(\"x setelah += 3: \" + x);\n\n        // Operator Inkrement\n        x++;\n        System.out.println(\"x setelah x++: \" + x);\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>a + b = 13\na % b = 1\na &gt; b = true\nLogika AND (a &gt; 5 &amp;&amp; b &lt; 5): true\nx setelah += 3: 8\nx setelah x++: 9\n</code></pre>"},{"location":"dasar/operator/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"<ul> <li>Java menyediakan berbagai jenis operator: aritmatika, perbandingan, logika, penugasan, dan inkrement/dekrement.</li> <li>Operator digunakan untuk membentuk ekspresi yang menghasilkan nilai baru.</li> <li>Pemahaman operator penting untuk memanipulasi data dan membuat logika dalam program.</li> </ul>"},{"location":"dasar/operator/#langkah-selanjutnya","title":"\ud83d\udcda Langkah Selanjutnya","text":"<p>Pelajari lebih lanjut tentang Kontrol Alur: If, Else, dan Switch untuk memahami cara mengatur alur program berdasarkan kondisi.</p>"},{"location":"dasar/perulangan/","title":"\ud83d\udd01 Perulangan (Loop) dalam Java","text":"<p>Perulangan memungkinkan eksekusi blok kode secara berulang selama kondisi tertentu terpenuhi. Java menyediakan tiga jenis perulangan utama: <code>for</code>, <code>while</code>, dan <code>do-while</code>. Selain itu, terdapat mekanisme seperti <code>break</code>, <code>continue</code>, dan perulangan bersarang untuk mengontrol alur perulangan.</p>"},{"location":"dasar/perulangan/#1-perulangan-for","title":"1. \ud83d\udd03 Perulangan <code>for</code>","text":"<p>Perulangan <code>for</code> digunakan ketika jumlah iterasi sudah diketahui sebelumnya.</p>"},{"location":"dasar/perulangan/#struktur","title":"Struktur:","text":"<pre><code>for (inisialisasi; kondisi; perubahan) {\n    // Blok kode yang diulang\n}\n</code></pre> <ul> <li>Inisialisasi: Menyiapkan variabel pengontrol (misalnya, <code>int i = 1</code>).</li> <li>Kondisi: Mengevaluasi apakah perulangan harus dilanjutkan (misalnya, <code>i &lt;= 5</code>).</li> <li>Perubahan: Memperbarui nilai variabel pengontrol (misalnya, <code>i++</code>).</li> </ul>"},{"location":"dasar/perulangan/#contoh","title":"Contoh:","text":"<pre><code>for (int i = 1; i &lt;= 5; i++) {\n    System.out.println(\"Iterasi ke-\" + i);\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Iterasi ke-1\nIterasi ke-2\nIterasi ke-3\nIterasi ke-4\nIterasi ke-5\n</code></pre>"},{"location":"dasar/perulangan/#2-perulangan-while","title":"2. \u267b\ufe0f Perulangan <code>while</code>","text":"<p>Perulangan <code>while</code> digunakan ketika jumlah iterasi tidak diketahui secara pasti, tetapi perulangan berlanjut selama kondisi tertentu terpenuhi.</p>"},{"location":"dasar/perulangan/#struktur_1","title":"Struktur:","text":"<pre><code>while (kondisi) {\n    // Blok kode yang diulang\n}\n</code></pre>"},{"location":"dasar/perulangan/#contoh_1","title":"Contoh:","text":"<pre><code>int i = 1;\nwhile (i &lt;= 3) {\n    System.out.println(\"i = \" + i);\n    i++;\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>i = 1\ni = 2\ni = 3\n</code></pre> <p>\ud83d\udccc Catatan: Pastikan kondisi dalam <code>while</code> akan berhenti pada suatu titik untuk menghindari infinite loop.</p>"},{"location":"dasar/perulangan/#3-perulangan-do-while","title":"3. \ud83d\udd04 Perulangan <code>do-while</code>","text":"<p>Perulangan <code>do-while</code> menjalankan blok kode minimal satu kali sebelum memeriksa kondisi.</p>"},{"location":"dasar/perulangan/#struktur_2","title":"Struktur:","text":"<pre><code>do {\n    // Blok kode yang diulang\n} while (kondisi);\n</code></pre>"},{"location":"dasar/perulangan/#contoh_2","title":"Contoh:","text":"<pre><code>int i = 1;\ndo {\n    System.out.println(\"Cetak ke-\" + i);\n    i++;\n} while (i &lt;= 2);\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Cetak ke-1\nCetak ke-2\n</code></pre> <p>\ud83d\udca1 Info: Perulangan <code>do-while</code> cocok untuk kasus di mana kode harus dijalankan setidaknya sekali, seperti meminta input pengguna hingga valid.</p>"},{"location":"dasar/perulangan/#4-perulangan-bersarang-nested-loop","title":"4. \ud83d\udd02 Perulangan Bersarang (Nested Loop)","text":"<p>Perulangan bersarang adalah perulangan di dalam perulangan lain. Biasanya digunakan untuk pola data kompleks, seperti tabel atau matriks.</p>"},{"location":"dasar/perulangan/#contoh_3","title":"Contoh:","text":"<pre><code>for (int i = 1; i &lt;= 3; i++) {\n    for (int j = 1; j &lt;= 2; j++) {\n        System.out.println(\"i = \" + i + \", j = \" + j);\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>i = 1, j = 1\ni = 1, j = 2\ni = 2, j = 1\ni = 2, j = 2\ni = 3, j = 1\ni = 3, j = 2\n</code></pre>"},{"location":"dasar/perulangan/#5-pengendalian-perulangan-break-dan-continue","title":"5. \u26d4 Pengendalian Perulangan: <code>break</code> dan <code>continue</code>","text":""},{"location":"dasar/perulangan/#break","title":"<code>break</code>","text":"<p>Perintah <code>break</code> menghentikan perulangan sepenuhnya saat kondisi tertentu terpenuhi.</p> <pre><code>for (int i = 1; i &lt;= 5; i++) {\n    if (i == 3) {\n        break;\n    }\n    System.out.println(\"i = \" + i);\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>i = 1\ni = 2\n</code></pre>"},{"location":"dasar/perulangan/#continue","title":"<code>continue</code>","text":"<p>Perintah <code>continue</code> melewati iterasi saat ini dan melanjutkan ke iterasi berikutnya.</p> <pre><code>for (int i = 1; i &lt;= 5; i++) {\n    if (i == 3) {\n        continue;\n    }\n    System.out.println(\"i = \" + i);\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>i = 1\ni = 2\ni = 4\ni = 5\n</code></pre>"},{"location":"dasar/perulangan/#studi-kasus-menjumlahkan-5-bilangan","title":"\ud83e\uddea Studi Kasus: Menjumlahkan 5 Bilangan","text":"<p>Berikut adalah contoh program untuk menjumlahkan bilangan dari 1 hingga 5 menggunakan perulangan <code>for</code>:</p> <pre><code>public class JumlahBilangan {\n    public static void main(String[] args) {\n        int total = 0;\n        for (int i = 1; i &lt;= 5; i++) {\n            total += i;\n        }\n        System.out.println(\"Total = \" + total);\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Total = 15\n</code></pre>"},{"location":"dasar/perulangan/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"<p>Perulangan adalah alat penting dalam pemrograman untuk menjalankan kode berulang kali. Berikut adalah ringkasan jenis perulangan di Java:</p> Jenis Perulangan Kapan Digunakan <code>for</code> Jumlah iterasi diketahui sebelumnya <code>while</code> Jumlah iterasi tidak diketahui pasti <code>do-while</code> Blok kode dijalankan minimal satu kali <code>break</code> Menghentikan perulangan sepenuhnya <code>continue</code> Melewati satu iterasi dan melanjutkan lainnya <p>\ud83d\udca1 Tips: Gunakan perulangan yang sesuai dengan kebutuhan program Anda untuk menjaga kode tetap efisien dan mudah dibaca.</p>"},{"location":"dasar/perulangan/#langkah-selanjutnya","title":"\ud83d\udcda Langkah Selanjutnya","text":"<p>Pelajari lebih lanjut tentang Method dan Parameter dalam Java untuk memahami cara membuat fungsi dalam program.</p>"},{"location":"dasar/struktur/","title":"\ud83e\uddf1 Struktur Dasar Program Java","text":"<p>Sebelum membangun aplikasi besar, penting untuk memahami fondasi penulisan kode dalam bahasa pemrograman Java. Bagian ini akan menjelaskan struktur dasar program Java dengan contoh sederhana dan penjelasan rinci.</p>"},{"location":"dasar/struktur/#contoh-program-java-sederhana","title":"\ud83d\udd0d Contoh Program Java Sederhana","text":"<p>Berikut adalah contoh program Java paling dasar yang menampilkan teks \"Halo, dunia!\" ke layar:</p> <pre><code>public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Halo, dunia!\");\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Halo, dunia!\n</code></pre>"},{"location":"dasar/struktur/#penjelasan-baris-per-baris","title":"\ud83e\udde9 Penjelasan Baris per Baris","text":"<p>Mari kita bedah setiap baris dari kode di atas untuk memahami struktur dasarnya.</p>"},{"location":"dasar/struktur/#1-public-class-helloworld","title":"1. <code>public class HelloWorld</code>","text":"<ul> <li><code>class</code>: Mendefinisikan sebuah kelas, yang merupakan wadah utama untuk kode dalam Java.</li> <li><code>HelloWorld</code>: Nama kelas, yang harus sama dengan nama file (dalam hal ini, <code>HelloWorld.java</code>).</li> <li><code>public</code>: Menandakan bahwa kelas ini dapat diakses dari mana saja.</li> </ul> <p>\ud83d\udccc Catatan: Satu file <code>.java</code> hanya boleh memiliki satu <code>public class</code>, dan nama file harus identik dengan nama kelas tersebut.</p>"},{"location":"dasar/struktur/#2-public-static-void-mainstring-args","title":"2. <code>public static void main(String[] args)</code>","text":"<ul> <li><code>public</code>: Method ini dapat diakses dari luar kelas.</li> <li><code>static</code>: Method dapat dijalankan tanpa perlu membuat objek dari kelas.</li> <li><code>void</code>: Method tidak mengembalikan nilai apa pun.</li> <li><code>main</code>: Nama method yang menjadi titik masuk (entry point) program Java.</li> <li><code>String[] args</code>: Parameter untuk menerima argumen dari command line.</li> </ul> <p>\ud83d\udca1 Info: Method <code>main</code> wajib ada dalam setiap program Java yang dapat dijalankan. Tanpa method ini, program tidak akan bisa dijalankan.</p>"},{"location":"dasar/struktur/#3-systemoutprintlnhalo-dunia","title":"3. <code>System.out.println(\"Halo, dunia!\");</code>","text":"<ul> <li><code>System</code>: Kelas bawaan Java untuk mengakses fungsi sistem standar.</li> <li><code>out</code>: Objek yang mewakili output standar (biasanya layar atau konsol).</li> <li><code>println</code>: Method untuk mencetak teks ke layar dan menambahkan baris baru setelahnya.</li> </ul>"},{"location":"dasar/struktur/#struktur-file-dan-folder","title":"\ud83d\udcc1 Struktur File dan Folder","text":"<p>Struktur file yang umum digunakan untuk program Java sederhana adalah sebagai berikut:</p> <pre><code>BelajarJava/\n\u2514\u2500\u2500 HelloWorld.java\n</code></pre> <p>Catatan: Pastikan file <code>.java</code> disimpan dengan nama yang sesuai dengan nama kelas <code>public</code>.</p>"},{"location":"dasar/struktur/#cara-kompilasi-dan-menjalankan-program","title":"\ud83d\udee0\ufe0f Cara Kompilasi dan Menjalankan Program","text":"<p>Berikut adalah langkah-langkah untuk mengompilasi dan menjalankan program Java:</p>"},{"location":"dasar/struktur/#1-kompilasi-program","title":"1. Kompilasi Program","text":"<p>Gunakan perintah berikut untuk mengompilasi file <code>HelloWorld.java</code>:</p> <pre><code>javac HelloWorld.java\n</code></pre> <p>\ud83d\udce6 Hasil: Jika tidak ada error, akan dihasilkan file <code>HelloWorld.class</code>, yang merupakan bytecode yang dapat dijalankan oleh JVM (Java Virtual Machine).</p>"},{"location":"dasar/struktur/#2-jalankan-program","title":"2. Jalankan Program","text":"<p>Setelah dikompilasi, jalankan program dengan perintah berikut:</p> <pre><code>java HelloWorld\n</code></pre> <p>\ud83d\udda8\ufe0f Output: Program akan mencetak teks <code>Halo, dunia!</code> ke konsol.</p>"},{"location":"dasar/struktur/#hal-hal-penting-yang-harus-diingat","title":"\u26a0\ufe0f Hal-Hal Penting yang Harus Diingat","text":"<p>Berikut adalah beberapa aturan penting dalam penulisan program Java:</p> \u2699\ufe0f Aspek \ud83d\udca1 Penjelasan Nama file = nama kelas <code>public</code> Nama file (<code>HelloWorld.java</code>) harus sama dengan nama kelas <code>public</code> (<code>HelloWorld</code>). Java bersifat case-sensitive <code>HelloWorld</code> \u2260 <code>helloworld</code>. Huruf besar dan kecil dibedakan. Statement diakhiri titik koma (<code>;</code>) Setiap pernyataan kode harus diakhiri dengan tanda titik koma. Blok kode menggunakan <code>{</code> dan <code>}</code> Setiap blok kode harus dibuka dengan <code>{</code> dan ditutup dengan <code>}</code>, harus seimbang."},{"location":"dasar/struktur/#kesimpulan","title":"\ud83e\udded Kesimpulan","text":"<p>Struktur dasar program Java terdiri dari tiga elemen utama:</p> <ol> <li>Kelas (<code>class</code>): Wadah utama kode program.</li> <li>Method <code>main</code>: Titik masuk eksekusi program.</li> <li>Statement: Perintah-perintah seperti <code>System.out.println</code> untuk menjalankan logika program.</li> </ol> <p>Contoh di atas (<code>System.out.println(\"Halo, dunia!\");</code>) adalah langkah awal untuk memahami Java.</p>"},{"location":"dasar/struktur/#langkah-selanjutnya","title":"\ud83d\udcda Langkah Selanjutnya","text":"<p>Pelajari lebih lanjut tentang Tipe Data &amp; Variabel untuk memperdalam pemahaman Anda tentang Java.</p>"},{"location":"dasar/tipe_data/","title":"\ud83e\udde0 Tipe Data dan Variabel dalam Java","text":"<p>Dalam pemrograman Java, tipe data menentukan jenis nilai yang dapat disimpan oleh sebuah variabel, seperti angka, teks, atau nilai logika. Variabel berfungsi sebagai wadah untuk menyimpan data di memori komputer. Bagian ini menjelaskan tipe data, aturan penamaan variabel, dan cara penggunaannya dengan contoh.</p>"},{"location":"dasar/tipe_data/#apa-itu-variabel","title":"\ud83d\udd24 Apa Itu Variabel?","text":"<p>Variabel adalah wadah dalam memori untuk menyimpan data. Setiap variabel memiliki tiga komponen utama:</p> <ul> <li>Nama (identifier): Nama unik untuk mengidentifikasi variabel.</li> <li>Tipe data: Jenis data yang dapat disimpan (misalnya, angka, teks, atau logika).</li> <li>Nilai: Data yang disimpan dalam variabel.</li> </ul>"},{"location":"dasar/tipe_data/#contoh-deklarasi-dan-inisialisasi-variabel","title":"Contoh Deklarasi dan Inisialisasi Variabel:","text":"<pre><code>int umur = 25;\nString nama = \"Marno\";\nboolean aktif = true;\n</code></pre>"},{"location":"dasar/tipe_data/#jenis-jenis-tipe-data-di-java","title":"\ud83d\udce6 Jenis-Jenis Tipe Data di Java","text":"<p>Java memiliki dua kategori utama tipe data: primitif dan referensi.</p>"},{"location":"dasar/tipe_data/#1-tipe-data-primitif","title":"1. \ud83d\udcca Tipe Data Primitif","text":"<p>Tipe data primitif adalah tipe dasar bawaan Java yang menyimpan nilai langsung di memori. Berikut adalah 8 tipe data primitif:</p> Tipe Ukuran Rentang Nilai / Contoh Keterangan <code>byte</code> 8 bit -128 hingga 127 Bilangan bulat kecil <code>short</code> 16 bit -32.768 hingga 32.767 Bilangan bulat sedang <code>int</code> 32 bit -2.147.483.648 hingga 2.147.483.647 Bilangan bulat umum <code>long</code> 64 bit -2\u2076\u00b3 hingga 2\u2076\u00b3-1 Bilangan bulat sangat besar <code>float</code> 32 bit 3.14f Bilangan desimal presisi rendah <code>double</code> 64 bit 3.1415926535 Bilangan desimal presisi tinggi <code>char</code> 16 bit 'A', '\\u0041' Karakter tunggal (Unicode) <code>boolean</code> 1 bit <code>true</code> atau <code>false</code> Nilai logika benar/salah <p>\ud83d\udccc Catatan: - Nilai <code>float</code> harus diakhiri dengan huruf <code>f</code> (contoh: <code>3.14f</code>). - Nilai <code>long</code> diakhiri dengan huruf <code>L</code> untuk membedakannya dari <code>int</code> (contoh: <code>123456789L</code>).</p>"},{"location":"dasar/tipe_data/#2-tipe-data-referensi","title":"2. \ud83e\uddf1 Tipe Data Referensi","text":"<p>Tipe data referensi menyimpan alamat memori dari objek, bukan nilai langsung. Beberapa contohnya meliputi:</p> Tipe Referensi Contoh Keterangan <code>String</code> <code>\"Halo, Java!\"</code> Teks atau rangkaian karakter <code>Array</code> <code>{1, 2, 3}</code> Kumpulan elemen dengan tipe sama <code>Class</code> <code>Scanner</code>, <code>Math</code> Objek dari kelas tertentu <p>\ud83d\udca1 Info: Tipe data referensi biasanya digunakan untuk struktur data yang lebih kompleks, seperti objek atau koleksi.</p>"},{"location":"dasar/tipe_data/#deklarasi-dan-inisialisasi-variabel","title":"\ud83d\udcdd Deklarasi dan Inisialisasi Variabel","text":""},{"location":"dasar/tipe_data/#1-deklarasi-tanpa-inisialisasi","title":"1. Deklarasi Tanpa Inisialisasi","text":"<p>Mendeklarasikan variabel tanpa memberikan nilai awal:</p> <pre><code>int x;\nString nama;\n</code></pre> <p>Catatan: Variabel yang hanya dideklarasikan tanpa inisialisasi tidak dapat digunakan sampai diberi nilai.</p>"},{"location":"dasar/tipe_data/#2-deklarasi-dengan-inisialisasi","title":"2. Deklarasi dengan Inisialisasi","text":"<p>Mendeklarasikan sekaligus memberikan nilai awal:</p> <pre><code>int umur = 25;\nboolean aktif = true;\n</code></pre>"},{"location":"dasar/tipe_data/#3-deklarasi-banyak-variabel-sekaligus","title":"3. Deklarasi Banyak Variabel Sekaligus","text":"<p>Mendeklarasikan beberapa variabel dengan tipe yang sama dalam satu baris:</p> <pre><code>int a = 1, b = 2, c = 3;\n</code></pre>"},{"location":"dasar/tipe_data/#aturan-penamaan-variabel","title":"\ud83d\udd10 Aturan Penamaan Variabel","text":"<p>Agar kode tetap valid dan mudah dibaca, ikuti aturan penamaan variabel berikut:</p> <ul> <li>Dimulai dengan huruf atau underscore (<code>_</code>): Tidak boleh dimulai dengan angka.</li> <li>Tanpa spasi: Gunakan camelCase atau underscore untuk nama yang panjang.</li> <li>Case-sensitive: <code>umur</code> \u2260 <code>Umur</code>.</li> <li>Hindari kata kunci Java: Kata seperti <code>int</code>, <code>class</code>, <code>public</code>, dll., tidak boleh digunakan sebagai nama variabel.</li> </ul>"},{"location":"dasar/tipe_data/#contoh-nama-variabel-yang-valid","title":"Contoh Nama Variabel yang Valid:","text":"<pre><code>String namaLengkap;\nint _nilaiAkhir;\ndouble tinggiBadan;\n</code></pre>"},{"location":"dasar/tipe_data/#contoh-nama-variabel-yang-tidak-valid","title":"Contoh Nama Variabel yang Tidak Valid:","text":"<pre><code>int 1angka;           // Error: Tidak boleh dimulai dengan angka\nString nama lengkap;  // Error: Tidak boleh ada spasi\nint class;            // Error: Menggunakan kata kunci Java\n</code></pre>"},{"location":"dasar/tipe_data/#contoh-program-lengkap","title":"\ud83e\uddea Contoh Program Lengkap","text":"<p>Berikut adalah contoh program yang menggunakan berbagai tipe data dan variabel:</p> <pre><code>public class TipeDataDemo {\n    public static void main(String[] args) {\n        int umur = 21;\n        double tinggi = 172.5;\n        char inisial = 'M';\n        boolean mahasiswa = true;\n        String nama = \"Marno\";\n\n        System.out.println(\"Nama: \" + nama);\n        System.out.println(\"Umur: \" + umur + \" tahun\");\n        System.out.println(\"Tinggi: \" + tinggi + \" cm\");\n        System.out.println(\"Inisial: \" + inisial);\n        System.out.println(\"Status Mahasiswa: \" + mahasiswa);\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Nama: Marno\nUmur: 21 tahun\nTinggi: 172.5 cm\nInisial: M\nStatus Mahasiswa: true\n</code></pre>"},{"location":"dasar/tipe_data/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"<ul> <li>Java memiliki dua jenis tipe data: primitif (nilai langsung) dan referensi (alamat memori objek).</li> <li>Variabel digunakan untuk menyimpan data dengan tipe tertentu.</li> <li>Penamaan variabel harus mengikuti aturan sintaks Java agar kode valid dan mudah dibaca.</li> <li>Tipe data menentukan jumlah memori yang digunakan dan cara data diproses.</li> </ul>"},{"location":"dasar/tipe_data/#langkah-selanjutnya","title":"\ud83d\udcda Langkah Selanjutnya","text":"<p>Pelajari lebih lanjut tentang Operator dan Ekspresi dalam Java untuk memahami cara memanipulasi data dalam program.</p>"},{"location":"lanjutan/collection_framework/","title":"\ud83e\uddfa Java Collection Framework (JCF) Tingkat Lanjut","text":"<p>Java Collection Framework menyediakan struktur data siap pakai seperti: - List (ArrayList, LinkedList) - Set (HashSet, TreeSet) - Map (HashMap, TreeMap) - Queue (LinkedList, PriorityQueue)</p> <p>Struktur data ini sangat efisien, aman, dan mendukung operasi skala besar.</p>"},{"location":"lanjutan/collection_framework/#hirarki-umum","title":"\ud83d\udd16 Hirarki Umum","text":"<pre><code>Collection\n\u251c\u2500\u2500 List\n\u2502    \u251c\u2500\u2500 ArrayList\n\u2502    \u2514\u2500\u2500 LinkedList\n\u251c\u2500\u2500 Set\n\u2502    \u251c\u2500\u2500 HashSet\n\u2502    \u2514\u2500\u2500 TreeSet\n\u2514\u2500\u2500 Queue\n\u251c\u2500\u2500 LinkedList\n\u2514\u2500\u2500 PriorityQueue\n\nMap (bukan bagian dari Collection, tapi setara)\n\u251c\u2500\u2500 HashMap\n\u2514\u2500\u2500 TreeMap\n\n````\n\n---\n\n## \ud83d\udcd8 List: Urutan dan Duplikasi\n\n```java\nList&lt;String&gt; daftar = new ArrayList&lt;&gt;();\ndaftar.add(\"Ali\");\ndaftar.add(\"Ali\"); // duplikasi diperbolehkan\n````\n\n* `ArrayList`: Akses cepat\n* `LinkedList`: Sisip/hapus cepat\n\n---\n\n## \ud83d\udd10 Set: Unik dan Tidak Berurutan\n\n```java\nSet&lt;String&gt; unik = new HashSet&lt;&gt;();\nunik.add(\"Marno\");\nunik.add(\"Marno\"); // hanya 1 yang disimpan\n</code></pre> <ul> <li><code>HashSet</code>: Unordered</li> <li><code>TreeSet</code>: Otomatis terurut (asc)</li> </ul>"},{"location":"lanjutan/collection_framework/#map-key-value","title":"\ud83e\udded Map: Key-Value","text":"<pre><code>Map&lt;String, Integer&gt; umur = new HashMap&lt;&gt;();\numur.put(\"Marno\", 25);\numur.put(\"Budi\", 30);\n\nSystem.out.println(umur.get(\"Marno\")); // 25\n</code></pre> <ul> <li><code>HashMap</code>: Tidak berurutan</li> <li><code>TreeMap</code>: Key otomatis diurutkan</li> <li><code>LinkedHashMap</code>: Urut sesuai input</li> </ul>"},{"location":"lanjutan/collection_framework/#queue-deque","title":"\ud83d\udce6 Queue &amp; Deque","text":"<pre><code>Queue&lt;String&gt; antrian = new LinkedList&lt;&gt;();\nantrian.add(\"User1\");\nantrian.add(\"User2\");\nSystem.out.println(antrian.poll()); // User1 keluar\n</code></pre> <ul> <li>FIFO (first in first out)</li> <li>Bisa dipakai untuk sistem antrean, notifikasi, dll.</li> </ul>"},{"location":"lanjutan/collection_framework/#iterator-for-each","title":"\ud83d\udd01 Iterator &amp; For-Each","text":"<pre><code>for (String nama : daftar) {\n    System.out.println(nama);\n}\n\n// atau pakai Iterator\nIterator&lt;String&gt; itr = daftar.iterator();\nwhile (itr.hasNext()) {\n    System.out.println(itr.next());\n}\n</code></pre>"},{"location":"lanjutan/collection_framework/#synchronized-collection","title":"\ud83d\udca5 Synchronized Collection","text":"<pre><code>List&lt;String&gt; aman = Collections.synchronizedList(new ArrayList&lt;&gt;());\n</code></pre> <p>Untuk koleksi yang thread-safe.</p>"},{"location":"lanjutan/collection_framework/#pilih-struktur-data-yang-tepat","title":"\ud83e\udde0 Pilih Struktur Data yang Tepat","text":"Kasus Gunakan Data berurutan, boleh duplikat <code>ArrayList</code> atau <code>LinkedList</code> Data unik, tidak penting urutan <code>HashSet</code> Data unik &amp; perlu urut <code>TreeSet</code> Peta key \u2192 value <code>HashMap</code> atau <code>TreeMap</code> Antrean proses/data <code>Queue</code> (<code>LinkedList</code>, <code>PriorityQueue</code>)"},{"location":"lanjutan/collection_framework/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"Struktur Ciri Khas List Urutan tetap, boleh duplikasi Set Tidak duplikat, tidak selalu terurut Map Key-value, akses cepat Queue Antrean data, FIFO"},{"location":"lanjutan/expression_custom/","title":"\ud83d\udee0\ufe0f Membangun Ekspresi Kustom di Java","text":"<p>Java bukan bahasa fungsional murni, namun kita tetap bisa membuat ekspresi sendiri yang: - Reusable - Dinamis - Ringkas - Modular</p>"},{"location":"lanjutan/expression_custom/#tujuan","title":"\ud83d\udccc Tujuan","text":"<ul> <li>Menyusun logika sebagai ekspresi, bukan sekadar prosedur</li> <li>Menggunakan lambda atau interface fungsional</li> <li>Mengabstraksi logika kompleks menjadi kode ringkas</li> </ul>"},{"location":"lanjutan/expression_custom/#contoh-1-validasi-data","title":"\ud83e\uddea Contoh 1: Validasi Data","text":"<pre><code>@FunctionalInterface\ninterface Validator&lt;T&gt; {\n    boolean validate(T value);\n}\n\npublic class Demo {\n    public static void main(String[] args) {\n        Validator&lt;String&gt; emailValidator = email -&gt; email.contains(\"@\");\n\n        System.out.println(emailValidator.validate(\"marno@email.com\")); // true\n        System.out.println(emailValidator.validate(\"marno\")); // false\n    }\n}\n````\n\n\u2705 Kita membuat ekspresi `emailValidator` yang bisa digunakan di mana saja.\n\n---\n\n## \ud83e\uddea Contoh 2: Ekspresi Matematika Dinamis\n\n```java\n@FunctionalInterface\ninterface Operation {\n    int apply(int a, int b);\n}\n\npublic class Kalkulator {\n    public static void main(String[] args) {\n        Operation tambah = (a, b) -&gt; a + b;\n        Operation kali = (a, b) -&gt; a * b;\n\n        System.out.println(tambah.apply(5, 3)); // 8\n        System.out.println(kali.apply(4, 7));   // 28\n    }\n}\n</code></pre>"},{"location":"lanjutan/expression_custom/#kombinasi-ekspresi","title":"\ud83d\udd01 Kombinasi Ekspresi","text":"<pre><code>Predicate&lt;String&gt; panjangValid = s -&gt; s.length() &gt; 5;\nPredicate&lt;String&gt; adaAngka = s -&gt; s.matches(\".*\\\\d.*\");\n\nPredicate&lt;String&gt; validPassword = panjangValid.and(adaAngka);\n\nSystem.out.println(validPassword.test(\"hello\"));     // false\nSystem.out.println(validPassword.test(\"hello123\"));  // true\n</code></pre>"},{"location":"lanjutan/expression_custom/#ekspresi-kustom-dengan-class","title":"\ud83d\udd27 Ekspresi Kustom dengan Class","text":"<pre><code>class Ekspresi {\n    public static boolean lebihDari(int a, int batas) {\n        return a &gt; batas;\n    }\n\n    public static boolean antara(int x, int min, int max) {\n        return x &gt;= min &amp;&amp; x &lt;= max;\n    }\n}\n\n// Pemakaian\nSystem.out.println(Ekspresi.lebihDari(10, 5)); // true\nSystem.out.println(Ekspresi.antara(7, 5, 10)); // true\n</code></pre>"},{"location":"lanjutan/expression_custom/#studi-kasus-rule-engine-mini","title":"\ud83d\udca1 Studi Kasus: Rule Engine Mini","text":"<pre><code>interface Rule&lt;T&gt; {\n    boolean apply(T data);\n}\n\nclass RuleEngine {\n    public static &lt;T&gt; boolean jalankan(T data, Rule&lt;T&gt; rule) {\n        return rule.apply(data);\n    }\n}\n\n// Pemakaian\nRule&lt;Integer&gt; isGanjil = n -&gt; n % 2 != 0;\n\nSystem.out.println(RuleEngine.jalankan(7, isGanjil)); // true\n</code></pre>"},{"location":"lanjutan/expression_custom/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"Konsep Penjelasan Custom Expression Membuat logika reusable menggunakan lambda/class Tujuan Menyusun logika sebagai objek atau fungsi Cocok untuk Validasi, kalkulasi, aturan dinamis Fitur yang dipakai Functional interface, lambda, predicate <p>\u27a1\ufe0f Lanjut: interface_functional.md atau lambda_expression.md</p> <p>```</p>"},{"location":"lanjutan/expression_custom/#catatan","title":"\ud83d\udd16 Catatan","text":"<p>Topik ini ideal untuk developer Java modern yang ingin: - Menulis kode ekspresif dan modular - Menyusun rule engine mini, validator dinamis, atau filter data</p> <p>Jika kamu tertarik, kita bisa eksplor lebih lanjut ke: - <code>rule_engine.md</code> (menggunakan strategi pola) - <code>expression_parser.md</code> (buat parser ekspresi dari string)</p>"},{"location":"lanjutan/generics/","title":"\ud83e\uddec Generics dalam Java","text":"<p>Generics memungkinkan kita menulis kode yang bisa bekerja dengan berbagai tipe data tanpa mengorbankan type safety.</p> <p>Tanpa generics: - Banyak cast - Rentan runtime error - Tidak fleksibel</p> <p>Dengan generics: - Lebih aman (cek tipe di compile-time) - Lebih fleksibel (reusable untuk banyak tipe) - Lebih bersih</p>"},{"location":"lanjutan/generics/#motivasi-sebelum-sesudah-generics","title":"\ud83d\udd30 Motivasi: Sebelum &amp; Sesudah Generics","text":"<p>Sebelum: <pre><code>ArrayList list = new ArrayList();\nlist.add(\"Marno\");\nString nama = (String) list.get(0); // perlu cast\n````\n\n**Sesudah:**\n\n```java\nArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();\nlist.add(\"Marno\");\nString nama = list.get(0); // tanpa cast, aman\n</code></pre></p>"},{"location":"lanjutan/generics/#generic-class","title":"\ud83d\udd27 Generic Class","text":"<pre><code>public class Kotak&lt;T&gt; {\n    private T isi;\n\n    public void setIsi(T isi) {\n        this.isi = isi;\n    }\n\n    public T getIsi() {\n        return isi;\n    }\n}\n</code></pre> <p>Penggunaan:</p> <pre><code>Kotak&lt;String&gt; k1 = new Kotak&lt;&gt;();\nk1.setIsi(\"Sawit\");\n\nKotak&lt;Integer&gt; k2 = new Kotak&lt;&gt;();\nk2.setIsi(100);\n</code></pre>"},{"location":"lanjutan/generics/#generic-method","title":"\ud83e\uddea Generic Method","text":"<pre><code>public class Util {\n    public static &lt;T&gt; void tampilkan(T data) {\n        System.out.println(data);\n    }\n}\n</code></pre> <p>Pemanggilan:</p> <pre><code>Util.tampilkan(\"Selamat datang\");\nUtil.tampilkan(123);\n</code></pre>"},{"location":"lanjutan/generics/#multiple-type-parameters","title":"\u2699\ufe0f Multiple Type Parameters","text":"<pre><code>public class Pasangan&lt;K, V&gt; {\n    private K kunci;\n    private V nilai;\n\n    public Pasangan(K k, V v) {\n        this.kunci = k;\n        this.nilai = v;\n    }\n\n    public K getKunci() { return kunci; }\n    public V getNilai() { return nilai; }\n}\n</code></pre> <p>Penggunaan:</p> <pre><code>Pasangan&lt;String, Integer&gt; p = new Pasangan&lt;&gt;(\"Ali\", 50);\nSystem.out.println(p.getKunci() + \" =&gt; \" + p.getNilai());\n</code></pre>"},{"location":"lanjutan/generics/#bounded-type-parameter-extends","title":"\ud83d\udce5 Bounded Type Parameter (<code>extends</code>)","text":"<pre><code>public class Pengolah&lt;T extends Number&gt; {\n    public double duaKali(T nilai) {\n        return nilai.doubleValue() * 2;\n    }\n}\n</code></pre> <p>Pemanggilan:</p> <pre><code>Pengolah&lt;Integer&gt; p = new Pengolah&lt;&gt;();\nSystem.out.println(p.duaKali(5)); // Output: 10.0\n</code></pre>"},{"location":"lanjutan/generics/#wildcard","title":"\ud83d\udcda Wildcard <code>?</code>","text":"Syntax Arti <code>&lt;?&gt;</code> Tipe bebas <code>&lt;? extends T&gt;</code> Turunan dari <code>T</code> (bisa <code>T</code> atau subclass) <code>&lt;? super T&gt;</code> <code>T</code> atau superclass-nya <p>Contoh:</p> <pre><code>public void cetakSemua(List&lt;?&gt; daftar) {\n    for (Object o : daftar) {\n        System.out.println(o);\n    }\n}\n</code></pre>"},{"location":"lanjutan/generics/#studi-kasus-stack-generik","title":"\ud83e\udde0 Studi Kasus: Stack Generik","text":"<pre><code>public class Stack&lt;T&gt; {\n    private ArrayList&lt;T&gt; data = new ArrayList&lt;&gt;();\n\n    public void push(T item) {\n        data.add(item);\n    }\n\n    public T pop() {\n        if (!data.isEmpty()) {\n            return data.remove(data.size() - 1);\n        }\n        return null;\n    }\n\n    public boolean isEmpty() {\n        return data.isEmpty();\n    }\n}\n</code></pre>"},{"location":"lanjutan/generics/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"Konsep Penjelasan <code>&lt;T&gt;</code> Parameter generik <code>Kotak&lt;T&gt;</code> Class generik <code>&lt;T extends A&gt;</code> Membatasi tipe hanya ke subclass dari A <code>&lt;?&gt;</code> Wildcard: tipe bebas Keuntungan Reusable, type-safe, lebih bersih dan modern <p>\u27a1\ufe0f Selanjutnya: Lambda Expression (Fungsi Ringkas)</p>"},{"location":"lanjutan/interface_functional/","title":"\ud83d\udd27 Functional Interface di Java","text":"<p>Functional Interface adalah interface yang hanya memiliki satu method abstrak. Cocok digunakan untuk: - Lambda Expression - Method Reference - Pemrograman fungsional</p>"},{"location":"lanjutan/interface_functional/#ciri-functional-interface","title":"\ud83d\udccc Ciri Functional Interface","text":"<pre><code>@FunctionalInterface\ninterface Pesan {\n    void kirim(String isi);\n}\n````\n\n* Hanya **satu method abstrak**\n* Boleh memiliki method default atau static\n* Anotasi `@FunctionalInterface` **tidak wajib**, tapi dianjurkan (untuk validasi)\n\n---\n\n## \ud83e\udde0 Contoh Sederhana\n\n```java\n@FunctionalInterface\ninterface Hitung {\n    int operasi(int a, int b);\n}\n</code></pre> <p>Pemakaian dengan lambda:</p> <pre><code>Hitung tambah = (a, b) -&gt; a + b;\nSystem.out.println(tambah.operasi(3, 5)); // Output: 8\n</code></pre>"},{"location":"lanjutan/interface_functional/#interface-fungsional-dari-java","title":"\ud83d\udce6 Interface Fungsional dari Java","text":"Interface Method Abstrak Keterangan <code>Runnable</code> <code>run()</code> Tanpa parameter, tanpa return <code>Callable&lt;T&gt;</code> <code>call()</code> Tanpa parameter, return nilai <code>Comparator&lt;T&gt;</code> <code>compare(T o1, T o2)</code> Untuk perbandingan dua objek <code>Consumer&lt;T&gt;</code> <code>accept(T t)</code> Menerima input, tanpa return <code>Supplier&lt;T&gt;</code> <code>get()</code> Tidak menerima input, return nilai <code>Function&lt;T,R&gt;</code> <code>apply(T t)</code> Input \u2192 Output <code>Predicate&lt;T&gt;</code> <code>test(T t)</code> Return boolean (true/false)"},{"location":"lanjutan/interface_functional/#contoh-nyata-filter-data","title":"\ud83d\udd0d Contoh Nyata: Filter Data","text":"<pre><code>List&lt;String&gt; nama = Arrays.asList(\"Ali\", \"Budi\", \"Cici\");\n\nPredicate&lt;String&gt; dimulaiDenganC = n -&gt; n.startsWith(\"C\");\n\nnama.stream()\n    .filter(dimulaiDenganC)\n    .forEach(System.out::println); // Output: Cici\n</code></pre>"},{"location":"lanjutan/interface_functional/#kenapa-functional-interface-penting","title":"\ud83d\udca1 Kenapa Functional Interface Penting?","text":"Alasan Penjelasan Mendukung lambda expression Tanpa harus membuat class tambahan Mendorong kode ringkas dan ekspresif Dekat dengan paradigma fungsional modern Membuat Java tidak terasa kaku Cocok untuk pemrosesan data, event, dsb."},{"location":"lanjutan/interface_functional/#interface-fungsional-kustom","title":"\ud83e\uddea Interface Fungsional Kustom","text":"<pre><code>@FunctionalInterface\ninterface Cetak {\n    void tampil(String isi);\n}\n\npublic class Demo {\n    public static void cetakTeks(Cetak c) {\n        c.tampil(\"Halo dari Java!\");\n    }\n\n    public static void main(String[] args) {\n        cetakTeks(s -&gt; System.out.println(s));\n    }\n}\n</code></pre>"},{"location":"lanjutan/interface_functional/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"Konsep Penjelasan Functional Interface Hanya 1 method abstrak <code>@FunctionalInterface</code> Untuk validasi compiler (tidak wajib) Cocok untuk Lambda, stream, event, callback Contoh built-in <code>Runnable</code>, <code>Predicate</code>, <code>Function</code>, dsb. <p>\u27a1\ufe0f Lanjutkan eksplorasi ke: lambda_expression.md dan stream_api.md</p>"},{"location":"lanjutan/jdbc_mysql/","title":"\ud83d\uddc3\ufe0f Koneksi Java ke MySQL menggunakan JDBC","text":"<p>JDBC (Java Database Connectivity) adalah API resmi Java untuk mengakses database relasional seperti MySQL, PostgreSQL, dll.</p> <p>Dengan JDBC, kamu bisa: - Terhubung ke database - Menjalankan perintah SQL (SELECT, INSERT, UPDATE, DELETE) - Mengambil hasil query - Mengelola transaksi</p>"},{"location":"lanjutan/jdbc_mysql/#persiapan-awal","title":"\ud83d\udd27 Persiapan Awal","text":"<ol> <li>\u2705 Pastikan MySQL aktif di komputer</li> <li>\u2705 Buat database: <code>java_db</code></li> <li>\u2705 Tambahkan file JDBC driver (<code>mysql-connector-j-*.jar</code>) ke project (atau via Maven/Gradle)</li> </ol>"},{"location":"lanjutan/jdbc_mysql/#struktur-tabel-contoh","title":"\ud83d\udce6 Struktur Tabel Contoh","text":"<pre><code>CREATE DATABASE java_db;\n\nUSE java_db;\n\nCREATE TABLE users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    nama VARCHAR(100),\n    email VARCHAR(100)\n);\n````\n\n---\n\n## \ud83d\udd0c Koneksi JDBC: Langkah Dasar\n\n```java\nimport java.sql.*;\n\npublic class Koneksi {\n    public static void main(String[] args) {\n        String url = \"jdbc:mysql://localhost:3306/java_db\";\n        String user = \"root\";\n        String pass = \"\";\n\n        try {\n            Connection conn = DriverManager.getConnection(url, user, pass);\n            System.out.println(\"Berhasil terkoneksi ke database!\");\n            conn.close();\n        } catch (SQLException e) {\n            System.out.println(\"Gagal koneksi: \" + e.getMessage());\n        }\n    }\n}\n</code></pre>"},{"location":"lanjutan/jdbc_mysql/#menjalankan-query-insert","title":"\ud83d\udcc4 Menjalankan Query <code>INSERT</code>","text":"<pre><code>String sql = \"INSERT INTO users (nama, email) VALUES (?, ?)\";\nPreparedStatement ps = conn.prepareStatement(sql);\nps.setString(1, \"Marno\");\nps.setString(2, \"marno@email.com\");\nps.executeUpdate();\n</code></pre>"},{"location":"lanjutan/jdbc_mysql/#menjalankan-query-select","title":"\ud83d\udcc4 Menjalankan Query <code>SELECT</code>","text":"<pre><code>String sql = \"SELECT * FROM users\";\nStatement stmt = conn.createStatement();\nResultSet rs = stmt.executeQuery(sql);\n\nwhile (rs.next()) {\n    System.out.println(rs.getInt(\"id\") + \" | \" +\n                       rs.getString(\"nama\") + \" | \" +\n                       rs.getString(\"email\"));\n}\n</code></pre>"},{"location":"lanjutan/jdbc_mysql/#update-delete","title":"\ud83d\udcc4 Update &amp; Delete","text":"<pre><code>// Update\nString sql = \"UPDATE users SET nama = ? WHERE id = ?\";\nPreparedStatement ps = conn.prepareStatement(sql);\nps.setString(1, \"Marno Update\");\nps.setInt(2, 1);\nps.executeUpdate();\n\n// Delete\nString del = \"DELETE FROM users WHERE id = ?\";\nPreparedStatement delps = conn.prepareStatement(del);\ndelps.setInt(1, 2);\ndelps.executeUpdate();\n</code></pre>"},{"location":"lanjutan/jdbc_mysql/#best-practice-jdbc","title":"\ud83d\udccc Best Practice JDBC","text":"Tips Penjelasan Gunakan <code>PreparedStatement</code> Hindari SQL Injection Tutup koneksi setelah pakai Gunakan <code>try-with-resources</code> bila perlu Tangani <code>SQLException</code> Log semua error dengan detail Pooling koneksi (lanjutan) Gunakan HikariCP/Apache DBCP di sistem besar"},{"location":"lanjutan/jdbc_mysql/#contoh-lengkap","title":"\ud83d\udd01 Contoh Lengkap","text":"<pre><code>public class UserDAO {\n    private Connection conn;\n\n    public UserDAO() throws SQLException {\n        conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/java_db\", \"root\", \"\");\n    }\n\n    public void tambahUser(String nama, String email) throws SQLException {\n        String sql = \"INSERT INTO users (nama, email) VALUES (?, ?)\";\n        PreparedStatement ps = conn.prepareStatement(sql);\n        ps.setString(1, nama);\n        ps.setString(2, email);\n        ps.executeUpdate();\n    }\n\n    public void tampilkanSemua() throws SQLException {\n        String sql = \"SELECT * FROM users\";\n        Statement stmt = conn.createStatement();\n        ResultSet rs = stmt.executeQuery(sql);\n\n        while (rs.next()) {\n            System.out.println(rs.getInt(\"id\") + \": \" + rs.getString(\"nama\"));\n        }\n    }\n}\n</code></pre>"},{"location":"lanjutan/jdbc_mysql/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"Langkah Penjelasan <code>DriverManager</code> Mengelola koneksi ke database <code>Connection</code> Objek utama koneksi <code>Statement</code> / <code>PreparedStatement</code> Menjalankan SQL <code>ResultSet</code> Menampung hasil SELECT Koneksi stabil Tutup koneksi setelah selesai <p>\u27a1\ufe0f Selanjutnya: Collection Framework Lanjutan</p>"},{"location":"lanjutan/lambda_expression/","title":"\ud83d\udd39 Lambda Expression di Java","text":"<p>Lambda Expression adalah cara baru dan ringkas untuk menulis fungsi anonim (tanpa nama) dalam Java. Biasanya digunakan untuk implementasi cepat dari interface fungsional (interface dengan satu method).</p>"},{"location":"lanjutan/lambda_expression/#format-dasar","title":"\ud83d\udd27 Format Dasar","text":"<pre><code>(parameter) -&gt; { body }\n````\n\nContoh:\n\n```java\n(a, b) -&gt; a + b\n() -&gt; System.out.println(\"Halo!\")\n</code></pre>"},{"location":"lanjutan/lambda_expression/#apa-itu-interface-fungsional","title":"\ud83e\udde0 Apa Itu Interface Fungsional?","text":"<p>Interface yang hanya memiliki satu method abstrak. Contoh:</p> <pre><code>@FunctionalInterface\ninterface Sapa {\n    void ucap();\n}\n</code></pre>"},{"location":"lanjutan/lambda_expression/#sebelum-vs-sesudah-lambda","title":"\ud83d\udd04 Sebelum vs Sesudah Lambda","text":"<p>Tanpa Lambda (Anonymous Class):</p> <pre><code>Runnable r = new Runnable() {\n    public void run() {\n        System.out.println(\"Berjalan!\");\n    }\n};\n</code></pre> <p>Dengan Lambda:</p> <pre><code>Runnable r = () -&gt; System.out.println(\"Berjalan!\");\n</code></pre>"},{"location":"lanjutan/lambda_expression/#contoh-lengkap-comparator","title":"\ud83d\udcd8 Contoh Lengkap: Comparator","text":"<pre><code>List&lt;String&gt; nama = Arrays.asList(\"Ali\", \"Marno\", \"Budi\");\n\nCollections.sort(nama, (a, b) -&gt; a.compareTo(b));\n</code></pre>"},{"location":"lanjutan/lambda_expression/#lambda-dengan-interface-kustom","title":"\ud83d\udca1 Lambda dengan Interface Kustom","text":"<pre><code>@FunctionalInterface\ninterface Operasi {\n    int hitung(int a, int b);\n}\n\npublic class Demo {\n    public static void main(String[] args) {\n        Operasi tambah = (a, b) -&gt; a + b;\n        Operasi kali = (a, b) -&gt; a * b;\n\n        System.out.println(tambah.hitung(5, 3)); // 8\n        System.out.println(kali.hitung(5, 3));   // 15\n    }\n}\n</code></pre>"},{"location":"lanjutan/lambda_expression/#lambda-sebagai-parameter","title":"\ud83d\udd04 Lambda sebagai Parameter","text":"<pre><code>public class Kalkulator {\n    public static int hitung(int a, int b, Operasi op) {\n        return op.hitung(a, b);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(hitung(10, 2, (x, y) -&gt; x - y)); // 8\n    }\n}\n</code></pre>"},{"location":"lanjutan/lambda_expression/#lambda-di-java-api-consumer-function-predicate","title":"\ud83d\udd0d Lambda di Java API: <code>Consumer</code>, <code>Function</code>, <code>Predicate</code>","text":"Interface Method Kegunaan <code>Consumer&lt;T&gt;</code> <code>accept(T t)</code> Melakukan aksi tanpa return <code>Function&lt;T,R&gt;</code> <code>apply(T t)</code> Mengubah data (return value) <code>Predicate&lt;T&gt;</code> <code>test(T t)</code> Mengecek kondisi (true/false) <p>Contoh:</p> <pre><code>Consumer&lt;String&gt; cetak = x -&gt; System.out.println(x);\nPredicate&lt;Integer&gt; genap = x -&gt; x % 2 == 0;\nFunction&lt;String, Integer&gt; panjang = s -&gt; s.length();\n</code></pre>"},{"location":"lanjutan/lambda_expression/#lambda-stream-preview","title":"\u2728 Lambda + Stream (Preview)","text":"<pre><code>List&lt;String&gt; nama = Arrays.asList(\"Ali\", \"Budi\", \"Cici\");\n\nnama.stream()\n    .filter(n -&gt; n.startsWith(\"C\"))\n    .forEach(n -&gt; System.out.println(n));\n</code></pre>"},{"location":"lanjutan/lambda_expression/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"Konsep Penjelasan Lambda Fungsi anonim (tanpa class atau method eksplisit) Functional Interface Hanya satu method abstrak Keunggulan Ringkas, efisien, ideal untuk pemrosesan koleksi <p>\u27a1\ufe0f Selanjutnya: Stream API (Pemrosesan Data Modern)</p>"},{"location":"lanjutan/multithreading/","title":"\ud83e\uddf5 Multithreading di Java","text":"<p>Multithreading adalah teknik untuk menjalankan banyak alur (thread) dalam satu program secara simultan/paralel.</p> <p>Setiap thread berjalan secara mandiri dan bisa dikelola bersama \u2014 sangat berguna untuk: - Aplikasi real-time - Proses background (ex: loading, sync) - Responsif UI (di Android / Swing) - Server concurrency (web, API)</p>"},{"location":"lanjutan/multithreading/#dua-cara-membuat-thread","title":"\ud83d\udccc Dua Cara Membuat Thread","text":""},{"location":"lanjutan/multithreading/#1-extend-thread-class","title":"1. Extend <code>Thread</code> Class","text":"<pre><code>public class Tugas extends Thread {\n    public void run() {\n        System.out.println(\"Thread berjalan: \" + getName());\n    }\n\n    public static void main(String[] args) {\n        Tugas t = new Tugas();\n        t.start(); // BUKAN t.run()\n    }\n}\n````\n\n---\n\n### 2. Implement `Runnable` Interface\n\n```java\npublic class Tugas implements Runnable {\n    public void run() {\n        System.out.println(\"Tugas dijalankan oleh: \" + Thread.currentThread().getName());\n    }\n\n    public static void main(String[] args) {\n        Thread t = new Thread(new Tugas());\n        t.start();\n    }\n}\n</code></pre>"},{"location":"lanjutan/multithreading/#perbedaan-start-vs-run","title":"\ud83d\udd01 Perbedaan <code>start()</code> vs <code>run()</code>","text":"Metode Apa yang Terjadi <code>start()</code> Membuat thread baru, lalu menjalankan <code>run()</code> di dalamnya <code>run()</code> Menjalankan method biasa, tanpa thread baru"},{"location":"lanjutan/multithreading/#contoh-loop-multithread","title":"\ud83e\uddea Contoh: Loop Multithread","text":"<pre><code>class CetakAngka implements Runnable {\n    public void run() {\n        for (int i = 1; i &lt;= 5; i++) {\n            System.out.println(Thread.currentThread().getName() + \": \" + i);\n        }\n    }\n\n    public static void main(String[] args) {\n        Thread t1 = new Thread(new CetakAngka(), \"Thread A\");\n        Thread t2 = new Thread(new CetakAngka(), \"Thread B\");\n\n        t1.start();\n        t2.start();\n    }\n}\n</code></pre>"},{"location":"lanjutan/multithreading/#sleep-dan-delay","title":"\u23f1\ufe0f Sleep dan Delay","text":"<pre><code>public class DelayDemo {\n    public static void main(String[] args) throws InterruptedException {\n        System.out.println(\"Mulai...\");\n        Thread.sleep(2000); // delay 2 detik\n        System.out.println(\"Selesai setelah delay\");\n    }\n}\n</code></pre>"},{"location":"lanjutan/multithreading/#prioritas-thread","title":"\ud83c\udfaf Prioritas Thread","text":"<pre><code>Thread t = new Thread(...);\nt.setPriority(Thread.MAX_PRIORITY); // atau MIN_PRIORITY / NORM_PRIORITY\n</code></pre>"},{"location":"lanjutan/multithreading/#interupsi-thread","title":"\u26d4 Interupsi Thread","text":"<pre><code>public class InterupsiDemo {\n    public static void main(String[] args) {\n        Thread t = new Thread(() -&gt; {\n            while (!Thread.currentThread().isInterrupted()) {\n                System.out.println(\"Berjalan...\");\n            }\n        });\n        t.start();\n        t.interrupt(); // mengirim sinyal interupsi\n    }\n}\n</code></pre>"},{"location":"lanjutan/multithreading/#tantangan-multithreading","title":"\u26a0\ufe0f Tantangan Multithreading","text":"<ul> <li>Race condition \u2192 dua thread menulis/membaca data bersamaan</li> <li>Deadlock \u2192 dua thread saling menunggu kunci</li> <li>Thread safety \u2192 pastikan akses ke resource dibatasi</li> </ul> <p>Solusinya: Gunakan <code>synchronized</code>, <code>Lock</code>, atau struktur data <code>Concurrent</code></p>"},{"location":"lanjutan/multithreading/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"Konsep Penjelasan Thread Jalur eksekusi paralel dalam satu program <code>run()</code> Method yang dijalankan oleh thread <code>start()</code> Memulai thread <code>Runnable</code> Interface untuk membuat thread fleksibel <code>sleep(ms)</code> Memberi delay sementara Bahaya Umum Race condition, deadlock, thread-safe <p>\u27a1\ufe0f Selanjutnya: Sinkronisasi Thread (synchronized)</p>"},{"location":"lanjutan/networking/","title":"\ud83c\udf10 Networking di Java (Client-Server via Socket)","text":"<p>Java mendukung pemrograman jaringan menggunakan <code>java.net</code>, termasuk: - Membuat koneksi TCP (client-server) - Komunikasi antar proses via Socket - Transfer data melalui stream</p>"},{"location":"lanjutan/networking/#konsep-dasar","title":"\ud83d\udcda Konsep Dasar","text":"Komponen Fungsi <code>ServerSocket</code> Mewakili server yang menunggu koneksi <code>Socket</code> Koneksi antara client dan server <code>InputStream</code> / <code>OutputStream</code> Mengirim dan menerima data via jaringan"},{"location":"lanjutan/networking/#membuat-server-tcp","title":"\ud83d\udda5\ufe0f Membuat Server TCP","text":"<pre><code>import java.io.*;\nimport java.net.*;\n\npublic class Server {\n    public static void main(String[] args) throws IOException {\n        ServerSocket server = new ServerSocket(1234);\n        System.out.println(\"Menunggu koneksi...\");\n\n        Socket client = server.accept();\n        System.out.println(\"Client terhubung!\");\n\n        BufferedReader input = new BufferedReader(new InputStreamReader(client.getInputStream()));\n        PrintWriter output = new PrintWriter(client.getOutputStream(), true);\n\n        String pesan = input.readLine();\n        System.out.println(\"Pesan dari client: \" + pesan);\n\n        output.println(\"Halo juga dari server!\");\n\n        client.close();\n        server.close();\n    }\n}\n````\n\n---\n\n## \ud83d\udcf1 Membuat Client TCP\n\n```java\nimport java.io.*;\nimport java.net.*;\n\npublic class Client {\n    public static void main(String[] args) throws IOException {\n        Socket socket = new Socket(\"localhost\", 1234);\n\n        BufferedReader input = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n        PrintWriter output = new PrintWriter(socket.getOutputStream(), true);\n\n        output.println(\"Hai server, saya client!\");\n        String balasan = input.readLine();\n        System.out.println(\"Dari server: \" + balasan);\n\n        socket.close();\n    }\n}\n</code></pre>"},{"location":"lanjutan/networking/#uji-program","title":"\ud83e\uddea Uji Program","text":"<ol> <li>Jalankan <code>Server.java</code> terlebih dahulu</li> <li>Jalankan <code>Client.java</code></li> <li>Perhatikan komunikasi antar dua program</li> </ol>"},{"location":"lanjutan/networking/#komunikasi-dua-arah-loop","title":"\ud83d\udd01 Komunikasi Dua Arah (Loop)","text":"<p>Tambahkan loop agar komunikasi bisa dilakukan berulang:</p> <pre><code>while (true) {\n    String pesan = input.readLine();\n    if (pesan.equalsIgnoreCase(\"exit\")) break;\n    output.println(\"Server balas: \" + pesan);\n}\n</code></pre>"},{"location":"lanjutan/networking/#tips-best-practice","title":"\ud83d\udea8 Tips &amp; Best Practice","text":"Saran Penjelasan Gunakan <code>try-with-resources</code> Untuk otomatis menutup koneksi/socket Tangani Exception dengan benar Gunakan <code>try-catch</code> agar tidak crash Gunakan multithreading Agar server bisa layani banyak client sekaligus Gunakan port &gt; 1024 Hindari port sistem (0\u20131023) tanpa izin admin"},{"location":"lanjutan/networking/#server-multithread-bonus","title":"\ud83e\uddf5 Server Multithread (Bonus)","text":"<pre><code>new Thread(() -&gt; {\n    try {\n        Socket client = server.accept();\n        // handle client di thread ini\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}).start();\n</code></pre>"},{"location":"lanjutan/networking/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"Konsep Penjelasan <code>ServerSocket</code> Menunggu koneksi client <code>Socket</code> Koneksi TCP aktif antara dua pihak <code>Input/OutputStream</code> Untuk mengirim/menerima data Threading Diperlukan untuk menangani banyak client <p>\u27a1\ufe0f Selanjutnya: Koneksi Database MySQL dengan JDBC</p>"},{"location":"lanjutan/overview/","title":"\ud83e\udded Java Tingkat Lanjutan: Roadmap &amp; Overview","text":"<p>Setelah memahami dasar-dasar dan konsep OOP di Java, saatnya melangkah ke level yang lebih dalam dan lebih luas. Java bukan hanya tentang class dan method \u2014 melainkan juga bagaimana kita membangun sistem yang fleksibel, efisien, dan scalable.</p>"},{"location":"lanjutan/overview/#apa-yang-akan-dipelajari","title":"\ud83d\udccc Apa yang Akan Dipelajari?","text":"Topik Deskripsi Singkat Generics Penulisan class dan method yang fleksibel untuk berbagai tipe data Lambda Expression Cara ringkas menulis kode fungsional menggunakan Java 8+ Stream API Pemrosesan data koleksi secara deklaratif &amp; efisien Multithreading Menjalankan banyak tugas secara paralel Synchronized Mengamankan data dalam lingkungan multi-thread Networking Komunikasi antara komputer (client-server) JDBC &amp; MySQL Koneksi dan manipulasi database langsung dari kode Java Collection Framework Lanjutan Struktur data profesional seperti <code>HashSet</code>, <code>TreeMap</code> Interface Fungsional Interface yang digunakan dalam lambda dan fungsional programming"},{"location":"lanjutan/overview/#mengapa-ini-penting","title":"\ud83d\udd0d Mengapa Ini Penting?","text":"<ul> <li>Generics membuat kode reusable tanpa kehilangan type safety</li> <li>Lambda &amp; Stream membuat penulisan logika koleksi lebih ringkas &amp; ekspresif</li> <li>Multithreading membantu program melakukan banyak hal sekaligus (tanpa delay)</li> <li>Networking &amp; JDBC menjembatani Java dengan dunia luar (API, DB, dll)</li> </ul>"},{"location":"lanjutan/overview/#prasyarat","title":"\ud83e\udde0 Prasyarat","text":"<p>Sebelum masuk bagian ini, kamu sebaiknya sudah menguasai:</p> <p>\u2705 Struktur dasar program Java \u2705 OOP: class, inheritance, polymorphism \u2705 Penggunaan collection seperti ArrayList &amp; HashMap \u2705 Penggunaan exception dan file I/O  </p>"},{"location":"lanjutan/overview/#alur-belajar-yang-disarankan","title":"\ud83d\uddfa\ufe0f Alur Belajar yang Disarankan","text":"<ol> <li>Generics \u2014 belajar generalisasi tipe data</li> <li>Lambda Expression \u2014 ringkas &amp; modern</li> <li>Stream API \u2014 pengolahan data ala Java 8</li> <li>Multithreading \u2014 concurrency dan paralelisme</li> <li>Synchronized \u2014 kendali keamanan di thread</li> <li>Networking \u2014 dasar komunikasi TCP/IP</li> <li>JDBC &amp; MySQL \u2014 koneksi database dari Java</li> <li>Interface Fungsional \u2014 dukungan OOP &amp; FP</li> <li>Struktur Data Lanjutan \u2014 untuk proyek nyata &amp; skala besar</li> </ol>"},{"location":"lanjutan/overview/#tujuan-akhir","title":"\ud83d\ude80 Tujuan Akhir","text":"<p>Setelah menyelesaikan bagian ini, kamu akan mampu membangun: - Aplikasi multithreaded - Program client-server sederhana - Sistem berbasis database - Program modular, efisien, dan siap dipakai di industri</p> <p>\u27a1\ufe0f Selanjutnya: Generics (Class &amp; Method Generik)</p>"},{"location":"lanjutan/stream_api/","title":"\ud83c\udf0a Stream API di Java","text":"<p>Stream API diperkenalkan di Java 8 untuk memproses koleksi data seperti <code>List</code>, <code>Set</code>, dll., dengan cara yang:</p> <p>\u2705 Lebih deklaratif \u2705 Lebih efisien \u2705 Lebih readable  </p> <p>Think: <code>data.stream().filter().map().collect()</code> \ud83c\udfaf</p>"},{"location":"lanjutan/stream_api/#cara-membuat-stream","title":"\ud83d\udd27 Cara Membuat Stream","text":"<pre><code>List&lt;String&gt; nama = Arrays.asList(\"Ali\", \"Budi\", \"Cici\");\nStream&lt;String&gt; stream = nama.stream();\n````\n\n---\n\n## \ud83d\ude80 Operasi Stream\n\n| Jenis        | Operasi                                 | Contoh                            |\n| ------------ | --------------------------------------- | --------------------------------- |\n| Intermediate | `filter`, `map`, `sorted`               | Mengubah atau menyaring data      |\n| Terminal     | `forEach`, `collect`, `count`, `reduce` | Mengakhiri dan menghasilkan hasil |\n\n---\n\n## \ud83c\udfaf Contoh: Filter Nama\n\n```java\nList&lt;String&gt; nama = Arrays.asList(\"Ali\", \"Budi\", \"Cici\");\n\nnama.stream()\n    .filter(n -&gt; n.startsWith(\"C\"))\n    .forEach(System.out::println);\n// Output: Cici\n</code></pre>"},{"location":"lanjutan/stream_api/#map-mengubah-isi-koleksi","title":"\ud83d\udd04 <code>map()</code>: Mengubah Isi Koleksi","text":"<pre><code>List&lt;String&gt; nama = Arrays.asList(\"Ali\", \"Budi\", \"Cici\");\n\nList&lt;String&gt; hurufBesar = nama.stream()\n    .map(String::toUpperCase)\n    .collect(Collectors.toList());\n\nSystem.out.println(hurufBesar); // [ALI, BUDI, CICI]\n</code></pre>"},{"location":"lanjutan/stream_api/#collect-mengubah-stream-jadi-koleksi","title":"\ud83d\udce6 <code>collect()</code>: Mengubah Stream Jadi Koleksi","text":"<pre><code>List&lt;Integer&gt; angka = Arrays.asList(1, 2, 3, 4);\n\nList&lt;Integer&gt; genap = angka.stream()\n    .filter(n -&gt; n % 2 == 0)\n    .collect(Collectors.toList());\n\nSystem.out.println(genap); // [2, 4]\n</code></pre>"},{"location":"lanjutan/stream_api/#count-menghitung-jumlah-elemen","title":"\ud83d\udd22 <code>count()</code>: Menghitung Jumlah Elemen","text":"<pre><code>long jumlah = nama.stream().count();\n</code></pre>"},{"location":"lanjutan/stream_api/#sorted-mengurutkan-elemen","title":"\ud83d\udd01 <code>sorted()</code>: Mengurutkan Elemen","text":"<pre><code>List&lt;String&gt; urut = nama.stream()\n    .sorted()\n    .collect(Collectors.toList());\n\nSystem.out.println(urut); // [Ali, Budi, Cici]\n</code></pre>"},{"location":"lanjutan/stream_api/#findfirst-dan-anymatch","title":"\ud83d\udd0d <code>findFirst()</code> dan <code>anyMatch()</code>","text":"<pre><code>Optional&lt;String&gt; pertama = nama.stream().findFirst();\nboolean adaC = nama.stream().anyMatch(n -&gt; n.startsWith(\"C\"));\n</code></pre>"},{"location":"lanjutan/stream_api/#reduce-menggabungkan-elemen","title":"\ud83d\udd02 <code>reduce()</code>: Menggabungkan Elemen","text":"<pre><code>int total = Arrays.asList(1, 2, 3, 4).stream()\n    .reduce(0, (a, b) -&gt; a + b);\n\nSystem.out.println(total); // 10\n</code></pre>"},{"location":"lanjutan/stream_api/#studi-kasus-gaji-pekerja","title":"\ud83d\udccc Studi Kasus: Gaji Pekerja","text":"<pre><code>class Pekerja {\n    String nama;\n    double gaji;\n\n    public Pekerja(String nama, double gaji) {\n        this.nama = nama;\n        this.gaji = gaji;\n    }\n\n    public double getGaji() { return gaji; }\n    public String getNama() { return nama; }\n}\n</code></pre> <pre><code>List&lt;Pekerja&gt; data = Arrays.asList(\n    new Pekerja(\"Ali\", 1500),\n    new Pekerja(\"Budi\", 1800),\n    new Pekerja(\"Cici\", 2000)\n);\n\ndouble total = data.stream()\n    .mapToDouble(Pekerja::getGaji)\n    .sum();\n\nSystem.out.println(\"Total gaji: \" + total);\n</code></pre>"},{"location":"lanjutan/stream_api/#catatan","title":"\u26a0\ufe0f Catatan","text":"<ul> <li>Stream sekali pakai</li> <li>Tidak mengubah data asli (immutable)</li> <li>Bisa digabung dengan lambda, method reference, dan generics</li> </ul>"},{"location":"lanjutan/stream_api/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"Operasi Fungsi <code>filter()</code> Menyaring data <code>map()</code> Mengubah data <code>sorted()</code> Mengurutkan <code>collect()</code> Menghasilkan koleksi baru <code>reduce()</code> Menggabungkan ke satu nilai <code>forEach()</code> Iterasi akhir <p>\u27a1\ufe0f Selanjutnya: Multithreading (Thread &amp; Runnable)</p>"},{"location":"lanjutan/synchronized/","title":"\ud83e\uddf7 Sinkronisasi dengan <code>synchronized</code> di Java","text":"<p>Ketika beberapa thread mengakses data atau resource yang sama, risiko konflik seperti race condition bisa terjadi. Untuk mencegahnya, Java menyediakan keyword <code>synchronized</code> \u2014 seperti lampu merah bagi thread \ud83d\udea6</p>"},{"location":"lanjutan/synchronized/#masalah-tanpa-sinkronisasi","title":"\ud83d\udd25 Masalah Tanpa Sinkronisasi","text":"<pre><code>public class Counter implements Runnable {\n    private int hitung = 0;\n\n    public void tambah() {\n        hitung++;\n    }\n\n    public void run() {\n        for (int i = 0; i &lt; 1000; i++) tambah();\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        Counter c = new Counter();\n        Thread t1 = new Thread(c);\n        Thread t2 = new Thread(c);\n\n        t1.start(); t2.start();\n        t1.join(); t2.join();\n\n        System.out.println(\"Total: \" + c.hitung); // hasil bisa acak!\n    }\n}\n````\n\n---\n\n## \u2705 Solusi: Gunakan `synchronized`\n\n### \ud83d\udd12 Pada Method\n\n```java\npublic synchronized void tambah() {\n    hitung++;\n}\n</code></pre>"},{"location":"lanjutan/synchronized/#pada-blok","title":"\ud83d\udd12 Pada Blok","text":"<pre><code>public void tambah() {\n    synchronized (this) {\n        hitung++;\n    }\n}\n</code></pre>"},{"location":"lanjutan/synchronized/#synchronized-static","title":"\ud83d\udcd8 synchronized Static","text":"<p>Jika method static, maka kunci berlaku untuk class, bukan objek.</p> <pre><code>public static synchronized void tulis() {\n    // hanya 1 thread bisa akses method ini di seluruh JVM\n}\n</code></pre>"},{"location":"lanjutan/synchronized/#contoh-atm-simulasi","title":"\ud83d\udca1 Contoh: ATM Simulasi","text":"<pre><code>class ATM {\n    private int saldo = 1000;\n\n    public synchronized void tarik(int jumlah) {\n        if (saldo &gt;= jumlah) {\n            System.out.println(Thread.currentThread().getName() + \" menarik \" + jumlah);\n            saldo -= jumlah;\n            System.out.println(\"Sisa saldo: \" + saldo);\n        } else {\n            System.out.println(\"Saldo tidak cukup untuk \" + Thread.currentThread().getName());\n        }\n    }\n}\n</code></pre>"},{"location":"lanjutan/synchronized/#synchronized-vs-lock","title":"\ud83d\udd0d synchronized vs Lock","text":"Fitur <code>synchronized</code> <code>Lock</code> (java.util.concurrent.locks) Syntax Mudah &amp; ringkas Lebih fleksibel Fitur lanjutan Tidak tersedia <code>tryLock</code>, <code>interruptible</code>, dll Performance Kadang kurang efisien Lebih optimal di sistem kompleks <p>Gunakan <code>ReentrantLock</code> jika butuh kontrol lebih dalam.</p>"},{"location":"lanjutan/synchronized/#best-practice","title":"\u26a0\ufe0f Best Practice","text":"<ul> <li>Gunakan <code>synchronized</code> hanya pada bagian kritis (yang akses resource bersama)</li> <li>Jangan menyinkronkan terlalu luas (bisa menyebabkan deadlock)</li> <li>Hindari nested <code>synchronized</code> kecuali benar-benar dibutuhkan</li> <li>Gunakan <code>volatile</code> untuk variable yang dibaca banyak thread tanpa sync</li> </ul>"},{"location":"lanjutan/synchronized/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"Konsep Penjelasan <code>synchronized</code> Kunci eksklusif agar hanya 1 thread yang akses blok data <code>synchronized</code> method Otomatis mengunci objek (atau class jika static) Blok sinkron Bisa hanya pada bagian kritis saja Tujuan utama Mencegah race condition &amp; data inkonsisten <p>\u27a1\ufe0f Selanjutnya: Networking (Socket Programming)</p>"},{"location":"menengah/array_list/","title":"\ud83e\uddee Array &amp; ArrayList dalam Java","text":"<p>Saat kamu ingin menyimpan banyak data sekaligus, gunakan Array atau ArrayList. Keduanya menyimpan data secara berurutan, namun punya perbedaan besar dari sisi fleksibilitas.</p>"},{"location":"menengah/array_list/#1-array-ukuran-tetap","title":"1\ufe0f\u20e3 Array: Ukuran Tetap","text":"<p>Deklarasi array: <pre><code>int[] angka = new int[3]; // [0, 0, 0]\nangka[0] = 10;\nangka[1] = 20;\nangka[2] = 30;\n````\n\n### Deklarasi langsung:\n\n```java\nString[] nama = {\"Ali\", \"Budi\", \"Cici\"};\n</code></pre></p>"},{"location":"menengah/array_list/#iterasi","title":"Iterasi:","text":"<pre><code>for (int i = 0; i &lt; angka.length; i++) {\n    System.out.println(angka[i]);\n}\n\nfor (String n : nama) {\n    System.out.println(n);\n}\n</code></pre>"},{"location":"menengah/array_list/#keterbatasan-array","title":"\u26a0\ufe0f Keterbatasan Array","text":"<ul> <li>Ukuran tetap, tidak bisa diubah setelah dibuat</li> <li>Tidak punya method tambahan seperti tambah/hapus data</li> </ul>"},{"location":"menengah/array_list/#2-arraylist-ukuran-fleksibel","title":"2\ufe0f\u20e3 ArrayList: Ukuran Fleksibel","text":"<p>Import dulu:</p> <pre><code>import java.util.ArrayList;\n</code></pre>"},{"location":"menengah/array_list/#deklarasi","title":"Deklarasi:","text":"<pre><code>ArrayList&lt;String&gt; buah = new ArrayList&lt;&gt;();\nbuah.add(\"Mangga\");\nbuah.add(\"Durian\");\nbuah.add(\"Kelapa\");\n</code></pre>"},{"location":"menengah/array_list/#method-penting-arraylist","title":"\ud83d\udd04 Method Penting ArrayList","text":"Method Keterangan <code>add(item)</code> Tambah item <code>get(index)</code> Ambil item <code>set(index, item)</code> Ubah item <code>remove(index)</code> Hapus item <code>size()</code> Jumlah elemen <code>clear()</code> Kosongkan semua isi <code>contains(item)</code> Cek apakah item ada"},{"location":"menengah/array_list/#contoh","title":"Contoh:","text":"<pre><code>ArrayList&lt;String&gt; tim = new ArrayList&lt;&gt;();\ntim.add(\"Mandor\");\ntim.add(\"Pemotong\");\ntim.add(\"Penyusun\");\n\nfor (String t : tim) {\n    System.out.println(t);\n}\n</code></pre>"},{"location":"menengah/array_list/#perbandingan-array-vs-arraylist","title":"\u2696\ufe0f Perbandingan Array vs ArrayList","text":"Fitur Array ArrayList Ukuran Tetap Dinamis Type data Bisa primitif Hanya objek/class Import Tidak perlu Perlu (<code>java.util</code>) Method bantu Tidak banyak Banyak (<code>add</code>, <code>remove</code>, dll)"},{"location":"menengah/array_list/#konversi-antara-array-dan-arraylist","title":"\ud83d\udd01 Konversi Antara Array dan ArrayList","text":""},{"location":"menengah/array_list/#array-arraylist","title":"Array \u2192 ArrayList","text":"<pre><code>String[] data = {\"A\", \"B\", \"C\"};\nArrayList&lt;String&gt; list = new ArrayList&lt;&gt;(Arrays.asList(data));\n</code></pre>"},{"location":"menengah/array_list/#arraylist-array","title":"ArrayList \u2192 Array","text":"<pre><code>String[] arrayBaru = list.toArray(new String[0]);\n</code></pre>"},{"location":"menengah/array_list/#studi-kasus-simpan-nama-pekerja","title":"\ud83e\uddea Studi Kasus: Simpan Nama Pekerja","text":"<pre><code>ArrayList&lt;String&gt; pekerja = new ArrayList&lt;&gt;();\npekerja.add(\"Ali\");\npekerja.add(\"Budi\");\npekerja.add(\"Cici\");\n\nfor (int i = 0; i &lt; pekerja.size(); i++) {\n    System.out.println(\"Pekerja \" + (i+1) + \": \" + pekerja.get(i));\n}\n</code></pre>"},{"location":"menengah/array_list/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"Konsep Penjelasan Array Struktur data statis, efisien, tapi kurang fleksibel ArrayList Struktur data dinamis, cocok untuk data harian Gunakan ArrayList untuk kebanyakan kasus dalam aplikasi <p>\u27a1\ufe0f Selanjutnya: HashMap dan Struktur Data Key-Value</p>"},{"location":"menengah/enum/","title":"\ud83c\udf96\ufe0f Enum (Enumerasi) dalam Java","text":"<p>Enum (singkatan dari enumeration) adalah tipe data khusus di Java yang memungkinkan kita menyimpan sekumpulan nilai tetap (konstanta) dalam satu blok.</p> <p>Sederhananya:</p> <p><code>enum</code> = sekumpulan <code>final static</code> value yang dikemas rapi</p>"},{"location":"menengah/enum/#contoh-penggunaan-enum","title":"\ud83d\udd27 Contoh Penggunaan Enum","text":"<pre><code>public enum Role {\n    ADMIN,\n    MANDOR,\n    PEKERJA\n}\n````\n\nCara menggunakannya:\n\n```java\npublic class User {\n    Role role;\n\n    public User(Role role) {\n        this.role = role;\n    }\n\n    public void printRole() {\n        System.out.println(\"Peran: \" + role);\n    }\n\n    public static void main(String[] args) {\n        User u = new User(Role.MANDOR);\n        u.printRole(); // Output: Peran: MANDOR\n    }\n}\n</code></pre>"},{"location":"menengah/enum/#kelebihan-enum","title":"\ud83d\udccb Kelebihan Enum","text":"<ul> <li>Nilai enum tidak bisa berubah (konstanta)</li> <li>Kode jadi lebih aman, tidak rawan typo</li> <li>Bisa digunakan dalam switch-case</li> <li>Enum di Java adalah class khusus, bisa punya method &amp; constructor</li> </ul>"},{"location":"menengah/enum/#enum-dalam-switch","title":"\ud83c\udfaf Enum dalam <code>switch</code>","text":"<pre><code>public class ContohSwitch {\n    public static void main(String[] args) {\n        Role role = Role.PEKERJA;\n\n        switch (role) {\n            case ADMIN:\n                System.out.println(\"Akses penuh\");\n                break;\n            case MANDOR:\n                System.out.println(\"Akses manajemen tim\");\n                break;\n            case PEKERJA:\n                System.out.println(\"Akses lihat data pribadi\");\n                break;\n        }\n    }\n}\n</code></pre>"},{"location":"menengah/enum/#enum-dengan-constructor-method","title":"\ud83e\udde0 Enum dengan Constructor &amp; Method","text":"<pre><code>public enum Grade {\n    PEMOTONG(0.4),\n    PENYUSUN(0.35),\n    PENGUTIP(0.25);\n\n    private final double persentase;\n\n    Grade(double persentase) {\n        this.persentase = persentase;\n    }\n\n    public double getPersentase() {\n        return persentase;\n    }\n}\n</code></pre> <p>Penggunaan:</p> <pre><code>System.out.println(\"Pemotong: \" + Grade.PEMOTONG.getPersentase());\n// Output: Pemotong: 0.4\n</code></pre>"},{"location":"menengah/enum/#best-practice-enum","title":"\ud83d\udccc Best Practice Enum","text":"<ul> <li>Gunakan enum untuk data tetap &amp; terbatas</li> <li>Enum membuat kode lebih bersih, aman, dan terstruktur</li> <li>Cocok untuk: status, kategori, role, jenis pekerjaan, level prioritas, dll</li> </ul>"},{"location":"menengah/enum/#studi-kasus-status-panen","title":"\ud83e\uddea Studi Kasus: Status Panen","text":"<pre><code>public enum StatusPanen {\n    TERJADWAL,\n    SELESAI,\n    DITUNDA\n}\n</code></pre> <pre><code>public class Panen {\n    StatusPanen status;\n\n    public Panen(StatusPanen status) {\n        this.status = status;\n    }\n\n    public void cekStatus() {\n        switch (status) {\n            case TERJADWAL:\n                System.out.println(\"Panen akan dilakukan sesuai jadwal.\");\n                break;\n            case SELESAI:\n                System.out.println(\"Panen telah selesai.\");\n                break;\n            case DITUNDA:\n                System.out.println(\"Panen ditunda karena cuaca.\");\n                break;\n        }\n    }\n}\n</code></pre>"},{"location":"menengah/enum/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"Konsep Penjelasan <code>enum</code> Tipe data untuk kumpulan nilai tetap Gunanya Menghindari hardcode string/int dalam logic Bisa Digunakan dalam switch, punya method &amp; constructor <p>\u27a1\ufe0f Selanjutnya: Inner Class (Class dalam Class)</p>"},{"location":"menengah/exception_handling/","title":"\ud83d\uded1 Exception Handling (Penanganan Error) dalam Java","text":"<p>Tidak semua program berjalan mulus. Error bisa terjadi karena: - Input tidak valid - File tidak ditemukan - Pembagian oleh nol - Koneksi gagal - Dan lainnya...</p> <p>Untuk itulah Java menyediakan mekanisme exception handling agar error bisa ditangani dengan elegan \u2014 bukan bikin program langsung crash.</p>"},{"location":"menengah/exception_handling/#apa-itu-exception","title":"\ud83e\udde0 Apa Itu Exception?","text":"<p>Exception adalah kondisi tidak normal yang terjadi saat program berjalan (runtime error), dan bisa ditangkap serta ditangani.</p> <p>Contoh: <pre><code>int a = 5 / 0; // ArithmeticException\n````\n\n---\n\n## \ud83e\uddf1 Struktur Dasar try-catch\n\n```java\ntry {\n    // kode yang berpotensi error\n} catch (ExceptionTipe e) {\n    // penanganan error\n}\n</code></pre></p> <p>Contoh:</p> <pre><code>public class Demo {\n    public static void main(String[] args) {\n        try {\n            int a = 5 / 0;\n        } catch (ArithmeticException e) {\n            System.out.println(\"Terjadi kesalahan: \" + e.getMessage());\n        }\n    }\n}\n</code></pre> <p>\ud83d\udca1 Output:</p> <pre><code>Terjadi kesalahan: / by zero\n</code></pre>"},{"location":"menengah/exception_handling/#blok-finally","title":"\ud83d\udd01 Blok finally","text":"<p><code>finally</code> akan selalu dieksekusi, baik ada exception maupun tidak. Cocok untuk:</p> <ul> <li>Menutup file</li> <li>Melepas koneksi</li> <li>Membersihkan resource</li> </ul> <pre><code>try {\n    int[] data = {1, 2};\n    System.out.println(data[5]);\n} catch (ArrayIndexOutOfBoundsException e) {\n    System.out.println(\"Index error!\");\n} finally {\n    System.out.println(\"Selesai.\");\n}\n</code></pre>"},{"location":"menengah/exception_handling/#multiple-catch","title":"\ud83c\udfaf Multiple Catch","text":"<p>Menangkap lebih dari satu tipe exception:</p> <pre><code>try {\n    String s = null;\n    System.out.println(s.length());\n} catch (ArithmeticException e) {\n    System.out.println(\"Error matematika\");\n} catch (NullPointerException e) {\n    System.out.println(\"Null error\");\n}\n</code></pre>"},{"location":"menengah/exception_handling/#menggunakan-throw","title":"\ud83c\udfaf Menggunakan <code>throw</code>","text":"<p>Digunakan untuk melempar exception secara manual:</p> <pre><code>throw new IllegalArgumentException(\"Umur tidak boleh negatif\");\n</code></pre>"},{"location":"menengah/exception_handling/#menggunakan-throws","title":"\ud83c\udfaf Menggunakan <code>throws</code>","text":"<p>Digunakan untuk mendeklarasikan bahwa method bisa melempar exception:</p> <pre><code>void bacaFile() throws IOException {\n    FileReader fr = new FileReader(\"data.txt\");\n}\n</code></pre>"},{"location":"menengah/exception_handling/#hierarki-exception-java","title":"\ud83d\udcda Hierarki Exception Java","text":"<pre><code>Throwable\n\u251c\u2500\u2500 Error (tidak perlu ditangani)\n\u2514\u2500\u2500 Exception\n    \u251c\u2500\u2500 CheckedException  (harus ditangani)\n    \u2514\u2500\u2500 UncheckedException (boleh ditangani)\n</code></pre> Jenis Contoh Harus ditangani? CheckedException IOException, SQLException \u2705 Ya UncheckedException NullPointerException, ArithmeticException \u274c Opsional"},{"location":"menengah/exception_handling/#studi-kasus-validasi-umur","title":"\ud83e\uddea Studi Kasus: Validasi Umur","text":"<pre><code>class Mahasiswa {\n    void setUmur(int umur) {\n        if (umur &lt; 0) {\n            throw new IllegalArgumentException(\"Umur tidak boleh negatif\");\n        }\n        System.out.println(\"Umur: \" + umur);\n    }\n}\n</code></pre>"},{"location":"menengah/exception_handling/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"Konsep Penjelasan try-catch Menangkap dan menangani error finally Eksekusi wajib (cleanup) throw Melempar error secara manual throws Mendeklarasikan bahwa method bisa error Exception Objek kesalahan yang bisa ditangani <p>\u27a1\ufe0f Selanjutnya: Array dan ArrayList</p>"},{"location":"menengah/file_io/","title":"\ud83d\udcc1 File I/O (Input dan Output File) dalam Java","text":"<p>Java menyediakan API lengkap untuk membaca dan menulis file, baik teks maupun biner.</p>"},{"location":"menengah/file_io/#membaca-file-teks","title":"\ud83d\udce5 Membaca File Teks","text":""},{"location":"menengah/file_io/#1-menggunakan-bufferedreader","title":"1. Menggunakan <code>BufferedReader</code>","text":"<pre><code>import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class BacaFile {\n    public static void main(String[] args) {\n        try {\n            BufferedReader reader = new BufferedReader(new FileReader(\"data.txt\"));\n            String baris;\n            while ((baris = reader.readLine()) != null) {\n                System.out.println(baris);\n            }\n            reader.close();\n        } catch (IOException e) {\n            System.out.println(\"Gagal membaca file: \" + e.getMessage());\n        }\n    }\n}\n````\n\n---\n\n## \ud83d\udcdd Menulis ke File\n\n### 2. Menggunakan `BufferedWriter`\n\n```java\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic class TulisFile {\n    public static void main(String[] args) {\n        try {\n            BufferedWriter writer = new BufferedWriter(new FileWriter(\"output.txt\"));\n            writer.write(\"Data panen berhasil dicatat.\");\n            writer.newLine();\n            writer.write(\"Total berat: 1234 kg\");\n            writer.close();\n            System.out.println(\"Berhasil menulis file.\");\n        } catch (IOException e) {\n            System.out.println(\"Gagal menulis file: \" + e.getMessage());\n        }\n    }\n}\n</code></pre>"},{"location":"menengah/file_io/#append-menambahkan-tanpa-menimpa","title":"\ud83d\udd04 Append (Menambahkan Tanpa Menimpa)","text":"<p>Gunakan <code>new FileWriter(\"nama.txt\", true)</code> untuk menambahkan isi tanpa menimpa:</p> <pre><code>BufferedWriter writer = new BufferedWriter(new FileWriter(\"log.txt\", true));\n</code></pre>"},{"location":"menengah/file_io/#cek-apakah-file-ada","title":"\ud83d\udcc4 Cek Apakah File Ada","text":"<pre><code>import java.io.File;\n\nFile file = new File(\"data.txt\");\n\nif (file.exists()) {\n    System.out.println(\"File ditemukan!\");\n} else {\n    System.out.println(\"File tidak ada.\");\n}\n</code></pre>"},{"location":"menengah/file_io/#membuat-folder","title":"\ud83d\udcc2 Membuat Folder","text":"<pre><code>File folder = new File(\"rekap/\");\nif (!folder.exists()) {\n    folder.mkdir();\n}\n</code></pre>"},{"location":"menengah/file_io/#exception-yang-umum","title":"\u26a0\ufe0f Exception yang Umum","text":"Exception Penyebab <code>FileNotFoundException</code> File tidak ditemukan <code>IOException</code> Error umum I/O (akses, permission)"},{"location":"menengah/file_io/#studi-kasus-simpan-nama-pekerja-ke-file","title":"\ud83e\uddea Studi Kasus: Simpan Nama Pekerja ke File","text":"<pre><code>import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class SimpanPekerja {\n    public static void main(String[] args) {\n        try {\n            FileWriter fw = new FileWriter(\"pekerja.txt\");\n            fw.write(\"Ali\\nBudi\\nCici\");\n            fw.close();\n            System.out.println(\"Data pekerja disimpan.\");\n        } catch (IOException e) {\n            System.out.println(\"Gagal menyimpan: \" + e.getMessage());\n        }\n    }\n}\n</code></pre>"},{"location":"menengah/file_io/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"Konsep Penjelasan FileReader Membaca file karakter per karakter BufferedReader Membaca per baris, lebih efisien FileWriter Menulis file karakter per karakter BufferedWriter Menulis dengan buffer, lebih efisien File Mengelola info dasar file dan folder <p>\u27a1\ufe0f Selanjutnya: Enum (Konstanta Bertipe Kelas)</p>"},{"location":"menengah/hashmap/","title":"\ud83d\uddc2\ufe0f HashMap dalam Java","text":"<p>HashMap adalah struktur data dari Java Collection Framework yang menyimpan pasangan kunci-nilai (key-value).</p> <p>Mirip seperti: <pre><code>\"NIM\"  -&gt; \"12345\"\n\"Nama\" -&gt; \"Marno\"\n\"Role\" -&gt; \"Pekerja\"\n\n````\n\n---\n\n## \ud83e\uddf1 Deklarasi Dasar\n\n```java\nimport java.util.HashMap;\n\nHashMap&lt;String, String&gt; data = new HashMap&lt;&gt;();\n````\n\n---\n\n## \ud83d\udd27 Operasi Dasar HashMap\n\n| Method                 | Keterangan                           |\n| ---------------------- | ------------------------------------ |\n| `put(key, value)`      | Menambahkan pasangan kunci-nilai     |\n| `get(key)`             | Mengambil nilai berdasarkan kunci    |\n| `remove(key)`          | Menghapus pasangan berdasarkan kunci |\n| `containsKey(key)`     | Mengecek apakah kunci tersedia       |\n| `containsValue(value)` | Mengecek apakah nilai tersedia       |\n| `size()`               | Jumlah pasangan                      |\n| `clear()`              | Menghapus semua data                 |\n\n---\n\n## \ud83d\udcd8 Contoh:\n\n```java\nHashMap&lt;String, String&gt; user = new HashMap&lt;&gt;();\n\nuser.put(\"id\", \"001\");\nuser.put(\"nama\", \"Marno\");\nuser.put(\"role\", \"Mandor\");\n\nSystem.out.println(user.get(\"nama\")); // Output: Marno\n</code></pre></p>"},{"location":"menengah/hashmap/#iterasi-hashmap","title":"\ud83d\udd01 Iterasi HashMap","text":""},{"location":"menengah/hashmap/#1-dengan-keyset","title":"1. Dengan <code>keySet()</code>:","text":"<pre><code>for (String key : user.keySet()) {\n    System.out.println(key + \": \" + user.get(key));\n}\n</code></pre>"},{"location":"menengah/hashmap/#2-dengan-entryset","title":"2. Dengan <code>entrySet()</code>:","text":"<pre><code>for (Map.Entry&lt;String, String&gt; entry : user.entrySet()) {\n    System.out.println(entry.getKey() + \" =&gt; \" + entry.getValue());\n}\n</code></pre>"},{"location":"menengah/hashmap/#studi-kasus-rekap-gaji-pekerja","title":"\ud83e\uddea Studi Kasus: Rekap Gaji Pekerja","text":"<pre><code>HashMap&lt;String, Double&gt; gaji = new HashMap&lt;&gt;();\n\ngaji.put(\"Ali\", 500.0);\ngaji.put(\"Budi\", 450.0);\ngaji.put(\"Cici\", 470.0);\n\nfor (String nama : gaji.keySet()) {\n    System.out.println(nama + \" menerima RM \" + gaji.get(nama));\n}\n</code></pre>"},{"location":"menengah/hashmap/#hashmap-vs-arraylist","title":"\u2696\ufe0f HashMap vs ArrayList","text":"Fitur HashMap ArrayList Akses data Berdasarkan <code>key</code> Berdasarkan <code>index</code> Struktur Tidak berurutan (unordered) Urutan tetap Cocok untuk Lookup cepat, data acak Koleksi berurutan"},{"location":"menengah/hashmap/#catatan-penting","title":"\u26a0\ufe0f Catatan Penting","text":"<ul> <li>Kunci harus unik</li> <li>Nilai bisa berulang</li> <li>HashMap tidak menjaga urutan input</li> <li>Gunakan <code>LinkedHashMap</code> jika ingin versi yang menjaga urutan</li> </ul>"},{"location":"menengah/hashmap/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"Konsep Penjelasan HashMap Struktur data untuk pasangan key-value Keunggulan Akses cepat, fleksibel, cocok untuk lookup Biasa digunakan untuk Konfigurasi, user, mapping, cache <p>\u27a1\ufe0f Selanjutnya: File I/O (Baca &amp; Tulis File)</p>"},{"location":"menengah/inner_class/","title":"\ud83e\uddec Inner Class (Class di Dalam Class)","text":"<p>Java memungkinkan kita untuk membuat class di dalam class lain. Ini disebut inner class. Tujuannya adalah untuk mengelompokkan class yang hanya digunakan di dalam induknya, menjaga struktur kode tetap rapi dan relevan.</p>"},{"location":"menengah/inner_class/#4-jenis-inner-class-di-java","title":"\ud83e\udde9 4 Jenis Inner Class di Java","text":"Jenis Penjelasan Singkat Inner Class Biasa Class di dalam class Static Nested Class Inner class yang bersifat static Local Inner Class Class di dalam method Anonymous Inner Class Class tanpa nama, langsung digunakan"},{"location":"menengah/inner_class/#1-inner-class-biasa","title":"1\ufe0f\u20e3 Inner Class Biasa","text":"<pre><code>public class Luar {\n    class Dalam {\n        void tampil() {\n            System.out.println(\"Ini class dalam.\");\n        }\n    }\n\n    void jalan() {\n        Dalam d = new Dalam();\n        d.tampil();\n    }\n\n    public static void main(String[] args) {\n        Luar l = new Luar();\n        l.jalan();\n    }\n}\n````\n\n---\n\n## 2\ufe0f\u20e3 Static Nested Class\n\n```java\npublic class Luar {\n    static class Dalam {\n        void tampil() {\n            System.out.println(\"Ini static inner class.\");\n        }\n    }\n\n    public static void main(String[] args) {\n        Luar.Dalam d = new Luar.Dalam();\n        d.tampil();\n    }\n}\n</code></pre> <ul> <li>Bisa dibuat tanpa membuat objek class luar</li> <li>Tidak bisa akses anggota non-static dari class luar</li> </ul>"},{"location":"menengah/inner_class/#3-local-inner-class-dalam-method","title":"3\ufe0f\u20e3 Local Inner Class (Dalam Method)","text":"<pre><code>public class Demo {\n    void tampil() {\n        class Lokal {\n            void sapa() {\n                System.out.println(\"Halo dari dalam method.\");\n            }\n        }\n\n        Lokal l = new Lokal();\n        l.sapa();\n    }\n\n    public static void main(String[] args) {\n        new Demo().tampil();\n    }\n}\n</code></pre>"},{"location":"menengah/inner_class/#4-anonymous-inner-class","title":"4\ufe0f\u20e3 Anonymous Inner Class","text":"<ul> <li>Digunakan saat membuat implementasi cepat satu kali pakai</li> <li>Sering dipakai pada listener atau callback</li> </ul> <pre><code>interface Sapa {\n    void ucap();\n}\n\npublic class Demo {\n    public static void main(String[] args) {\n        Sapa s = new Sapa() {\n            public void ucap() {\n                System.out.println(\"Halo dunia!\");\n            }\n        };\n\n        s.ucap();\n    }\n}\n</code></pre>"},{"location":"menengah/inner_class/#kapan-menggunakan-inner-class","title":"\ud83d\udccc Kapan Menggunakan Inner Class?","text":"Situasi Jenis Inner Class yang Cocok Struktur hanya digunakan dalam satu class Inner Class biasa Tidak butuh akses luar Static Nested Class Hanya dibutuhkan dalam satu method Local Inner Class Implementasi cepat (1x pakai) Anonymous Inner Class"},{"location":"menengah/inner_class/#studi-kasus-form-validasi","title":"\ud83e\uddea Studi Kasus: Form Validasi","text":"<pre><code>public class Form {\n    private String nama;\n\n    class Validator {\n        boolean isValid() {\n            return nama != null &amp;&amp; !nama.isEmpty();\n        }\n    }\n\n    public Form(String nama) {\n        this.nama = nama;\n    }\n\n    public boolean validasi() {\n        Validator v = new Validator();\n        return v.isValid();\n    }\n\n    public static void main(String[] args) {\n        Form f = new Form(\"Marno\");\n        System.out.println(\"Valid: \" + f.validasi());\n    }\n}\n</code></pre>"},{"location":"menengah/inner_class/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"Jenis Inner Class Bisa Static? Bisa Akses Anggota Luar? Digunakan Saat Inner Class \u274c Tidak \u2705 Ya Class bantu untuk outer Static Nested Class \u2705 Ya \u274c Tidak Class mandiri tapi terhubung Local Inner Class \u274c Tidak \u2705 Ya (jika final) Di dalam method Anonymous Inner Class \u274c Tidak \u2705 Ya Callback, event listener <p>\u27a1\ufe0f Selanjutnya: Level Mahir atau Framework Java</p>"},{"location":"menengah/package_import/","title":"\ud83d\udce6 Package &amp; Import dalam Java","text":"<p>Dalam Java, package digunakan untuk mengelompokkan class-class terkait agar proyek lebih rapi dan modular.</p> <p>Mirip seperti folder dalam komputer, package menyimpan class sesuai kategori atau fungsinya.</p>"},{"location":"menengah/package_import/#apa-itu-package","title":"\ud83e\uddf1 Apa Itu Package?","text":"<pre><code>package nama_package;\n````\n\nDidefinisikan di **baris pertama file Java**, sebelum deklarasi class.\n\nContoh:\n\n```java\npackage utils;\n\npublic class Kalkulator {\n    public int tambah(int a, int b) {\n        return a + b;\n    }\n}\n</code></pre>"},{"location":"menengah/package_import/#struktur-direktori-package","title":"\ud83d\udee0\ufe0f Struktur Direktori Package","text":"<p>Jika kita punya:</p> <pre><code>project/\n\u251c\u2500\u2500 Main.java\n\u2514\u2500\u2500 utils/\n    \u2514\u2500\u2500 Kalkulator.java\n</code></pre> <p>Isi <code>Kalkulator.java</code>:</p> <pre><code>package utils;\n\npublic class Kalkulator {\n    public int kali(int a, int b) {\n        return a * b;\n    }\n}\n</code></pre> <p>Isi <code>Main.java</code>:</p> <pre><code>import utils.Kalkulator;\n\npublic class Main {\n    public static void main(String[] args) {\n        Kalkulator k = new Kalkulator();\n        System.out.println(\"Hasil: \" + k.kali(4, 5));\n    }\n}\n</code></pre> <p>\ud83d\udca1 Output:</p> <pre><code>Hasil: 20\n</code></pre>"},{"location":"menengah/package_import/#import-menggunakan-class-dari-package-lain","title":"\ud83d\udce5 Import: Menggunakan Class dari Package Lain","text":"<pre><code>import nama_package.NamaClass;\n</code></pre> <p>Contoh:</p> <pre><code>import java.util.Scanner;\n</code></pre> <p>Gunakan <code>import java.util.*;</code> untuk mengimpor semua class dari package tersebut.</p>"},{"location":"menengah/package_import/#package-bawaan-java-java","title":"\ud83d\udce6 Package Bawaan Java (<code>java.*</code>)","text":"Package Deskripsi <code>java.lang</code> Class dasar (String, Math, Object) <code>java.util</code> Struktur data (ArrayList, HashMap) <code>java.io</code> Input/Output stream <code>java.net</code> Networking <code>java.time</code> Tanggal dan waktu (Java 8+)"},{"location":"menengah/package_import/#membuat-package-kustom","title":"\ud83c\udfd7\ufe0f Membuat Package Kustom","text":"<pre><code>mkdir utils\ntouch utils/Kalkulator.java\n</code></pre> <p>Isi file:</p> <pre><code>package utils;\n\npublic class Kalkulator {\n    public static int tambah(int a, int b) {\n        return a + b;\n    }\n}\n</code></pre>"},{"location":"menengah/package_import/#kompilasi-dan-jalankan-program-dengan-package","title":"\u2699\ufe0f Kompilasi dan Jalankan Program dengan Package","text":"<pre><code>javac utils/Kalkulator.java\njavac Main.java\njava Main\n</code></pre> <p>Jika package berada di dalam folder lain, gunakan <code>-cp</code> (classpath).</p>"},{"location":"menengah/package_import/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"Konsep Penjelasan Package Cara Java mengorganisasi class ke dalam folder Import Digunakan untuk memakai class dari package lain Best Practice Gunakan nama unik seperti <code>com.nama.app</code> untuk project besar <p>\u27a1\ufe0f Selanjutnya: Exception Handling (Penanganan Error)</p>"},{"location":"oop/abstraction/","title":"\ud83e\uddfc Abstraction (Abstraksi) dalam Java","text":"<p>Abstraction adalah proses menyembunyikan detail implementasi dan hanya menampilkan fitur penting kepada pengguna.</p> <p>Bayangkan saat kamu mengendarai mobil:</p> <p>Kamu cukup tahu cara menginjak gas dan rem \u2014 kamu tidak perlu tahu cara kerja mesin.</p>"},{"location":"oop/abstraction/#tujuan-abstraksi","title":"\ud83e\udde0 Tujuan Abstraksi","text":"<ul> <li>Menyederhanakan kompleksitas</li> <li>Membuat kode mudah digunakan dan dikembangkan</li> <li>Menyediakan kontrak (interface) yang jelas untuk developer</li> </ul>"},{"location":"oop/abstraction/#dua-cara-menerapkan-abstraksi-di-java","title":"\ud83d\udc51 Dua Cara Menerapkan Abstraksi di Java:","text":"<ol> <li>Abstract Class</li> <li>Interface</li> </ol>"},{"location":"oop/abstraction/#1-abstract-class","title":"1. \ud83e\uddf1 Abstract Class","text":"<p>Class yang tidak bisa diinstansiasi langsung dan bisa memiliki method: - abstract (tanpa isi) - non-abstract (dengan isi)</p>"},{"location":"oop/abstraction/#struktur","title":"Struktur:","text":"<pre><code>abstract class Kendaraan {\n    abstract void jalan(); // wajib diimplementasikan\n    void info() {\n        System.out.println(\"Ini kendaraan umum\");\n    }\n}\n````\n\n### Subclass:\n\n```java\nclass Mobil extends Kendaraan {\n    void jalan() {\n        System.out.println(\"Mobil berjalan di jalan raya\");\n    }\n}\n</code></pre>"},{"location":"oop/abstraction/#penggunaan","title":"Penggunaan:","text":"<pre><code>Kendaraan m = new Mobil();\nm.jalan(); // Mobil berjalan di jalan raya\nm.info();  // Ini kendaraan umum\n</code></pre>"},{"location":"oop/abstraction/#2-interface","title":"2. \ud83d\udca1 Interface","text":"<p>Interface adalah kontrak murni: semua method-nya bersifat <code>abstract</code> secara default (sejak Java 8 bisa punya default dan static method).</p> <pre><code>interface Hewan {\n    void suara();\n}\n</code></pre>"},{"location":"oop/abstraction/#implementasi","title":"Implementasi:","text":"<pre><code>class Kucing implements Hewan {\n    public void suara() {\n        System.out.println(\"Meong\");\n    }\n}\n</code></pre>"},{"location":"oop/abstraction/#penggunaan_1","title":"Penggunaan:","text":"<pre><code>Hewan h = new Kucing();\nh.suara(); // Meong\n</code></pre>"},{"location":"oop/abstraction/#abstract-class-vs-interface","title":"\ud83d\udd0d Abstract Class vs Interface","text":"Fitur Abstract Class Interface Keyword <code>abstract</code> <code>interface</code> Konstruktor Bisa Tidak bisa Implementasi Method Bisa punya method lengkap Tidak (kecuali default/static) Multiple Inheritance Tidak bisa Bisa Digunakan ketika Ada logika umum Hanya definisi kontrak"},{"location":"oop/abstraction/#studi-kasus-abstraksi-pembayaran","title":"\ud83e\uddea Studi Kasus: Abstraksi Pembayaran","text":"<pre><code>abstract class Pembayaran {\n    abstract void proses();\n}\n\nclass TransferBank extends Pembayaran {\n    void proses() {\n        System.out.println(\"Memproses transfer bank...\");\n    }\n}\n\nclass EWallet extends Pembayaran {\n    void proses() {\n        System.out.println(\"Memproses E-Wallet...\");\n    }\n}\n</code></pre>"},{"location":"oop/abstraction/#penggunaan_2","title":"Penggunaan:","text":"<pre><code>Pembayaran p = new TransferBank();\np.proses(); // Memproses transfer bank...\n</code></pre>"},{"location":"oop/abstraction/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"Konsep Penjelasan Abstraction Menyembunyikan detail dan hanya tampilkan esensi Abstract Class Partial abstraction (boleh ada method lengkap) Interface Full abstraction (hanya kontrak) Tujuan Umum Kesederhanaan, struktur, dan fleksibilitas <p>\ud83c\udfaf Dengan abstraction, developer cukup tahu apa yang harus dilakukan, tanpa tahu bagaimana dilakukan.</p> <p>\u27a1\ufe0f Selanjutnya: Ringkasan OOP dan Studi Kasus Proyek</p>"},{"location":"oop/class_objek/","title":"\ud83c\udfd7\ufe0f Membuat Class dan Object dalam Java","text":"<p>Dalam OOP Java, semua dimulai dari class dan object. Class adalah blueprint. Object adalah instance-nya \u2014 seperti cetakan dan hasil cetakannya.</p>"},{"location":"oop/class_objek/#1-membuat-class","title":"1. \u270f\ufe0f Membuat Class","text":"<p>Class menyimpan: - Atribut (field) \u2192 data - Method (fungsi) \u2192 aksi</p>"},{"location":"oop/class_objek/#contoh","title":"Contoh:","text":"<pre><code>public class Mahasiswa {\n    String nama;\n    int umur;\n\n    void sapa() {\n        System.out.println(\"Halo, saya \" + nama);\n    }\n}\n````\n\n---\n\n## 2. \ud83e\uddea Membuat dan Menggunakan Object\n\nGunakan keyword `new` untuk membuat object.\n\n```java\npublic class Demo {\n    public static void main(String[] args) {\n        Mahasiswa mhs1 = new Mahasiswa();\n        mhs1.nama = \"Marno\";\n        mhs1.umur = 21;\n\n        mhs1.sapa(); // output: Halo, saya Marno\n    }\n}\n</code></pre>"},{"location":"oop/class_objek/#3-constructor-membuat-object-lebih-efisien","title":"3. \u2699\ufe0f Constructor: Membuat Object Lebih Efisien","text":"<p>Constructor adalah method khusus yang otomatis dipanggil saat object dibuat.</p> <pre><code>class Mahasiswa {\n    String nama;\n    int umur;\n\n    // Constructor\n    Mahasiswa(String n, int u) {\n        nama = n;\n        umur = u;\n    }\n\n    void sapa() {\n        System.out.println(\"Saya \" + nama + \", umur \" + umur);\n    }\n}\n</code></pre>"},{"location":"oop/class_objek/#contoh-pemanggilan","title":"Contoh Pemanggilan:","text":"<pre><code>Mahasiswa mhs1 = new Mahasiswa(\"Marno\", 21);\nmhs1.sapa();\n</code></pre> <p>\ud83d\udca1 Output:</p> <pre><code>Saya Marno, umur 21\n</code></pre>"},{"location":"oop/class_objek/#4-perbedaan-field-method-dan-constructor","title":"4. \ud83e\uddf1 Perbedaan Field, Method, dan Constructor","text":"Elemen Fungsi Field Menyimpan data dalam class Method Menjalankan aksi atau logika Constructor Inisialisasi object saat dibuat (<code>new</code>)"},{"location":"oop/class_objek/#5-studi-kasus-class-mobil","title":"5. \ud83e\udde0 Studi Kasus: Class <code>Mobil</code>","text":"<pre><code>class Mobil {\n    String merk;\n    int tahun;\n\n    Mobil(String m, int t) {\n        merk = m;\n        tahun = t;\n    }\n\n    void info() {\n        System.out.println(\"Merk: \" + merk + \", Tahun: \" + tahun);\n    }\n}\n\npublic class DemoMobil {\n    public static void main(String[] args) {\n        Mobil m1 = new Mobil(\"Toyota\", 2020);\n        Mobil m2 = new Mobil(\"Honda\", 2022);\n\n        m1.info();\n        m2.info();\n    }\n}\n</code></pre> <p>\ud83d\udca1 Output:</p> <pre><code>Merk: Toyota, Tahun: 2020  \nMerk: Honda, Tahun: 2022\n</code></pre>"},{"location":"oop/class_objek/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"Konsep Penjelasan Class Blueprint: berisi data dan method Object Wujud nyata class (hasil <code>new</code>) Constructor Method khusus untuk inisialisasi Field &amp; Method Properti dan aksi dari sebuah object <p>\u27a1\ufe0f Selanjutnya: Encapsulation (Enkapsulasi)</p>"},{"location":"oop/encapsulation/","title":"\ud83d\udd12 Encapsulation (Enkapsulasi) dalam Java","text":"<p>Encapsulation atau enkapsulasi adalah konsep OOP yang menyatukan data dan method dalam satu unit, serta menyembunyikan data dari luar.</p> <p>Tujuan utamanya adalah: - Mengontrol akses ke data (melalui method) - Melindungi data dari perubahan sembarangan</p>"},{"location":"oop/encapsulation/#struktur-enkapsulasi","title":"\ud83e\uddf1 Struktur Enkapsulasi","text":"<p>Untuk menerapkan enkapsulasi di Java:</p> <ol> <li>Buat field (atribut) sebagai <code>private</code></li> <li>Sediakan method <code>getter</code> dan <code>setter</code> untuk akses aman</li> </ol>"},{"location":"oop/encapsulation/#contoh","title":"\ud83d\udce6 Contoh:","text":"<pre><code>public class Mahasiswa {\n    private String nama;\n    private int umur;\n\n    public String getNama() {\n        return nama;\n    }\n\n    public void setNama(String namaBaru) {\n        nama = namaBaru;\n    }\n\n    public int getUmur() {\n        return umur;\n    }\n\n    public void setUmur(int umurBaru) {\n        if (umurBaru &gt;= 0) {\n            umur = umurBaru;\n        }\n    }\n}\n````\n\n---\n\n## \ud83d\udd0d Penggunaan di Kelas Lain\n\n```java\npublic class Demo {\n    public static void main(String[] args) {\n        Mahasiswa mhs = new Mahasiswa();\n        mhs.setNama(\"Marno\");\n        mhs.setUmur(21);\n\n        System.out.println(\"Nama: \" + mhs.getNama());\n        System.out.println(\"Umur: \" + mhs.getUmur());\n    }\n}\n</code></pre> <p>\ud83d\udca1 Output:</p> <pre><code>Nama: Marno\nUmur: 21\n</code></pre>"},{"location":"oop/encapsulation/#kenapa-harus-private","title":"\u2757 Kenapa Harus <code>private</code>?","text":"<p>Dengan <code>private</code>, data tidak bisa diakses langsung dari luar class:</p> <pre><code>Mahasiswa mhs = new Mahasiswa();\nmhs.nama = \"Marno\"; // \u274c ERROR: 'nama' has private access\n</code></pre>"},{"location":"oop/encapsulation/#keuntungan-enkapsulasi","title":"\u2705 Keuntungan Enkapsulasi","text":"Keuntungan Penjelasan Keamanan Data Atribut hanya bisa diakses melalui method Validasi Nilai Bisa dicek dalam setter sebelum menyimpan Mudah Perawatan Perubahan logika cukup di setter/getter Modular &amp; Rapi Struktur kode lebih terorganisir"},{"location":"oop/encapsulation/#studi-kasus-validasi-umur","title":"\ud83e\udde0 Studi Kasus: Validasi Umur","text":"<pre><code>class Siswa {\n    private int umur;\n\n    public void setUmur(int umur) {\n        if (umur &gt;= 5 &amp;&amp; umur &lt;= 18) {\n            this.umur = umur;\n        } else {\n            System.out.println(\"Umur tidak valid!\");\n        }\n    }\n\n    public int getUmur() {\n        return umur;\n    }\n}\n</code></pre>"},{"location":"oop/encapsulation/#penggunaan","title":"Penggunaan:","text":"<pre><code>Siswa s = new Siswa();\ns.setUmur(4); // Umur tidak valid!\ns.setUmur(12);\nSystem.out.println(\"Umur: \" + s.getUmur());\n</code></pre>"},{"location":"oop/encapsulation/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"Konsep Penjelasan <code>private</code> Menyembunyikan atribut Getter/Setter Akses data dengan aman dan validasi logika Enkapsulasi Menggabungkan data dan aksesnya <p>\u27a1\ufe0f Selanjutnya: Inheritance (Pewarisan)</p>"},{"location":"oop/inheritance/","title":"\ud83e\uddec Inheritance (Pewarisan) dalam Java","text":"<p>Inheritance adalah kemampuan class untuk mewarisi properti dan method dari class lain.</p> <p>Dengan inheritance: - Kita bisa membuat class turunan (child/subclass) - Kode menjadi lebih efisien dan tidak berulang - Mewujudkan hubungan \"is-a\" antar class</p>"},{"location":"oop/inheritance/#struktur-dasar-inheritance","title":"\ud83e\uddf1 Struktur Dasar Inheritance","text":"<p>Gunakan keyword <code>extends</code> untuk membuat class turunan:</p> <pre><code>class Induk {\n    void salam() {\n        System.out.println(\"Halo dari kelas induk!\");\n    }\n}\n\nclass Anak extends Induk {\n    void perkenalan() {\n        System.out.println(\"Saya dari kelas anak.\");\n    }\n}\n````\n\n---\n\n## \ud83d\udd01 Menggunakan Inheritance\n\n```java\npublic class Demo {\n    public static void main(String[] args) {\n        Anak a = new Anak();\n        a.salam();         // diwarisi dari class Induk\n        a.perkenalan();    // method milik class Anak\n    }\n}\n</code></pre> <p>\ud83d\udca1 Output:</p> <pre><code>Halo dari kelas induk!\nSaya dari kelas anak.\n</code></pre>"},{"location":"oop/inheritance/#hierarki-is-a","title":"\ud83c\udfd7\ufe0f Hierarki \"Is-a\"","text":"<pre><code>class Kendaraan { }\nclass Mobil extends Kendaraan { }\n\nMobil adalah Kendaraan \u2192 \u2705\n</code></pre>"},{"location":"oop/inheritance/#overriding-mengubah-perilaku-method-induk","title":"\ud83c\udfaf Overriding: Mengubah Perilaku Method Induk","text":"<p>Subclass bisa mengganti method dari superclass.</p> <pre><code>class Hewan {\n    void suara() {\n        System.out.println(\"Hewan bersuara...\");\n    }\n}\n\nclass Kucing extends Hewan {\n    @Override\n    void suara() {\n        System.out.println(\"Meong\");\n    }\n}\n</code></pre>"},{"location":"oop/inheritance/#keyword-penting","title":"\ud83d\udd11 Keyword Penting","text":"Keyword Fungsi <code>extends</code> Membuat class turunan <code>super</code> Mengakses konstruktor/field/method dari superclass <code>@Override</code> Memberi tahu bahwa method menimpa method superclass"},{"location":"oop/inheritance/#studi-kasus-pegawai-dan-manager","title":"\ud83e\uddea Studi Kasus: Pegawai dan Manager","text":"<pre><code>class Pegawai {\n    String nama;\n    int gaji;\n\n    void info() {\n        System.out.println(nama + \" bergaji \" + gaji);\n    }\n}\n\nclass Manager extends Pegawai {\n    int bonus;\n\n    void totalGaji() {\n        int total = gaji + bonus;\n        System.out.println(\"Total gaji: \" + total);\n    }\n}\n</code></pre>"},{"location":"oop/inheritance/#penggunaan","title":"Penggunaan:","text":"<pre><code>public class Demo {\n    public static void main(String[] args) {\n        Manager m = new Manager();\n        m.nama = \"Marno\";\n        m.gaji = 5000;\n        m.bonus = 2000;\n\n        m.info();       // dari Pegawai\n        m.totalGaji();  // method di Manager\n    }\n}\n</code></pre>"},{"location":"oop/inheritance/#constructor-dan-super","title":"\ud83d\udee0\ufe0f Constructor dan <code>super</code>","text":"<p>Constructor superclass dapat dipanggil dari subclass:</p> <pre><code>class Person {\n    String nama;\n    Person(String n) {\n        nama = n;\n    }\n}\n\nclass Mahasiswa extends Person {\n    Mahasiswa(String n) {\n        super(n); // memanggil constructor induk\n    }\n}\n</code></pre>"},{"location":"oop/inheritance/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"Konsep Penjelasan Inheritance Class anak mewarisi class induk extends Digunakan untuk pewarisan super Mengakses constructor/field/method induk Overriding Menyesuaikan method dari class induk <p>\u27a1\ufe0f Selanjutnya: Polymorphism (Polimorfisme)</p>"},{"location":"oop/konsep/","title":"\ud83e\udded Konsep Dasar OOP (Object-Oriented Programming) dalam Java","text":"<p>Java adalah bahasa pemrograman berorientasi objek, yang berarti semuanya dibangun atas dasar kelas (class) dan objek (object).</p> <p>Dengan OOP, kita bisa membuat kode yang modular, fleksibel, dan mudah dirawat.</p>"},{"location":"oop/konsep/#1-apa-itu-object-dan-class","title":"\ud83e\udde0 1. Apa Itu Object dan Class?","text":""},{"location":"oop/konsep/#class","title":"Class","text":"<p>Blueprint atau cetakan untuk membuat objek.</p> <pre><code>class Mobil {\n    String merk;\n    int tahun;\n}\n````\n\n### Object\n\nHasil nyata dari class (instansiasi).\n\n```java\nMobil m1 = new Mobil();\n</code></pre>"},{"location":"oop/konsep/#2-empat-pilar-oop","title":"\ud83c\udfaf 2. Empat Pilar OOP","text":""},{"location":"oop/konsep/#a-encapsulation-enkapsulasi","title":"a) Encapsulation (Enkapsulasi)","text":"<p>Menyembunyikan detail implementasi, hanya memberikan akses yang diperlukan melalui method getter/setter.</p> <pre><code>class Mahasiswa {\n    private String nama;\n\n    public void setNama(String n) {\n        nama = n;\n    }\n\n    public String getNama() {\n        return nama;\n    }\n}\n</code></pre> <p>\u2705 Gunakan <code>private</code> untuk menjaga keamanan data, dan <code>public</code> untuk akses terkontrol.</p>"},{"location":"oop/konsep/#b-inheritance-pewarisan","title":"b) Inheritance (Pewarisan)","text":"<p>Mewarisi atribut dan method dari class induk ke class anak.</p> <pre><code>class Hewan {\n    void makan() {\n        System.out.println(\"Hewan sedang makan\");\n    }\n}\n\nclass Kucing extends Hewan {\n    void suara() {\n        System.out.println(\"Meong\");\n    }\n}\n</code></pre> <p>\ud83d\udca1 Gunakan keyword <code>extends</code> untuk pewarisan.</p>"},{"location":"oop/konsep/#c-polymorphism-polimorfisme","title":"c) Polymorphism (Polimorfisme)","text":"<p>Satu method bisa memiliki banyak bentuk tergantung objeknya.</p> <pre><code>class Bentuk {\n    void gambar() {\n        System.out.println(\"Menggambar bentuk\");\n    }\n}\n\nclass Lingkaran extends Bentuk {\n    void gambar() {\n        System.out.println(\"Menggambar lingkaran\");\n    }\n}\n</code></pre>"},{"location":"oop/konsep/#method-overriding","title":"Method Overriding","text":"<p>Mengubah perilaku method di class anak.</p>"},{"location":"oop/konsep/#d-abstraction-abstraksi","title":"d) Abstraction (Abstraksi)","text":"<p>Menyembunyikan kompleksitas dan hanya menunjukkan fitur penting.</p> <pre><code>abstract class Kendaraan {\n    abstract void jalan();\n}\n</code></pre> <p>Gunakan <code>abstract</code> untuk mendefinisikan class/metode yang belum memiliki implementasi.</p>"},{"location":"oop/konsep/#studi-kasus-class-dan-object","title":"\ud83e\uddea Studi Kasus: Class dan Object","text":"<pre><code>class Mahasiswa {\n    String nama;\n    int umur;\n\n    void sapa() {\n        System.out.println(\"Halo, nama saya \" + nama);\n    }\n}\n\npublic class Demo {\n    public static void main(String[] args) {\n        Mahasiswa m1 = new Mahasiswa();\n        m1.nama = \"Marno\";\n        m1.umur = 22;\n        m1.sapa();\n    }\n}\n</code></pre> <p>\ud83d\udca1 Output:</p> <pre><code>Halo, nama saya Marno\n</code></pre>"},{"location":"oop/konsep/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"Konsep Arti Sederhana Class Cetakan/desain Object Wujud nyata dari class Encapsulation Proteksi dan pengaturan akses data Inheritance Pewarisan fitur dari class lain Polymorphism Satu nama method, banyak perilaku Abstraction Menyederhanakan kompleksitas <p>\u27a1\ufe0f Selanjutnya: Membuat Class dan Objek</p>"},{"location":"oop/polymorphism/","title":"\ud83c\udf00 Polymorphism (Polimorfisme) dalam Java","text":"<p>Polymorphism berasal dari bahasa Yunani:</p> <p>poly = banyak, morph = bentuk</p> <p>Dalam Java, polymorphism memungkinkan satu method/objek memiliki banyak bentuk. Artinya, method yang sama bisa bekerja dengan cara berbeda tergantung objeknya.</p>"},{"location":"oop/polymorphism/#dua-jenis-polymorphism","title":"\ud83d\udd27 Dua Jenis Polymorphism:","text":""},{"location":"oop/polymorphism/#1-compile-time-polymorphism-static-method-overloading","title":"1. Compile-time Polymorphism (Static) \u2192 Method Overloading","text":""},{"location":"oop/polymorphism/#2-runtime-polymorphism-dynamic-method-overriding","title":"2. Runtime Polymorphism (Dynamic) \u2192 Method Overriding","text":""},{"location":"oop/polymorphism/#1-compile-time-polymorphism-method-overloading","title":"1. \ud83e\uddf1 Compile-Time Polymorphism (Method Overloading)","text":"<p>Overloading terjadi ketika beberapa method memiliki nama yang sama, namun dengan parameter berbeda.</p> <pre><code>class Kalkulator {\n    int tambah(int a, int b) {\n        return a + b;\n    }\n\n    double tambah(double a, double b) {\n        return a + b;\n    }\n\n    int tambah(int a, int b, int c) {\n        return a + b + c;\n    }\n}\n````\n\n### Penggunaan:\n\n```java\nKalkulator k = new Kalkulator();\nSystem.out.println(k.tambah(2, 3));       // 5\nSystem.out.println(k.tambah(2.5, 3.5));   // 6.0\nSystem.out.println(k.tambah(1, 2, 3));    // 6\n</code></pre> <p>\ud83e\udde0 Overloading terjadi saat compile time, karena compiler bisa membedakan berdasarkan parameter.</p>"},{"location":"oop/polymorphism/#2-runtime-polymorphism-method-overriding","title":"2. \ud83d\udd04 Runtime Polymorphism (Method Overriding)","text":"<p>Overriding terjadi saat subclass memberikan implementasi ulang terhadap method dari superclass.</p> <pre><code>class Hewan {\n    void suara() {\n        System.out.println(\"Hewan bersuara\");\n    }\n}\n\nclass Kucing extends Hewan {\n    @Override\n    void suara() {\n        System.out.println(\"Meong\");\n    }\n}\n\nclass Anjing extends Hewan {\n    @Override\n    void suara() {\n        System.out.println(\"Guk Guk\");\n    }\n}\n</code></pre>"},{"location":"oop/polymorphism/#polymorphism-dengan-referensi-superclass","title":"\ud83c\udfaf Polymorphism dengan Referensi Superclass","text":"<pre><code>public class Demo {\n    public static void main(String[] args) {\n        Hewan h1 = new Kucing();\n        Hewan h2 = new Anjing();\n\n        h1.suara(); // Meong\n        h2.suara(); // Guk Guk\n    }\n}\n</code></pre> <p>\ud83e\udde0 Di sini, method <code>suara()</code> dieksekusi sesuai dengan objek aktual, bukan tipe referensi-nya.</p>"},{"location":"oop/polymorphism/#kenapa-polymorphism-penting","title":"\u26a0\ufe0f Kenapa Polymorphism Penting?","text":"<ul> <li>\u2705 Membuat kode lebih modular &amp; scalable</li> <li>\u2705 Mendukung prinsip Open/Closed (OOP Design Principle)</li> <li>\u2705 Memungkinkan satu antarmuka dipakai untuk banyak implementasi</li> </ul>"},{"location":"oop/polymorphism/#studi-kasus-kendaraan","title":"\ud83e\uddea Studi Kasus: Kendaraan","text":"<pre><code>class Kendaraan {\n    void jalan() {\n        System.out.println(\"Kendaraan bergerak...\");\n    }\n}\n\nclass Mobil extends Kendaraan {\n    @Override\n    void jalan() {\n        System.out.println(\"Mobil melaju di jalan\");\n    }\n}\n\nclass Motor extends Kendaraan {\n    @Override\n    void jalan() {\n        System.out.println(\"Motor menyusuri gang kecil\");\n    }\n}\n\npublic class DemoKendaraan {\n    public static void main(String[] args) {\n        Kendaraan k1 = new Mobil();\n        Kendaraan k2 = new Motor();\n\n        k1.jalan(); // Mobil melaju di jalan\n        k2.jalan(); // Motor menyusuri gang kecil\n    }\n}\n</code></pre>"},{"location":"oop/polymorphism/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"Jenis Polymorphism Teknik Waktu Terjadi Compile-time Method Overloading Saat kompilasi Runtime Method Overriding Saat program jalan Tujuan Umum Fleksibilitas &amp; Reusabilitas Kode <p>\u27a1\ufe0f Selanjutnya: Abstraction (Abstraksi)</p>"},{"location":"oop/ringkasan/","title":"\ud83e\uddfe Ringkasan OOP &amp; Studi Kasus","text":"<p>Setelah mempelajari semua pilar Object-Oriented Programming (OOP), saatnya kita merangkum dan melihat bagaimana semuanya bekerja dalam praktik nyata.</p>"},{"location":"oop/ringkasan/#ringkasan-empat-pilar-oop","title":"\ud83e\uddf1 Ringkasan Empat Pilar OOP","text":"Pilar Konsep Inti Encapsulation Menyembunyikan data, hanya akses via getter/setter Inheritance Pewarisan method &amp; atribut dari class induk ke class anak Polymorphism Banyak bentuk: satu interface, banyak implementasi Abstraction Menyembunyikan kompleksitas, hanya menampilkan fitur utama"},{"location":"oop/ringkasan/#studi-kasus-sistem-rekap-panen-sawit-sederhana","title":"\ud83d\udcd8 Studi Kasus: Sistem Rekap Panen Sawit (Sederhana)","text":"<p>Bayangkan kita sedang membuat sistem untuk mencatat hasil panen kelapa sawit. Setiap pekerja memiliki peran berbeda dalam satu tim (pemotong, penyusun, pengutip), dan kita ingin menghitung gaji mereka berdasarkan kontribusi masing-masing.</p>"},{"location":"oop/ringkasan/#1-buat-class-abstrak-pekerja","title":"1. Buat Class Abstrak: <code>Pekerja</code>","text":"<pre><code>abstract class Pekerja {\n    protected String nama;\n\n    public Pekerja(String nama) {\n        this.nama = nama;\n    }\n\n    abstract double hitungGaji(double totalBerat);\n}\n````\n\n---\n\n## 2. Buat Class Turunan\n\n### a) Pemotong\n\n```java\nclass Pemotong extends Pekerja {\n    Pemotong(String nama) {\n        super(nama);\n    }\n\n    double hitungGaji(double totalBerat) {\n        return totalBerat * 0.4;\n    }\n}\n</code></pre>"},{"location":"oop/ringkasan/#b-penyusun","title":"b) Penyusun","text":"<pre><code>class Penyusun extends Pekerja {\n    Penyusun(String nama) {\n        super(nama);\n    }\n\n    double hitungGaji(double totalBerat) {\n        return totalBerat * 0.35;\n    }\n}\n</code></pre>"},{"location":"oop/ringkasan/#c-pengutip","title":"c) Pengutip","text":"<pre><code>class Pengutip extends Pekerja {\n    Pengutip(String nama) {\n        super(nama);\n    }\n\n    double hitungGaji(double totalBerat) {\n        return totalBerat * 0.25;\n    }\n}\n</code></pre>"},{"location":"oop/ringkasan/#3-implementasi-main","title":"3. Implementasi Main","text":"<pre><code>public class DemoPanen {\n    public static void main(String[] args) {\n        double beratPanen = 1000; // kg\n\n        Pekerja p1 = new Pemotong(\"Ali\");\n        Pekerja p2 = new Penyusun(\"Budi\");\n        Pekerja p3 = new Pengutip(\"Cici\");\n\n        System.out.println(p1.nama + \": RM \" + p1.hitungGaji(beratPanen));\n        System.out.println(p2.nama + \": RM \" + p2.hitungGaji(beratPanen));\n        System.out.println(p3.nama + \": RM \" + p3.hitungGaji(beratPanen));\n    }\n}\n</code></pre> <p>\ud83d\udca1 Output:</p> <pre><code>Ali: RM 400.0\nBudi: RM 350.0\nCici: RM 250.0\n</code></pre>"},{"location":"oop/ringkasan/#kesimpulan-akhir","title":"\ud83c\udf93 Kesimpulan Akhir","text":"Konsep Realisasi dalam Studi Kasus Encapsulation Atribut <code>nama</code> disimpan secara protected Inheritance Semua class mewarisi dari <code>Pekerja</code> Polymorphism Pemanggilan <code>hitungGaji()</code> sesuai objek nyata Abstraction <code>Pekerja</code> sebagai class abstrak"},{"location":"oop/ringkasan/#catatan-tambahan","title":"\ud83d\udcce Catatan Tambahan","text":"<ul> <li>Dalam proyek besar, struktur OOP akan dipadukan dengan database dan API</li> <li>Prinsip OOP penting untuk membuat kode fleksibel, reusable, dan scalable</li> <li>Gunakan OOP untuk semua entitas bisnis: <code>User</code>, <code>Gaji</code>, <code>Panen</code>, <code>Tim</code>, dll</li> </ul> <p>\u27a1\ufe0f Selesai! Kamu sekarang siap membangun aplikasi Java dengan dasar OOP yang kokoh \ud83c\udfd7\ufe0f</p> <p>\u2b05\ufe0f Kembali: Abstraction (Abstraksi)</p>"}]}