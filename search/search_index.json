{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":[" "]},"docs":[{"location":"","title":"Selamat Datang di Dokumentasi Belajar Java dari Nol || Delta Code \ud83d\ude80","text":""},{"location":"#apa-itu-java","title":"\ud83d\udccc Apa itu Java?","text":"<p>Java adalah bahasa pemrograman tingkat tinggi, berorientasi objek, dan platform independent. Diciptakan oleh James Gosling dan dirilis oleh Sun Microsystems pada tahun 1995, Java saat ini dikelola oleh Oracle.</p> <p>Java dikenal dengan prinsipnya: \"Write Once, Run Anywhere\" (WORA) \u2014 artinya kode yang ditulis sekali di Java dapat dijalankan di berbagai platform tanpa perubahan besar.</p>"},{"location":"#kenapa-harus-belajar-java","title":"\ud83c\udfaf Kenapa Harus Belajar Java?","text":"<p>Java digunakan dalam berbagai bidang: - \u2705 Aplikasi Android - \u2705 Aplikasi Desktop (GUI) - \u2705 Aplikasi Web (Spring Boot) - \u2705 Sistem Enterprise (ERP, CRM) - \u2705 Internet of Things (IoT) - \u2705 Big Data dan Cloud Computing</p> <p>Bahkan beberapa perusahaan besar seperti Netflix, Spotify, dan Amazon menggunakan Java dalam sistem mereka.</p>"},{"location":"#apa-yang-akan-kamu-pelajari","title":"\ud83e\udde0 Apa yang Akan Kamu Pelajari?","text":"<p>Dokumentasi ini disusun untuk membimbingmu dari nol (pemula total) hingga menjadi mahir dan siap terjun ke industri.</p> <p>Kita akan belajar dari: - Dasar-dasar Java (struktur kode, variabel, kontrol alur) - OOP (Object-Oriented Programming) secara mendalam - Penanganan file dan database - Java di dunia nyata: Android &amp; Spring Boot - Tips dan praktik terbaik ala developer profesional</p>"},{"location":"#siapa-dokumentasi-ini-cocok-untuk","title":"\ud83d\udcda Siapa Dokumentasi Ini Cocok Untuk?","text":"<p>Dokumentasi ini cocok untuk: - Mahasiswa/i teknik informatika dan rekayasa perangkat lunak - Developer pemula yang ingin terjun ke Java - Profesional dari bahasa lain (Python, JS, dll) yang ingin ekspansi ke Java - Siapa pun yang ingin membuat aplikasi Android atau backend berbasis Java</p>"},{"location":"#persiapan-sebelum-memulai","title":"\ud83d\udee0\ufe0f Persiapan Sebelum Memulai","text":"<p>Sebelum kamu menyelam lebih dalam, pastikan kamu sudah mengatur lingkungan pengembangan. Jika belum, silakan lanjut ke halaman berikut:</p> <p>\u27a1\ufe0f Persiapan Lingkungan Java</p>"},{"location":"#tentang-penulis","title":"\u270d\ufe0f Tentang Penulis","text":"<p>Dokumentasi ini dibuat oleh Marno, mahasiswa Teknik Informatika yang juga aktif di dunia industri perkebunan sawit. Didasari semangat belajar dan berbagi, proyek ini terbuka untuk kontribusi dari siapa pun.</p> <p>\ud83d\udca1 \u201cMembagikan ilmu tak akan pernah membuat kita kehilangan apa-apa. Justru memperluas cakrawala kita dan orang lain.\u201d</p>"},{"location":"#lisensi","title":"\u2696\ufe0f Lisensi","text":"<p>Dokumentasi ini dilisensikan di bawah MIT License. Bebas digunakan untuk belajar, mengajar, atau dikembangkan lebih lanjut.</p>"},{"location":"#ayo-mulai","title":"\ud83d\ude80 Ayo Mulai!","text":"<p>Klik menu di sebelah kiri untuk mulai belajar dari bab pertama \u2014 dan mari kita kuasai Java bersama \ud83d\udcbb\ud83d\udd25</p>"},{"location":"setup/","title":"\ud83d\udee0\ufe0f Persiapan Lingkungan Pemrograman Java","text":"<p>Sebelum mulai menulis kode Java, kita perlu menyiapkan lingkungan pengembangan yang meliputi:</p> <ol> <li>Instalasi JDK (Java Development Kit)</li> <li>Instalasi IDE (Integrated Development Environment)</li> <li>Uji Coba Jalankan Program Pertama</li> </ol>"},{"location":"setup/#1-instalasi-jdk-java-development-kit","title":"1. \u2705 Instalasi JDK (Java Development Kit)","text":"<p>JDK adalah paket perangkat lunak yang berisi compiler, JVM (Java Virtual Machine), dan tools lainnya.</p>"},{"location":"setup/#unduh-jdk","title":"\ud83d\udd3d Unduh JDK","text":"<ul> <li> <p>Oracle JDK (resmi): https://www.oracle.com/java/technologies/javase-downloads.html</p> </li> <li> <p>Alternatif Open Source (lebih ringan):  </p> </li> <li>Adoptium (OpenJDK)</li> <li>Amazon Corretto</li> </ul> <p>\ud83d\udca1 Gunakan JDK versi 17 atau lebih baru untuk stabilitas dan fitur terkini.</p>"},{"location":"setup/#cara-instal-windowsmaclinux","title":"\ud83d\udda5\ufe0f Cara Instal (Windows/Mac/Linux)","text":"<ul> <li> <p>Windows:   Unduh file <code>.exe</code>, lalu jalankan seperti instalasi biasa. Setelah itu, tambahkan JDK ke <code>PATH</code>.</p> </li> <li> <p>Linux (Ubuntu):   ```bash   sudo apt update   sudo apt install openjdk-17-jdk ````</p> </li> <li> <p>MacOS:   Gunakan Homebrew</p> </li> </ul> <pre><code>brew install openjdk@17\n</code></pre>"},{"location":"setup/#verifikasi-instalasi","title":"\ud83d\udd0d Verifikasi Instalasi","text":"<p>Cek apakah Java sudah terinstal:</p> <pre><code>java -version\n</code></pre>"},{"location":"setup/#2-instalasi-ide-editor-kode","title":"2. \ud83d\udcbb Instalasi IDE (Editor Kode)","text":"<p>Agar lebih mudah menulis dan menjalankan Java, kita gunakan IDE.</p>"},{"location":"setup/#rekomendasi-ide","title":"Rekomendasi IDE:","text":"IDE Keterangan IntelliJ IDEA Powerful, lengkap, dan smart Eclipse Ringan dan fleksibel VS Code Modern, butuh plugin tambahan Java NetBeans Sudah built-in Java GUI support <p>\ud83d\udca1 Untuk pemula: IntelliJ IDEA Community Edition sangat direkomendasikan.</p>"},{"location":"setup/#3-menjalankan-program-pertama","title":"3. \ud83e\uddea Menjalankan Program Pertama","text":"<p>Buat file <code>HelloWorld.java</code>:</p> <pre><code>public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Halo, dunia!\");\n    }\n}\n</code></pre>"},{"location":"setup/#kompilasi-jalankan","title":"Kompilasi &amp; Jalankan","text":"<pre><code>javac HelloWorld.java   # Kompilasi\njava HelloWorld         # Jalankan\n</code></pre> <p>Jika berhasil, akan muncul:</p> <pre><code>Halo, dunia!\n</code></pre>"},{"location":"setup/#tips-tambahan","title":"\ud83d\udcdd Tips Tambahan","text":"<ul> <li>Gunakan folder khusus untuk proyek Java-mu.</li> <li>Simpan file dengan nama yang sama seperti kelasnya (<code>HelloWorld.java</code> untuk <code>class HelloWorld</code>)</li> <li>Jangan takut membuat kesalahan \u2014 debugging adalah bagian dari proses belajar!</li> </ul>"},{"location":"setup/#siap-belajar-java","title":"\ud83c\udf89 Siap Belajar Java!","text":"<p>Sekarang kamu sudah siap menulis dan menjalankan program Java. Mari lanjut ke materi pertama: Struktur Dasar Program Java</p> <p>\u27a1\ufe0f Lanjut ke Struktur Program Java</p>"},{"location":"dasar/expression/","title":"\ud83e\udde0 Ekspresi dalam Java","text":"<p>Ekspresi adalah kombinasi variabel, nilai, dan operator dalam Java yang menghasilkan nilai tunggal dengan tipe data tertentu (misalnya, <code>int</code>, <code>boolean</code>, <code>String</code>). Ekspresi merupakan elemen dasar dalam pemrograman yang digunakan untuk perhitungan, pengambilan keputusan, dan logika program. Bagian ini menjelaskan jenis-jenis ekspresi, perbedaan dengan statement, dan penggunaannya dalam Java.</p>"},{"location":"dasar/expression/#apa-itu-ekspresi","title":"\ud83d\udccc Apa Itu Ekspresi?","text":"<p>Ekspresi adalah pernyataan kode yang dievaluasi untuk menghasilkan nilai. Setiap ekspresi memiliki tipe data yang ditentukan oleh hasilnya, seperti <code>int</code>, <code>boolean</code>, atau <code>String</code>.</p>"},{"location":"dasar/expression/#contoh-ekspresi-sederhana","title":"Contoh Ekspresi Sederhana:","text":"<pre><code>public class ExpressionDemo {\n    public static void main(String[] args) {\n        int a = 5;\n        int b = 10;\n        int c = a + b; // Ekspresi a + b menghasilkan nilai 15\n        System.out.println(\"Hasil a + b = \" + c);\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Hasil a + b = 15\n</code></pre> <p>Dalam contoh di atas: - <code>5</code> dan <code>10</code>: Ekspresi literal. - <code>a + b</code>: Ekspresi aritmatika, menghasilkan nilai <code>15</code>. - <code>c = a + b</code>: Ekspresi penugasan, menetapkan hasil ke variabel <code>c</code>.</p>"},{"location":"dasar/expression/#jenis-jenis-ekspresi-dalam-java","title":"\ud83e\uddee Jenis-Jenis Ekspresi dalam Java","text":"<p>Berikut adalah jenis-jenis ekspresi yang umum digunakan di Java:</p> Jenis Ekspresi Contoh Penjelasan Literal <code>42</code>, <code>\"Halo\"</code>, <code>true</code> Nilai konstan atau tetap. Aritmatika <code>a + b</code>, <code>x * 10</code> Operasi matematika seperti penjumlahan, perkalian. Relasional <code>a &gt; b</code>, <code>x == y</code> Membandingkan nilai, menghasilkan <code>true</code>/<code>false</code>. Logika <code>a &gt; 5 &amp;&amp; b &lt; 10</code> Menggabungkan ekspresi boolean dengan <code>&amp;&amp;</code>, <code>||</code>. Penugasan <code>x = 7</code>, <code>total += 1</code> Menetapkan atau memperbarui nilai variabel. Unary <code>-a</code>, <code>!isBenar</code>, <code>++x</code> Operasi pada satu operand (misalnya, negasi). Ternary <code>(a &gt; b) ? a : b</code> Memilih nilai berdasarkan kondisi boolean. Method Call <code>System.out.println(\"Hi\")</code> Memanggil method, mungkin dengan efek samping. <p>\ud83d\udca1 Info: Beberapa ekspresi, seperti <code>x++</code> atau <code>System.out.println()</code>, memiliki efek samping (mengubah nilai variabel atau menghasilkan output).</p>"},{"location":"dasar/expression/#ekspresi-vs-statement","title":"\ud83d\udd01 Ekspresi vs. Statement","text":"<ul> <li>Ekspresi: Menghasilkan nilai tunggal dan memiliki tipe data (misalnya, <code>3 + 4</code> menghasilkan <code>7</code>).</li> <li>Statement: Pernyataan lengkap yang menjalankan aksi, bisa mengandung ekspresi (misalnya, <code>int x = 3 + 4;</code> adalah statement yang mengandung ekspresi <code>3 + 4</code>).</li> </ul>"},{"location":"dasar/expression/#contoh","title":"Contoh:","text":"<pre><code>public class ExprVsStmtDemo {\n    public static void main(String[] args) {\n        int x = 3 + 4; // Statement, dengan ekspresi 3 + 4\n        System.out.println(\"x = \" + x);\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>x = 7\n</code></pre>"},{"location":"dasar/expression/#penggunaan-ekspresi-dalam-struktur-kontrol","title":"\ud83e\uddea Penggunaan Ekspresi dalam Struktur Kontrol","text":"<p>Ekspresi sering digunakan dalam struktur kontrol seperti <code>if</code>, <code>while</code>, atau sebagai bagian dari pernyataan <code>return</code>.</p>"},{"location":"dasar/expression/#contoh-dalam-if-dan-while","title":"Contoh dalam <code>if</code> dan <code>while</code>:","text":"<pre><code>public class ControlFlowExprDemo {\n    public static void main(String[] args) {\n        int nilai = 75;\n        if (nilai &gt;= 75) { // Ekspresi relasional: nilai &gt;= 75\n            System.out.println(\"Lulus\");\n        }\n\n        int i = 0;\n        while (i &lt; 3) { // Ekspresi relasional: i &lt; 3\n            System.out.println(\"Iterasi: \" + i);\n            i++; // Ekspresi unary: i++\n        }\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Lulus\nIterasi: 0\nIterasi: 1\nIterasi: 2\n</code></pre>"},{"location":"dasar/expression/#contoh-dengan-operator-ternary","title":"Contoh dengan Operator Ternary:","text":"<pre><code>public class TernaryDemo {\n    public static void main(String[] args) {\n        int a = 10, b = 5;\n        int max = (a &gt; b) ? a : b; // Ekspresi ternary\n        System.out.println(\"Nilai maksimum: \" + max);\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Nilai maksimum: 10\n</code></pre>"},{"location":"dasar/expression/#mengapa-ekspresi-penting","title":"\ud83d\udccc Mengapa Ekspresi Penting?","text":"<p>Memahami ekspresi penting karena:</p> <ul> <li>Kode yang Ringkas: Ekspresi memungkinkan penulisan kode yang efisien dan langsung.</li> <li>Dasar Logika Program: Ekspresi digunakan dalam perhitungan, pengambilan keputusan, dan perulangan.</li> <li>Debugging: Memahami tipe data dan hasil ekspresi membantu menemukan kesalahan logika.</li> <li>Fleksibilitas: Ekspresi dapat digabungkan untuk membentuk logika kompleks.</li> </ul>"},{"location":"dasar/expression/#tips","title":"\ud83d\udca1 Tips","text":"<ul> <li>Pastikan ekspresi memiliki tipe data yang sesuai dengan konteks penggunaannya (misalnya, <code>boolean</code> untuk <code>if</code>).</li> <li>Waspadai efek samping pada ekspresi seperti <code>x++</code> atau pemanggilan method.</li> <li>Gunakan tanda kurung <code>()</code> untuk mengatur prioritas operasi dalam ekspresi kompleks, seperti <code>(a + b) * c</code>.</li> <li>Bedakan ekspresi dari statement untuk memahami struktur kode dengan lebih baik.</li> </ul>"},{"location":"dasar/expression/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"<p>Berikut adalah ringkasan konsep ekspresi dalam Java:</p> Konsep Penjelasan Ekspresi Pernyataan kode yang menghasilkan nilai tunggal. Jenis Umum Literal, aritmatika, relasional, logika, dll. Digunakan di Penugasan, perulangan, percabangan, dan return. Penting untuk Logika program, debugging, dan efisiensi kode. <p>Ekspresi adalah fondasi penting untuk membangun logika dan fungsionalitas dalam program Java.</p>"},{"location":"dasar/expression/#langkah-selanjutnya","title":"\ud83d\udcda Langkah Selanjutnya","text":"<p>Pelajari lebih lanjut tentang Konsep OOP: Object-Oriented Programming untuk memahami cara membangun program berbasis objek.</p>"},{"location":"dasar/kontrol_alur/","title":"\ud83d\udd00 Kontrol Alur dalam Java (if, else, switch)","text":"<p>Kontrol alur memungkinkan program Java membuat keputusan berdasarkan kondisi tertentu. Dengan struktur seperti <code>if</code>, <code>else</code>, <code>else if</code>, dan <code>switch</code>, program dapat mengeksekusi blok kode yang berbeda sesuai dengan logika yang ditentukan. Bagian ini menjelaskan cara menggunakan struktur kontrol alur untuk membuat program yang lebih dinamis dan responsif.</p>"},{"location":"dasar/kontrol_alur/#1-pernyataan-if","title":"\ud83e\udde0 1. Pernyataan <code>if</code>","text":"<p>Pernyataan <code>if</code> mengeksekusi blok kode jika kondisi tertentu bernilai <code>true</code>.</p>"},{"location":"dasar/kontrol_alur/#struktur","title":"Struktur:","text":"<pre><code>if (kondisi) {\n    // Kode dijalankan jika kondisi true\n}\n</code></pre>"},{"location":"dasar/kontrol_alur/#contoh","title":"Contoh:","text":"<pre><code>public class IfDemo {\n    public static void main(String[] args) {\n        int usia = 20;\n        if (usia &gt;= 18) {\n            System.out.println(\"Anda sudah dewasa.\");\n        }\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Anda sudah dewasa.\n</code></pre>"},{"location":"dasar/kontrol_alur/#2-pernyataan-if-else","title":"\ud83d\udd00 2. Pernyataan <code>if-else</code>","text":"<p>Pernyataan <code>else</code> menangani kasus ketika kondisi <code>if</code> bernilai <code>false</code>.</p>"},{"location":"dasar/kontrol_alur/#struktur_1","title":"Struktur:","text":"<pre><code>if (kondisi) {\n    // Kode dijalankan jika kondisi true\n} else {\n    // Kode dijalankan jika kondisi false\n}\n</code></pre>"},{"location":"dasar/kontrol_alur/#contoh_1","title":"Contoh:","text":"<pre><code>public class IfElseDemo {\n    public static void main(String[] args) {\n        int nilai = 55;\n        if (nilai &gt;= 60) {\n            System.out.println(\"Lulus\");\n        } else {\n            System.out.println(\"Tidak Lulus\");\n        }\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Tidak Lulus\n</code></pre>"},{"location":"dasar/kontrol_alur/#3-pernyataan-if-else-if-else","title":"\ud83e\uddf1 3. Pernyataan <code>if-else if-else</code>","text":"<p>Pernyataan <code>else if</code> digunakan untuk mengevaluasi beberapa kondisi secara berurutan. Jika semua kondisi <code>if</code> dan <code>else if</code> bernilai <code>false</code>, blok <code>else</code> (jika ada) akan dijalankan.</p>"},{"location":"dasar/kontrol_alur/#struktur_2","title":"Struktur:","text":"<pre><code>if (kondisi1) {\n    // Kode untuk kondisi1 true\n} else if (kondisi2) {\n    // Kode untuk kondisi2 true\n} else {\n    // Kode default jika semua kondisi false\n}\n</code></pre>"},{"location":"dasar/kontrol_alur/#contoh_2","title":"Contoh:","text":"<pre><code>public class IfElseIfDemo {\n    public static void main(String[] args) {\n        int nilai = 80;\n        if (nilai &gt;= 90) {\n            System.out.println(\"Grade: A\");\n        } else if (nilai &gt;= 80) {\n            System.out.println(\"Grade: B\");\n        } else if (nilai &gt;= 70) {\n            System.out.println(\"Grade: C\");\n        } else {\n            System.out.println(\"Grade: D\");\n        }\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Grade: B\n</code></pre>"},{"location":"dasar/kontrol_alur/#4-operator-logika-dalam-if","title":"\ud83c\udf9b\ufe0f 4. Operator Logika dalam <code>if</code>","text":"<p>Operator logika seperti <code>&amp;&amp;</code> (AND), <code>||</code> (OR), dan <code>!</code> (NOT) digunakan untuk menggabungkan beberapa kondisi dalam pernyataan <code>if</code>.</p> Operator Fungsi Contoh Hasil <code>&amp;&amp;</code> AND <code>(x &gt; 10 &amp;&amp; x &lt; 20)</code> <code>true</code> jika keduanya benar <code>||</code> OR <code>(x &lt; 5 || x &gt; 15)</code> <code>true</code> jika salah satu benar <code>!</code> NOT <code>!true</code> <code>false</code>"},{"location":"dasar/kontrol_alur/#contoh_3","title":"Contoh:","text":"<pre><code>public class LogicalOperatorDemo {\n    public static void main(String[] args) {\n        int x = 15;\n        if (x &gt; 10 &amp;&amp; x &lt; 20) {\n            System.out.println(\"x berada di antara 10 dan 20\");\n        }\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>x berada di antara 10 dan 20\n</code></pre>"},{"location":"dasar/kontrol_alur/#5-pernyataan-switch","title":"\ud83c\udf9a\ufe0f 5. Pernyataan <code>switch</code>","text":"<p>Pernyataan <code>switch</code> adalah alternatif untuk <code>if-else</code> berantai, cocok untuk mengevaluasi satu variabel terhadap beberapa nilai konstan.</p>"},{"location":"dasar/kontrol_alur/#struktur_3","title":"Struktur:","text":"<pre><code>switch (variabel) {\n    case nilai1:\n        // Kode untuk nilai1\n        break;\n    case nilai2:\n        // Kode untuk nilai2\n        break;\n    default:\n        // Kode default jika tidak ada case yang cocok\n}\n</code></pre> <ul> <li><code>break</code>: Menghentikan eksekusi <code>switch</code> setelah case cocok.</li> <li><code>default</code>: Opsional, dijalankan jika tidak ada <code>case</code> yang cocok.</li> </ul>"},{"location":"dasar/kontrol_alur/#contoh_4","title":"Contoh:","text":"<pre><code>public class SwitchDemo {\n    public static void main(String[] args) {\n        int hari = 3;\n        switch (hari) {\n            case 1:\n                System.out.println(\"Senin\");\n                break;\n            case 2:\n                System.out.println(\"Selasa\");\n                break;\n            case 3:\n                System.out.println(\"Rabu\");\n                break;\n            default:\n                System.out.println(\"Hari tidak diketahui\");\n        }\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Rabu\n</code></pre> <p>\ud83d\udca1 Tips: Lupa menambahkan <code>break</code> akan menyebabkan eksekusi berlanjut ke <code>case</code> berikutnya (fall-through), yang bisa menjadi bug jika tidak diinginkan.</p>"},{"location":"dasar/kontrol_alur/#studi-kasus-menentukan-ganjilgenap","title":"\ud83e\uddea Studi Kasus: Menentukan Ganjil/Genap","text":"<p>Berikut adalah contoh program untuk menentukan apakah sebuah angka ganjil atau genap menggunakan <code>if-else</code>:</p> <pre><code>public class GanjilGenap {\n    public static void main(String[] args) {\n        int angka = 7;\n        if (angka % 2 == 0) {\n            System.out.println(\"Angka \" + angka + \" adalah genap\");\n        } else {\n            System.out.println(\"Angka \" + angka + \" adalah ganjil\");\n        }\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Angka 7 adalah ganjil\n</code></pre>"},{"location":"dasar/kontrol_alur/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"<p>Struktur kontrol alur memungkinkan program Java membuat keputusan berdasarkan kondisi:</p> Struktur Kegunaan <code>if</code> Mengevaluasi kondisi tunggal <code>else</code> Menangani kasus ketika kondisi <code>if</code> salah <code>else if</code> Mengevaluasi beberapa kondisi secara berurutan <code>switch</code> Menangani banyak nilai konstan dengan rapi <p>\ud83d\udccc Catatan: Gunakan <code>switch</code> untuk nilai diskrit (seperti angka atau enum) dan <code>if-else</code> untuk kondisi yang lebih kompleks atau rentang nilai.</p>"},{"location":"dasar/kontrol_alur/#langkah-selanjutnya","title":"\ud83d\udcda Langkah Selanjutnya","text":"<p>Pelajari lebih lanjut tentang Konsep OOP: Object-Oriented Programming untuk memahami cara membangun program berbasis objek.</p>"},{"location":"dasar/method/","title":"\ud83d\udd27 Method dan Parameter dalam Java","text":"<p>Method adalah blok kode yang dirancang untuk melakukan tugas tertentu dan dapat digunakan kembali dalam program. Method membantu menjaga kode tetap terorganisir, mengurangi duplikasi, dan mempermudah pengulangan logika tanpa menulis ulang kode. Bagian ini menjelaskan struktur method, cara memanggilnya, penggunaan parameter, nilai kembalian, dan konsep method overloading.</p>"},{"location":"dasar/method/#struktur-dasar-method","title":"\ud83e\uddf1 Struktur Dasar Method","text":"<p>Method didefinisikan dengan struktur berikut:</p> <pre><code>tipeKembalian namaMethod(tipeParameter1 param1, tipeParameter2 param2, ...) {\n    // Blok kode\n    // (opsional) return nilai;\n}\n</code></pre> <ul> <li>Tipe Kembalian: Tipe data hasil method (misalnya, <code>int</code>, <code>String</code>, atau <code>void</code> jika tidak mengembalikan nilai).</li> <li>Nama Method: Nama unik untuk method, mengikuti aturan penamaan variabel (camelCase).</li> <li>Parameter: Data masukan (opsional) yang diterima method.</li> <li>Blok Kode: Logika yang dijalankan oleh method.</li> <li>Return: Mengembalikan nilai (jika tipe kembalian bukan <code>void</code>).</li> </ul>"},{"location":"dasar/method/#contoh-method-tanpa-parameter-dan-nilai-kembalian","title":"Contoh Method Tanpa Parameter dan Nilai Kembalian:","text":"<pre><code>void sapa() {\n    System.out.println(\"Halo, Dunia!\");\n}\n</code></pre> <p>Method <code>sapa()</code> bertipe <code>void</code> (tidak mengembalikan nilai) dan tidak menerima parameter.</p>"},{"location":"dasar/method/#memanggil-method","title":"\ud83d\udd01 Memanggil Method","text":"<p>Untuk menjalankan method, panggil namanya di dalam program. Method harus didefinisikan dalam kelas dan dapat dipanggil dari method lain, seperti <code>main</code>.</p>"},{"location":"dasar/method/#contoh-program","title":"Contoh Program:","text":"<pre><code>public class MethodDemo {\n    static void sapa() {\n        System.out.println(\"Halo, Dunia!\");\n    }\n\n    public static void main(String[] args) {\n        sapa(); // Memanggil method sapa\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Halo, Dunia!\n</code></pre> <p>\ud83d\udccc Catatan: Keyword <code>static</code> memungkinkan method dipanggil tanpa membuat objek kelas. Untuk method non-static, Anda perlu membuat instance kelas terlebih dahulu.</p>"},{"location":"dasar/method/#method-dengan-parameter","title":"\ud83c\udfaf Method dengan Parameter","text":"<p>Parameter memungkinkan method menerima data masukan untuk diproses. Parameter didefinisikan dengan tipe data dan nama.</p>"},{"location":"dasar/method/#contoh-method-dengan-parameter","title":"Contoh Method dengan Parameter:","text":"<pre><code>static void sapa(String nama) {\n    System.out.println(\"Halo, \" + nama + \"!\");\n}\n</code></pre>"},{"location":"dasar/method/#contoh-pemanggilan","title":"Contoh Pemanggilan:","text":"<pre><code>public class MethodParamDemo {\n    static void sapa(String nama) {\n        System.out.println(\"Halo, \" + nama + \"!\");\n    }\n\n    public static void main(String[] args) {\n        sapa(\"Marno\"); // Memanggil dengan parameter \"Marno\"\n        sapa(\"Dunia\"); // Memanggil dengan parameter \"Dunia\"\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Halo, Marno!\nHalo, Dunia!\n</code></pre>"},{"location":"dasar/method/#method-dengan-nilai-kembalian","title":"\ud83d\udd01 Method dengan Nilai Kembalian","text":"<p>Method dapat mengembalikan nilai menggunakan kata kunci <code>return</code>. Tipe kembalian harus sesuai dengan tipe data yang dideklarasikan.</p>"},{"location":"dasar/method/#contoh-method-dengan-nilai-kembalian","title":"Contoh Method dengan Nilai Kembalian:","text":"<pre><code>static int tambah(int a, int b) {\n    return a + b;\n}\n</code></pre>"},{"location":"dasar/method/#contoh-program_1","title":"Contoh Program:","text":"<pre><code>public class MethodReturnDemo {\n    static int tambah(int a, int b) {\n        return a + b;\n    }\n\n    public static void main(String[] args) {\n        int hasil = tambah(5, 3); // Menyimpan hasil kembalian\n        System.out.println(\"Hasil = \" + hasil);\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Hasil = 8\n</code></pre> <p>\ud83d\udca1 Tips: Gunakan <code>return</code> untuk mengakhiri eksekusi method dan mengembalikan nilai. Jika tipe kembalian adalah <code>void</code>, <code>return</code> bersifat opsional dan digunakan untuk keluar dari method.</p>"},{"location":"dasar/method/#method-overloading","title":"\ud83d\udd00 Method Overloading","text":"<p>Method overloading memungkinkan definisi beberapa method dengan nama sama tetapi parameter berbeda (dalam jumlah atau tipe). Java akan memilih method yang sesuai berdasarkan parameter yang diberikan saat pemanggilan.</p>"},{"location":"dasar/method/#contoh-method-overloading","title":"Contoh Method Overloading:","text":"<pre><code>public class MethodOverloadDemo {\n    static void cetak(String teks) {\n        System.out.println(\"Teks: \" + teks);\n    }\n\n    static void cetak(int angka) {\n        System.out.println(\"Angka: \" + angka);\n    }\n\n    public static void main(String[] args) {\n        cetak(\"Hai\"); // Memanggil method dengan parameter String\n        cetak(5);    // Memanggil method dengan parameter int\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Teks: Hai\nAngka: 5\n</code></pre> <p>\ud83d\udccc Catatan: Overloading tidak bergantung pada tipe kembalian, hanya pada jumlah dan tipe parameter.</p>"},{"location":"dasar/method/#studi-kasus-menghitung-luas-persegi-panjang","title":"\ud83d\udcda Studi Kasus: Menghitung Luas Persegi Panjang","text":"<p>Berikut adalah contoh program untuk menghitung luas persegi panjang menggunakan method dengan parameter dan nilai kembalian:</p> <pre><code>public class LuasPersegiPanjang {\n    static int hitungLuas(int panjang, int lebar) {\n        return panjang * lebar;\n    }\n\n    public static void main(String[] args) {\n        int luas = hitungLuas(5, 3);\n        System.out.println(\"Luas persegi panjang = \" + luas + \" cm\u00b2\");\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Luas persegi panjang = 15 cm\u00b2\n</code></pre>"},{"location":"dasar/method/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"<p>Berikut adalah ringkasan konsep method di Java:</p> Konsep Penjelasan Method Blok kode untuk tugas tertentu, dapat digunakan ulang Parameter Data masukan yang diterima method Nilai Kembalian Nilai yang dihasilkan method menggunakan <code>return</code> Overloading Method dengan nama sama tetapi parameter berbeda <p>Method adalah fondasi penting untuk membuat kode yang modular dan efisien.</p>"},{"location":"dasar/method/#langkah-selanjutnya","title":"\ud83d\udcda Langkah Selanjutnya","text":"<p>Pelajari lebih lanjut tentang Konsep OOP: Object-Oriented Programming untuk memahami cara membangun program berbasis objek.</p>"},{"location":"dasar/operator/","title":"\u2795 Operator dan Ekspresi dalam Java","text":"<p>Operator adalah simbol atau kata kunci yang digunakan untuk melakukan operasi terhadap variabel atau nilai dalam Java. Ekspresi adalah kombinasi dari variabel, nilai, dan operator yang menghasilkan nilai baru. Bagian ini menjelaskan jenis-jenis operator utama di Java dan cara penggunaannya dalam program.</p>"},{"location":"dasar/operator/#jenis-jenis-operator-di-java","title":"\ud83c\udf9b\ufe0f Jenis-Jenis Operator di Java","text":"<p>Java menyediakan beberapa kategori operator untuk berbagai keperluan, mulai dari operasi matematika hingga logika.</p>"},{"location":"dasar/operator/#1-operator-aritmatika","title":"1. \ud83e\uddee Operator Aritmatika","text":"<p>Operator aritmatika digunakan untuk operasi matematika dasar.</p> Operator Nama Contoh (<code>a = 10</code>, <code>b = 3</code>) Hasil <code>+</code> Penjumlahan <code>a + b</code> <code>13</code> <code>-</code> Pengurangan <code>a - b</code> <code>7</code> <code>*</code> Perkalian <code>a * b</code> <code>30</code> <code>/</code> Pembagian <code>a / b</code> <code>3</code> <code>%</code> Modulo (sisa bagi) <code>a % b</code> <code>1</code> <p>\ud83d\udca1 Tips: Operator modulo (<code>%</code>) sering digunakan untuk mengecek bilangan genap/ganjil. Contoh: <code>if (x % 2 == 0)</code> untuk mengecek bilangan genap.</p>"},{"location":"dasar/operator/#2-operator-perbandingan-relasional","title":"2. \u2696\ufe0f Operator Perbandingan (Relasional)","text":"<p>Operator perbandingan digunakan untuk membandingkan dua nilai dan menghasilkan nilai boolean (<code>true</code> atau <code>false</code>).</p> Operator Arti Contoh (<code>a = 10</code>, <code>b = 3</code>) <code>==</code> Sama dengan <code>a == b</code> \u2192 <code>false</code> <code>!=</code> Tidak sama dengan <code>a != b</code> \u2192 <code>true</code> <code>&gt;</code> Lebih besar <code>a &gt; b</code> \u2192 <code>true</code> <code>&lt;</code> Lebih kecil <code>a &lt; b</code> \u2192 <code>false</code> <code>&gt;=</code> Lebih besar atau sama dengan <code>a &gt;= b</code> \u2192 <code>true</code> <code>&lt;=</code> Lebih kecil atau sama dengan <code>a &lt;= b</code> \u2192 <code>false</code>"},{"location":"dasar/operator/#3-operator-logika-boolean","title":"3. \ud83d\udca1 Operator Logika (Boolean)","text":"<p>Operator logika digunakan untuk menggabungkan ekspresi boolean, sering digunakan dalam struktur seperti <code>if</code> atau <code>while</code>.</p> Operator Nama Contoh Hasil <code>&amp;&amp;</code> AND <code>true &amp;&amp; false</code> <code>false</code> <code>||</code> OR <code>true || false</code> <code>true</code> <code>!</code> NOT <code>!true</code> <code>false</code> <p>\ud83d\udccc Catatan: Operator <code>&amp;&amp;</code> hanya mengembalikan <code>true</code> jika kedua kondisi benar, sedangkan <code>||</code> mengembalikan <code>true</code> jika salah satu kondisi benar.</p>"},{"location":"dasar/operator/#4-operator-penugasan","title":"4. \ud83d\udd8a\ufe0f Operator Penugasan","text":"<p>Operator penugasan digunakan untuk menetapkan atau memperbarui nilai variabel.</p> Operator Contoh Sama Dengan <code>=</code> <code>x = 5</code> Menetapkan 5 ke <code>x</code> <code>+=</code> <code>x += 2</code> <code>x = x + 2</code> <code>-=</code> <code>x -= 2</code> <code>x = x - 2</code> <code>*=</code> <code>x *= 2</code> <code>x = x * 2</code> <code>/=</code> <code>x /= 2</code> <code>x = x / 2</code> <code>%=</code> <code>x %= 2</code> <code>x = x % 2</code>"},{"location":"dasar/operator/#5-operator-inkrement-dan-dekrement","title":"5. \u2b06\ufe0f Operator Inkrement dan Dekrement","text":"<p>Operator inkrement dan dekrement digunakan untuk menambah atau mengurangi nilai variabel sebesar 1.</p> Operator Contoh Efek <code>++</code> <code>x++</code> Menambah <code>x</code> sebesar 1 <code>--</code> <code>x--</code> Mengurangi <code>x</code> sebesar 1 <p>\ud83d\udca1 Info: - <code>x++</code> (post-increment) mengembalikan nilai <code>x</code> sebelum ditambah. - <code>++x</code> (pre-increment) mengembalikan nilai <code>x</code> setelah ditambah. Contoh: Jika <code>x = 5</code>, maka <code>System.out.println(x++)</code> mencetak <code>5</code>, tetapi <code>System.out.println(++x)</code> mencetak <code>6</code>.</p>"},{"location":"dasar/operator/#contoh-program","title":"\ud83e\uddea Contoh Program","text":"<p>Berikut adalah contoh program yang menggunakan berbagai jenis operator:</p> <pre><code>public class OperatorDemo {\n    public static void main(String[] args) {\n        int a = 10, b = 3;\n        boolean hasil;\n\n        // Operator Aritmatika\n        System.out.println(\"a + b = \" + (a + b)); // Penjumlahan\n        System.out.println(\"a % b = \" + (a % b)); // Modulo\n\n        // Operator Perbandingan\n        System.out.println(\"a &gt; b = \" + (a &gt; b)); // Lebih besar\n\n        // Operator Logika\n        hasil = (a &gt; 5) &amp;&amp; (b &lt; 5);\n        System.out.println(\"Logika AND (a &gt; 5 &amp;&amp; b &lt; 5): \" + hasil);\n\n        // Operator Penugasan\n        int x = 5;\n        x += 3;\n        System.out.println(\"x setelah += 3: \" + x);\n\n        // Operator Inkrement\n        x++;\n        System.out.println(\"x setelah x++: \" + x);\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>a + b = 13\na % b = 1\na &gt; b = true\nLogika AND (a &gt; 5 &amp;&amp; b &lt; 5): true\nx setelah += 3: 8\nx setelah x++: 9\n</code></pre>"},{"location":"dasar/operator/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"<ul> <li>Java menyediakan berbagai jenis operator: aritmatika, perbandingan, logika, penugasan, dan inkrement/dekrement.</li> <li>Operator digunakan untuk membentuk ekspresi yang menghasilkan nilai baru.</li> <li>Pemahaman operator penting untuk memanipulasi data dan membuat logika dalam program.</li> </ul>"},{"location":"dasar/operator/#langkah-selanjutnya","title":"\ud83d\udcda Langkah Selanjutnya","text":"<p>Pelajari lebih lanjut tentang Kontrol Alur: If, Else, dan Switch untuk memahami cara mengatur alur program berdasarkan kondisi.</p>"},{"location":"dasar/perulangan/","title":"\ud83d\udd01 Perulangan (Loop) dalam Java","text":"<p>Perulangan memungkinkan eksekusi blok kode secara berulang selama kondisi tertentu terpenuhi. Java menyediakan tiga jenis perulangan utama: <code>for</code>, <code>while</code>, dan <code>do-while</code>. Selain itu, terdapat mekanisme seperti <code>break</code>, <code>continue</code>, dan perulangan bersarang untuk mengontrol alur perulangan.</p>"},{"location":"dasar/perulangan/#1-perulangan-for","title":"1. \ud83d\udd03 Perulangan <code>for</code>","text":"<p>Perulangan <code>for</code> digunakan ketika jumlah iterasi sudah diketahui sebelumnya.</p>"},{"location":"dasar/perulangan/#struktur","title":"Struktur:","text":"<pre><code>for (inisialisasi; kondisi; perubahan) {\n    // Blok kode yang diulang\n}\n</code></pre> <ul> <li>Inisialisasi: Menyiapkan variabel pengontrol (misalnya, <code>int i = 1</code>).</li> <li>Kondisi: Mengevaluasi apakah perulangan harus dilanjutkan (misalnya, <code>i &lt;= 5</code>).</li> <li>Perubahan: Memperbarui nilai variabel pengontrol (misalnya, <code>i++</code>).</li> </ul>"},{"location":"dasar/perulangan/#contoh","title":"Contoh:","text":"<pre><code>for (int i = 1; i &lt;= 5; i++) {\n    System.out.println(\"Iterasi ke-\" + i);\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Iterasi ke-1\nIterasi ke-2\nIterasi ke-3\nIterasi ke-4\nIterasi ke-5\n</code></pre>"},{"location":"dasar/perulangan/#2-perulangan-while","title":"2. \u267b\ufe0f Perulangan <code>while</code>","text":"<p>Perulangan <code>while</code> digunakan ketika jumlah iterasi tidak diketahui secara pasti, tetapi perulangan berlanjut selama kondisi tertentu terpenuhi.</p>"},{"location":"dasar/perulangan/#struktur_1","title":"Struktur:","text":"<pre><code>while (kondisi) {\n    // Blok kode yang diulang\n}\n</code></pre>"},{"location":"dasar/perulangan/#contoh_1","title":"Contoh:","text":"<pre><code>int i = 1;\nwhile (i &lt;= 3) {\n    System.out.println(\"i = \" + i);\n    i++;\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>i = 1\ni = 2\ni = 3\n</code></pre> <p>\ud83d\udccc Catatan: Pastikan kondisi dalam <code>while</code> akan berhenti pada suatu titik untuk menghindari infinite loop.</p>"},{"location":"dasar/perulangan/#3-perulangan-do-while","title":"3. \ud83d\udd04 Perulangan <code>do-while</code>","text":"<p>Perulangan <code>do-while</code> menjalankan blok kode minimal satu kali sebelum memeriksa kondisi.</p>"},{"location":"dasar/perulangan/#struktur_2","title":"Struktur:","text":"<pre><code>do {\n    // Blok kode yang diulang\n} while (kondisi);\n</code></pre>"},{"location":"dasar/perulangan/#contoh_2","title":"Contoh:","text":"<pre><code>int i = 1;\ndo {\n    System.out.println(\"Cetak ke-\" + i);\n    i++;\n} while (i &lt;= 2);\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Cetak ke-1\nCetak ke-2\n</code></pre> <p>\ud83d\udca1 Info: Perulangan <code>do-while</code> cocok untuk kasus di mana kode harus dijalankan setidaknya sekali, seperti meminta input pengguna hingga valid.</p>"},{"location":"dasar/perulangan/#4-perulangan-bersarang-nested-loop","title":"4. \ud83d\udd02 Perulangan Bersarang (Nested Loop)","text":"<p>Perulangan bersarang adalah perulangan di dalam perulangan lain. Biasanya digunakan untuk pola data kompleks, seperti tabel atau matriks.</p>"},{"location":"dasar/perulangan/#contoh_3","title":"Contoh:","text":"<pre><code>for (int i = 1; i &lt;= 3; i++) {\n    for (int j = 1; j &lt;= 2; j++) {\n        System.out.println(\"i = \" + i + \", j = \" + j);\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>i = 1, j = 1\ni = 1, j = 2\ni = 2, j = 1\ni = 2, j = 2\ni = 3, j = 1\ni = 3, j = 2\n</code></pre>"},{"location":"dasar/perulangan/#5-pengendalian-perulangan-break-dan-continue","title":"5. \u26d4 Pengendalian Perulangan: <code>break</code> dan <code>continue</code>","text":""},{"location":"dasar/perulangan/#break","title":"<code>break</code>","text":"<p>Perintah <code>break</code> menghentikan perulangan sepenuhnya saat kondisi tertentu terpenuhi.</p> <pre><code>for (int i = 1; i &lt;= 5; i++) {\n    if (i == 3) {\n        break;\n    }\n    System.out.println(\"i = \" + i);\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>i = 1\ni = 2\n</code></pre>"},{"location":"dasar/perulangan/#continue","title":"<code>continue</code>","text":"<p>Perintah <code>continue</code> melewati iterasi saat ini dan melanjutkan ke iterasi berikutnya.</p> <pre><code>for (int i = 1; i &lt;= 5; i++) {\n    if (i == 3) {\n        continue;\n    }\n    System.out.println(\"i = \" + i);\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>i = 1\ni = 2\ni = 4\ni = 5\n</code></pre>"},{"location":"dasar/perulangan/#studi-kasus-menjumlahkan-5-bilangan","title":"\ud83e\uddea Studi Kasus: Menjumlahkan 5 Bilangan","text":"<p>Berikut adalah contoh program untuk menjumlahkan bilangan dari 1 hingga 5 menggunakan perulangan <code>for</code>:</p> <pre><code>public class JumlahBilangan {\n    public static void main(String[] args) {\n        int total = 0;\n        for (int i = 1; i &lt;= 5; i++) {\n            total += i;\n        }\n        System.out.println(\"Total = \" + total);\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Total = 15\n</code></pre>"},{"location":"dasar/perulangan/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"<p>Perulangan adalah alat penting dalam pemrograman untuk menjalankan kode berulang kali. Berikut adalah ringkasan jenis perulangan di Java:</p> Jenis Perulangan Kapan Digunakan <code>for</code> Jumlah iterasi diketahui sebelumnya <code>while</code> Jumlah iterasi tidak diketahui pasti <code>do-while</code> Blok kode dijalankan minimal satu kali <code>break</code> Menghentikan perulangan sepenuhnya <code>continue</code> Melewati satu iterasi dan melanjutkan lainnya <p>\ud83d\udca1 Tips: Gunakan perulangan yang sesuai dengan kebutuhan program Anda untuk menjaga kode tetap efisien dan mudah dibaca.</p>"},{"location":"dasar/perulangan/#langkah-selanjutnya","title":"\ud83d\udcda Langkah Selanjutnya","text":"<p>Pelajari lebih lanjut tentang Method dan Parameter dalam Java untuk memahami cara membuat fungsi dalam program.</p>"},{"location":"dasar/struktur/","title":"\ud83e\uddf1 Struktur Dasar Program Java","text":"<p>Sebelum membangun aplikasi besar, penting untuk memahami fondasi penulisan kode dalam bahasa pemrograman Java. Bagian ini akan menjelaskan struktur dasar program Java dengan contoh sederhana dan penjelasan rinci.</p>"},{"location":"dasar/struktur/#contoh-program-java-sederhana","title":"\ud83d\udd0d Contoh Program Java Sederhana","text":"<p>Berikut adalah contoh program Java paling dasar yang menampilkan teks \"Halo, dunia!\" ke layar:</p> <pre><code>public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Halo, dunia!\");\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Halo, dunia!\n</code></pre>"},{"location":"dasar/struktur/#penjelasan-baris-per-baris","title":"\ud83e\udde9 Penjelasan Baris per Baris","text":"<p>Mari kita bedah setiap baris dari kode di atas untuk memahami struktur dasarnya.</p>"},{"location":"dasar/struktur/#1-public-class-helloworld","title":"1. <code>public class HelloWorld</code>","text":"<ul> <li><code>class</code>: Mendefinisikan sebuah kelas, yang merupakan wadah utama untuk kode dalam Java.</li> <li><code>HelloWorld</code>: Nama kelas, yang harus sama dengan nama file (dalam hal ini, <code>HelloWorld.java</code>).</li> <li><code>public</code>: Menandakan bahwa kelas ini dapat diakses dari mana saja.</li> </ul> <p>\ud83d\udccc Catatan: Satu file <code>.java</code> hanya boleh memiliki satu <code>public class</code>, dan nama file harus identik dengan nama kelas tersebut.</p>"},{"location":"dasar/struktur/#2-public-static-void-mainstring-args","title":"2. <code>public static void main(String[] args)</code>","text":"<ul> <li><code>public</code>: Method ini dapat diakses dari luar kelas.</li> <li><code>static</code>: Method dapat dijalankan tanpa perlu membuat objek dari kelas.</li> <li><code>void</code>: Method tidak mengembalikan nilai apa pun.</li> <li><code>main</code>: Nama method yang menjadi titik masuk (entry point) program Java.</li> <li><code>String[] args</code>: Parameter untuk menerima argumen dari command line.</li> </ul> <p>\ud83d\udca1 Info: Method <code>main</code> wajib ada dalam setiap program Java yang dapat dijalankan. Tanpa method ini, program tidak akan bisa dijalankan.</p>"},{"location":"dasar/struktur/#3-systemoutprintlnhalo-dunia","title":"3. <code>System.out.println(\"Halo, dunia!\");</code>","text":"<ul> <li><code>System</code>: Kelas bawaan Java untuk mengakses fungsi sistem standar.</li> <li><code>out</code>: Objek yang mewakili output standar (biasanya layar atau konsol).</li> <li><code>println</code>: Method untuk mencetak teks ke layar dan menambahkan baris baru setelahnya.</li> </ul>"},{"location":"dasar/struktur/#struktur-file-dan-folder","title":"\ud83d\udcc1 Struktur File dan Folder","text":"<p>Struktur file yang umum digunakan untuk program Java sederhana adalah sebagai berikut:</p> <pre><code>BelajarJava/\n\u2514\u2500\u2500 HelloWorld.java\n</code></pre> <p>Catatan: Pastikan file <code>.java</code> disimpan dengan nama yang sesuai dengan nama kelas <code>public</code>.</p>"},{"location":"dasar/struktur/#cara-kompilasi-dan-menjalankan-program","title":"\ud83d\udee0\ufe0f Cara Kompilasi dan Menjalankan Program","text":"<p>Berikut adalah langkah-langkah untuk mengompilasi dan menjalankan program Java:</p>"},{"location":"dasar/struktur/#1-kompilasi-program","title":"1. Kompilasi Program","text":"<p>Gunakan perintah berikut untuk mengompilasi file <code>HelloWorld.java</code>:</p> <pre><code>javac HelloWorld.java\n</code></pre> <p>\ud83d\udce6 Hasil: Jika tidak ada error, akan dihasilkan file <code>HelloWorld.class</code>, yang merupakan bytecode yang dapat dijalankan oleh JVM (Java Virtual Machine).</p>"},{"location":"dasar/struktur/#2-jalankan-program","title":"2. Jalankan Program","text":"<p>Setelah dikompilasi, jalankan program dengan perintah berikut:</p> <pre><code>java HelloWorld\n</code></pre> <p>\ud83d\udda8\ufe0f Output: Program akan mencetak teks <code>Halo, dunia!</code> ke konsol.</p>"},{"location":"dasar/struktur/#hal-hal-penting-yang-harus-diingat","title":"\u26a0\ufe0f Hal-Hal Penting yang Harus Diingat","text":"<p>Berikut adalah beberapa aturan penting dalam penulisan program Java:</p> \u2699\ufe0f Aspek \ud83d\udca1 Penjelasan Nama file = nama kelas <code>public</code> Nama file (<code>HelloWorld.java</code>) harus sama dengan nama kelas <code>public</code> (<code>HelloWorld</code>). Java bersifat case-sensitive <code>HelloWorld</code> \u2260 <code>helloworld</code>. Huruf besar dan kecil dibedakan. Statement diakhiri titik koma (<code>;</code>) Setiap pernyataan kode harus diakhiri dengan tanda titik koma. Blok kode menggunakan <code>{</code> dan <code>}</code> Setiap blok kode harus dibuka dengan <code>{</code> dan ditutup dengan <code>}</code>, harus seimbang."},{"location":"dasar/struktur/#kesimpulan","title":"\ud83e\udded Kesimpulan","text":"<p>Struktur dasar program Java terdiri dari tiga elemen utama:</p> <ol> <li>Kelas (<code>class</code>): Wadah utama kode program.</li> <li>Method <code>main</code>: Titik masuk eksekusi program.</li> <li>Statement: Perintah-perintah seperti <code>System.out.println</code> untuk menjalankan logika program.</li> </ol> <p>Contoh di atas (<code>System.out.println(\"Halo, dunia!\");</code>) adalah langkah awal untuk memahami Java.</p>"},{"location":"dasar/struktur/#langkah-selanjutnya","title":"\ud83d\udcda Langkah Selanjutnya","text":"<p>Pelajari lebih lanjut tentang Tipe Data &amp; Variabel untuk memperdalam pemahaman Anda tentang Java.</p>"},{"location":"dasar/tipe_data/","title":"\ud83e\udde0 Tipe Data dan Variabel dalam Java","text":"<p>Dalam pemrograman Java, tipe data menentukan jenis nilai yang dapat disimpan oleh sebuah variabel, seperti angka, teks, atau nilai logika. Variabel berfungsi sebagai wadah untuk menyimpan data di memori komputer. Bagian ini menjelaskan tipe data, aturan penamaan variabel, dan cara penggunaannya dengan contoh.</p>"},{"location":"dasar/tipe_data/#apa-itu-variabel","title":"\ud83d\udd24 Apa Itu Variabel?","text":"<p>Variabel adalah wadah dalam memori untuk menyimpan data. Setiap variabel memiliki tiga komponen utama:</p> <ul> <li>Nama (identifier): Nama unik untuk mengidentifikasi variabel.</li> <li>Tipe data: Jenis data yang dapat disimpan (misalnya, angka, teks, atau logika).</li> <li>Nilai: Data yang disimpan dalam variabel.</li> </ul>"},{"location":"dasar/tipe_data/#contoh-deklarasi-dan-inisialisasi-variabel","title":"Contoh Deklarasi dan Inisialisasi Variabel:","text":"<pre><code>int umur = 25;\nString nama = \"Marno\";\nboolean aktif = true;\n</code></pre>"},{"location":"dasar/tipe_data/#jenis-jenis-tipe-data-di-java","title":"\ud83d\udce6 Jenis-Jenis Tipe Data di Java","text":"<p>Java memiliki dua kategori utama tipe data: primitif dan referensi.</p>"},{"location":"dasar/tipe_data/#1-tipe-data-primitif","title":"1. \ud83d\udcca Tipe Data Primitif","text":"<p>Tipe data primitif adalah tipe dasar bawaan Java yang menyimpan nilai langsung di memori. Berikut adalah 8 tipe data primitif:</p> Tipe Ukuran Rentang Nilai / Contoh Keterangan <code>byte</code> 8 bit -128 hingga 127 Bilangan bulat kecil <code>short</code> 16 bit -32.768 hingga 32.767 Bilangan bulat sedang <code>int</code> 32 bit -2.147.483.648 hingga 2.147.483.647 Bilangan bulat umum <code>long</code> 64 bit -2\u2076\u00b3 hingga 2\u2076\u00b3-1 Bilangan bulat sangat besar <code>float</code> 32 bit 3.14f Bilangan desimal presisi rendah <code>double</code> 64 bit 3.1415926535 Bilangan desimal presisi tinggi <code>char</code> 16 bit 'A', '\\u0041' Karakter tunggal (Unicode) <code>boolean</code> 1 bit <code>true</code> atau <code>false</code> Nilai logika benar/salah <p>\ud83d\udccc Catatan: - Nilai <code>float</code> harus diakhiri dengan huruf <code>f</code> (contoh: <code>3.14f</code>). - Nilai <code>long</code> diakhiri dengan huruf <code>L</code> untuk membedakannya dari <code>int</code> (contoh: <code>123456789L</code>).</p>"},{"location":"dasar/tipe_data/#2-tipe-data-referensi","title":"2. \ud83e\uddf1 Tipe Data Referensi","text":"<p>Tipe data referensi menyimpan alamat memori dari objek, bukan nilai langsung. Beberapa contohnya meliputi:</p> Tipe Referensi Contoh Keterangan <code>String</code> <code>\"Halo, Java!\"</code> Teks atau rangkaian karakter <code>Array</code> <code>{1, 2, 3}</code> Kumpulan elemen dengan tipe sama <code>Class</code> <code>Scanner</code>, <code>Math</code> Objek dari kelas tertentu <p>\ud83d\udca1 Info: Tipe data referensi biasanya digunakan untuk struktur data yang lebih kompleks, seperti objek atau koleksi.</p>"},{"location":"dasar/tipe_data/#deklarasi-dan-inisialisasi-variabel","title":"\ud83d\udcdd Deklarasi dan Inisialisasi Variabel","text":""},{"location":"dasar/tipe_data/#1-deklarasi-tanpa-inisialisasi","title":"1. Deklarasi Tanpa Inisialisasi","text":"<p>Mendeklarasikan variabel tanpa memberikan nilai awal:</p> <pre><code>int x;\nString nama;\n</code></pre> <p>Catatan: Variabel yang hanya dideklarasikan tanpa inisialisasi tidak dapat digunakan sampai diberi nilai.</p>"},{"location":"dasar/tipe_data/#2-deklarasi-dengan-inisialisasi","title":"2. Deklarasi dengan Inisialisasi","text":"<p>Mendeklarasikan sekaligus memberikan nilai awal:</p> <pre><code>int umur = 25;\nboolean aktif = true;\n</code></pre>"},{"location":"dasar/tipe_data/#3-deklarasi-banyak-variabel-sekaligus","title":"3. Deklarasi Banyak Variabel Sekaligus","text":"<p>Mendeklarasikan beberapa variabel dengan tipe yang sama dalam satu baris:</p> <pre><code>int a = 1, b = 2, c = 3;\n</code></pre>"},{"location":"dasar/tipe_data/#aturan-penamaan-variabel","title":"\ud83d\udd10 Aturan Penamaan Variabel","text":"<p>Agar kode tetap valid dan mudah dibaca, ikuti aturan penamaan variabel berikut:</p> <ul> <li>Dimulai dengan huruf atau underscore (<code>_</code>): Tidak boleh dimulai dengan angka.</li> <li>Tanpa spasi: Gunakan camelCase atau underscore untuk nama yang panjang.</li> <li>Case-sensitive: <code>umur</code> \u2260 <code>Umur</code>.</li> <li>Hindari kata kunci Java: Kata seperti <code>int</code>, <code>class</code>, <code>public</code>, dll., tidak boleh digunakan sebagai nama variabel.</li> </ul>"},{"location":"dasar/tipe_data/#contoh-nama-variabel-yang-valid","title":"Contoh Nama Variabel yang Valid:","text":"<pre><code>String namaLengkap;\nint _nilaiAkhir;\ndouble tinggiBadan;\n</code></pre>"},{"location":"dasar/tipe_data/#contoh-nama-variabel-yang-tidak-valid","title":"Contoh Nama Variabel yang Tidak Valid:","text":"<pre><code>int 1angka;           // Error: Tidak boleh dimulai dengan angka\nString nama lengkap;  // Error: Tidak boleh ada spasi\nint class;            // Error: Menggunakan kata kunci Java\n</code></pre>"},{"location":"dasar/tipe_data/#contoh-program-lengkap","title":"\ud83e\uddea Contoh Program Lengkap","text":"<p>Berikut adalah contoh program yang menggunakan berbagai tipe data dan variabel:</p> <pre><code>public class TipeDataDemo {\n    public static void main(String[] args) {\n        int umur = 21;\n        double tinggi = 172.5;\n        char inisial = 'M';\n        boolean mahasiswa = true;\n        String nama = \"Marno\";\n\n        System.out.println(\"Nama: \" + nama);\n        System.out.println(\"Umur: \" + umur + \" tahun\");\n        System.out.println(\"Tinggi: \" + tinggi + \" cm\");\n        System.out.println(\"Inisial: \" + inisial);\n        System.out.println(\"Status Mahasiswa: \" + mahasiswa);\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Nama: Marno\nUmur: 21 tahun\nTinggi: 172.5 cm\nInisial: M\nStatus Mahasiswa: true\n</code></pre>"},{"location":"dasar/tipe_data/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"<ul> <li>Java memiliki dua jenis tipe data: primitif (nilai langsung) dan referensi (alamat memori objek).</li> <li>Variabel digunakan untuk menyimpan data dengan tipe tertentu.</li> <li>Penamaan variabel harus mengikuti aturan sintaks Java agar kode valid dan mudah dibaca.</li> <li>Tipe data menentukan jumlah memori yang digunakan dan cara data diproses.</li> </ul>"},{"location":"dasar/tipe_data/#langkah-selanjutnya","title":"\ud83d\udcda Langkah Selanjutnya","text":"<p>Pelajari lebih lanjut tentang Operator dan Ekspresi dalam Java untuk memahami cara memanipulasi data dalam program.</p>"},{"location":"lanjutan/collection_framework/","title":"\ud83e\uddfa Java Collection Framework (JCF) Tingkat Lanjut","text":"<p>Java Collection Framework (JCF) menyediakan sekumpulan struktur data siap pakai yang efisien, aman, dan mendukung operasi skala besar. JCF mencakup antarmuka seperti <code>List</code>, <code>Set</code>, <code>Map</code>, dan <code>Queue</code>, serta implementasi seperti <code>ArrayList</code>, <code>HashSet</code>, <code>HashMap</code>, dan <code>PriorityQueue</code>. Bagian ini menjelaskan hirarki, karakteristik, dan penggunaan praktis dari JCF, serta panduan untuk memilih struktur data yang tepat.</p>"},{"location":"lanjutan/collection_framework/#hirarki-java-collection-framework","title":"\ud83d\udd16 Hirarki Java Collection Framework","text":"<p>JCF terdiri dari antarmuka utama <code>Collection</code> dan <code>Map</code>, dengan berbagai implementasi:</p> <pre><code>Collection\n\u251c\u2500\u2500 List\n\u2502   \u251c\u2500\u2500 ArrayList\n\u2502   \u251c\u2500\u2500 LinkedList\n\u2502   \u2514\u2500\u2500 Vector (thread-safe, jarang digunakan)\n\u251c\u2500\u2500 Set\n\u2502   \u251c\u2500\u2500 HashSet\n\u2502   \u251c\u2500\u2500 LinkedHashSet\n\u2502   \u2514\u2500\u2500 TreeSet\n\u2514\u2500\u2500 Queue\n    \u251c\u2500\u2500 LinkedList\n    \u251c\u2500\u2500 PriorityQueue\n    \u2514\u2500\u2500 Deque\n        \u2514\u2500\u2500 ArrayDeque\n\nMap (terpisah dari Collection)\n\u251c\u2500\u2500 HashMap\n\u251c\u2500\u2500 LinkedHashMap\n\u251c\u2500\u2500 TreeMap\n\u2514\u2500\u2500 Hashtable (thread-safe, jarang digunakan)\n</code></pre> <p>\ud83d\udccc Catatan: <code>Map</code> bukan bagian dari antarmuka <code>Collection</code>, tetapi merupakan bagian integral dari JCF karena sering digunakan bersama koleksi lainnya.</p>"},{"location":"lanjutan/collection_framework/#list-urutan-dan-duplikasi","title":"\ud83d\udcd8 List: Urutan dan Duplikasi","text":"<p>List adalah koleksi yang mempertahankan urutan elemen dan memperbolehkan duplikasi. Implementasi utama adalah <code>ArrayList</code> dan <code>LinkedList</code>.</p>"},{"location":"lanjutan/collection_framework/#contoh","title":"Contoh:","text":"<pre><code>import java.util.ArrayList;\nimport java.util.List;\n\npublic class ListDemo {\n    public static void main(String[] args) {\n        List&lt;String&gt; daftar = new ArrayList&lt;&gt;();\n        daftar.add(\"Ali\");\n        daftar.add(\"Ali\"); // Duplikasi diperbolehkan\n        daftar.add(\"Budi\");\n        System.out.println(\"Daftar: \" + daftar);\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Daftar: [Ali, Ali, Budi]\n</code></pre> <ul> <li>ArrayList: Cepat untuk akses elemen berdasarkan indeks, lambat untuk penyisipan/penghapusan di tengah.</li> <li>LinkedList: Cepat untuk penyisipan/penghapusan, lambat untuk akses acak.</li> </ul>"},{"location":"lanjutan/collection_framework/#set-unik-dan-tidak-selalu-berurutan","title":"\ud83d\udd10 Set: Unik dan Tidak Selalu Berurutan","text":"<p>Set adalah koleksi yang tidak memperbolehkan duplikasi dan tidak selalu mempertahankan urutan. Implementasi utama adalah <code>HashSet</code> dan <code>TreeSet</code>.</p>"},{"location":"lanjutan/collection_framework/#contoh_1","title":"Contoh:","text":"<pre><code>import java.util.HashSet;\nimport java.util.Set;\n\npublic class SetDemo {\n    public static void main(String[] args) {\n        Set&lt;String&gt; unik = new HashSet&lt;&gt;();\n        unik.add(\"Marno\");\n        unik.add(\"Marno\"); // Tidak disimpan karena duplikat\n        unik.add(\"Budi\");\n        System.out.println(\"Set: \" + unik);\n    }\n}\n</code></pre> <p>\ufffd\u4e8c\u53c9\ufe0f Output:</p> <pre><code>Set: [Budi, Marno]\n</code></pre> <ul> <li>HashSet: Tidak terurut, performa cepat untuk operasi dasar.</li> <li>TreeSet: Otomatis mengurutkan elemen secara ascending (berdasarkan urutan alami atau comparator).</li> <li>LinkedHashSet: Mempertahankan urutan penyisipan.</li> </ul>"},{"location":"lanjutan/collection_framework/#map-pasangan-key-value","title":"\ud83e\udded Map: Pasangan Key-Value","text":"<p>Map menyimpan data dalam bentuk pasangan key-value, di mana setiap kunci unik memetakan ke satu nilai. Implementasi utama adalah <code>HashMap</code> dan <code>TreeMap</code>.</p>"},{"location":"lanjutan/collection_framework/#contoh_2","title":"Contoh:","text":"<pre><code>import java.util.HashMap;\nimport java.util.Map;\n\npublic class MapDemo {\n    public static void main(String[] args) {\n        Map&lt;String, Integer&gt; umur = new HashMap&lt;&gt;();\n        umur.put(\"Marno\", 25);\n        umur.put(\"Budi\", 30);\n        System.out.println(\"Umur Marno: \" + umur.get(\"Marno\"));\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Umur Marno: 25\n</code></pre> <ul> <li>HashMap: Tidak terurut, performa cepat untuk operasi dasar.</li> <li>TreeMap: Kunci diurutkan secara ascending.</li> <li>LinkedHashMap: Mempertahankan urutan penyisipan kunci.</li> </ul>"},{"location":"lanjutan/collection_framework/#queue-dan-deque-antrean-dan-tumpukan","title":"\ud83d\udce6 Queue dan Deque: Antrean dan Tumpukan","text":"<p>Queue mengikuti prinsip FIFO (First In, First Out) atau prioritas, cocok untuk sistem antrean. Deque (Double-Ended Queue) mendukung operasi dari kedua ujung.</p>"},{"location":"lanjutan/collection_framework/#contoh-queue","title":"Contoh Queue:","text":"<pre><code>import java.util.LinkedList;\nimport java.util.Queue;\n\npublic class QueueDemo {\n    public static void main(String[] args) {\n        Queue&lt;String&gt; antrian = new LinkedList&lt;&gt;();\n        antrian.add(\"User1\");\n        antrian.add(\"User2\");\n        System.out.println(\"Keluar: \" + antrian.poll()); // Mengambil dan menghapus elemen pertama\n        System.out.println(\"Antrian sekarang: \" + antrian);\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Keluar: User1\nAntrian sekarang: [User2]\n</code></pre> <ul> <li>LinkedList: Implementasi <code>Queue</code> yang fleksibel, juga mendukung <code>Deque</code>.</li> <li>PriorityQueue: Elemen diurutkan berdasarkan prioritas (alami atau custom).</li> <li>ArrayDeque: Efisien untuk operasi di kedua ujung (tumpukan atau antrean).</li> </ul>"},{"location":"lanjutan/collection_framework/#iterator-dan-for-each","title":"\ud83d\udd01 Iterator dan For-Each","text":"<p>Untuk mengakses elemen koleksi, gunakan for-each atau Iterator.</p>"},{"location":"lanjutan/collection_framework/#contoh-for-each-dan-iterator","title":"Contoh For-Each dan Iterator:","text":"<pre><code>import java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\n\npublic class IteratorDemo {\n    public static void main(String[] args) {\n        List&lt;String&gt; daftar = new ArrayList&lt;&gt;();\n        daftar.add(\"Ali\");\n        daftar.add(\"Budi\");\n\n        // Menggunakan for-each\n        System.out.println(\"Menggunakan for-each:\");\n        for (String nama : daftar) {\n            System.out.println(nama);\n        }\n\n        // Menggunakan Iterator\n        System.out.println(\"Menggunakan Iterator:\");\n        Iterator&lt;String&gt; itr = daftar.iterator();\n        while (itr.hasNext()) {\n            System.out.println(itr.next());\n        }\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Menggunakan for-each:\nAli\nBudi\nMenggunakan Iterator:\nAli\nBudi\n</code></pre> <p>\ud83d\udca1 Tips: Gunakan <code>for-each</code> untuk iterasi sederhana, dan <code>Iterator</code> jika perlu menghapus elemen selama iterasi (<code>itr.remove()</code>).</p>"},{"location":"lanjutan/collection_framework/#synchronized-collection","title":"\ud83d\udca5 Synchronized Collection","text":"<p>Secara default, koleksi JCF tidak thread-safe. Untuk membuat koleksi aman dalam lingkungan multi-thread, gunakan <code>Collections.synchronizedXXX</code>.</p>"},{"location":"lanjutan/collection_framework/#contoh_3","title":"Contoh:","text":"<pre><code>import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class SynchronizedDemo {\n    public static void main(String[] args) {\n        List&lt;String&gt; aman = Collections.synchronizedList(new ArrayList&lt;&gt;());\n        aman.add(\"Data1\");\n        System.out.println(\"List thread-safe: \" + aman);\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>List thread-safe: [Data1]\n</code></pre> <p>\ud83d\udccc Catatan: Untuk performa lebih baik dalam aplikasi multi-thread, pertimbangkan menggunakan kelas dari paket <code>java.util.concurrent</code>, seperti <code>CopyOnWriteArrayList</code> atau <code>ConcurrentHashMap</code>.</p>"},{"location":"lanjutan/collection_framework/#memilih-struktur-data-yang-tepat","title":"\ud83e\udde0 Memilih Struktur Data yang Tepat","text":"<p>Memilih struktur data yang sesuai sangat penting untuk efisiensi program:</p> Kasus Penggunaan Struktur Data yang Disarankan Data berurutan, boleh duplikasi <code>ArrayList</code> (akses cepat) atau <code>LinkedList</code> (sisip/hapus cepat) Data unik, urutan tidak penting <code>HashSet</code> Data unik, perlu diurutkan <code>TreeSet</code> Pasangan key-value, akses cepat <code>HashMap</code> Pasangan key-value, kunci terurut <code>TreeMap</code> Pasangan key-value, urut berdasarkan input <code>LinkedHashMap</code> Antrean proses/data (FIFO) <code>LinkedList</code> sebagai <code>Queue</code> Antrean berdasarkan prioritas <code>PriorityQueue</code> Tumpukan atau antrean dua arah <code>ArrayDeque</code>"},{"location":"lanjutan/collection_framework/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"<p>Java Collection Framework menyediakan struktur data yang fleksibel dan efisien untuk berbagai kebutuhan:</p> Struktur Ciri Khas List Urutan tetap, boleh duplikasi Set Elemen unik, tidak selalu terurut Map Pasangan key-value, kunci unik Queue Antrean data, biasanya FIFO atau prioritas <p>JCF adalah alat penting untuk mengelola data dalam program Java secara efisien.</p>"},{"location":"lanjutan/collection_framework/#langkah-selanjutnya","title":"\ud83d\udcda Langkah Selanjutnya","text":"<p>Pelajari lebih lanjut tentang Generics dalam Java untuk memahami cara membuat koleksi yang lebih aman dan fleksibel dengan tipe data.</p>"},{"location":"lanjutan/expression_custom/","title":"\ud83d\udee0\ufe0f Membangun Ekspresi Kustom di Java","text":"<p>Java bukan bahasa fungsional murni, namun kita tetap bisa membuat ekspresi sendiri yang: - Reusable - Dinamis - Ringkas - Modular</p>"},{"location":"lanjutan/expression_custom/#tujuan","title":"\ud83d\udccc Tujuan","text":"<ul> <li>Menyusun logika sebagai ekspresi, bukan sekadar prosedur</li> <li>Menggunakan lambda atau interface fungsional</li> <li>Mengabstraksi logika kompleks menjadi kode ringkas</li> </ul>"},{"location":"lanjutan/expression_custom/#contoh-1-validasi-data","title":"\ud83e\uddea Contoh 1: Validasi Data","text":"<pre><code>@FunctionalInterface\ninterface Validator&lt;T&gt; {\n    boolean validate(T value);\n}\n\npublic class Demo {\n    public static void main(String[] args) {\n        Validator&lt;String&gt; emailValidator = email -&gt; email.contains(\"@\");\n\n        System.out.println(emailValidator.validate(\"marno@email.com\")); // true\n        System.out.println(emailValidator.validate(\"marno\")); // false\n    }\n}\n````\n\n\u2705 Kita membuat ekspresi `emailValidator` yang bisa digunakan di mana saja.\n\n---\n\n## \ud83e\uddea Contoh 2: Ekspresi Matematika Dinamis\n\n```java\n@FunctionalInterface\ninterface Operation {\n    int apply(int a, int b);\n}\n\npublic class Kalkulator {\n    public static void main(String[] args) {\n        Operation tambah = (a, b) -&gt; a + b;\n        Operation kali = (a, b) -&gt; a * b;\n\n        System.out.println(tambah.apply(5, 3)); // 8\n        System.out.println(kali.apply(4, 7));   // 28\n    }\n}\n</code></pre>"},{"location":"lanjutan/expression_custom/#kombinasi-ekspresi","title":"\ud83d\udd01 Kombinasi Ekspresi","text":"<pre><code>Predicate&lt;String&gt; panjangValid = s -&gt; s.length() &gt; 5;\nPredicate&lt;String&gt; adaAngka = s -&gt; s.matches(\".*\\\\d.*\");\n\nPredicate&lt;String&gt; validPassword = panjangValid.and(adaAngka);\n\nSystem.out.println(validPassword.test(\"hello\"));     // false\nSystem.out.println(validPassword.test(\"hello123\"));  // true\n</code></pre>"},{"location":"lanjutan/expression_custom/#ekspresi-kustom-dengan-class","title":"\ud83d\udd27 Ekspresi Kustom dengan Class","text":"<pre><code>class Ekspresi {\n    public static boolean lebihDari(int a, int batas) {\n        return a &gt; batas;\n    }\n\n    public static boolean antara(int x, int min, int max) {\n        return x &gt;= min &amp;&amp; x &lt;= max;\n    }\n}\n\n// Pemakaian\nSystem.out.println(Ekspresi.lebihDari(10, 5)); // true\nSystem.out.println(Ekspresi.antara(7, 5, 10)); // true\n</code></pre>"},{"location":"lanjutan/expression_custom/#studi-kasus-rule-engine-mini","title":"\ud83d\udca1 Studi Kasus: Rule Engine Mini","text":"<pre><code>interface Rule&lt;T&gt; {\n    boolean apply(T data);\n}\n\nclass RuleEngine {\n    public static &lt;T&gt; boolean jalankan(T data, Rule&lt;T&gt; rule) {\n        return rule.apply(data);\n    }\n}\n\n// Pemakaian\nRule&lt;Integer&gt; isGanjil = n -&gt; n % 2 != 0;\n\nSystem.out.println(RuleEngine.jalankan(7, isGanjil)); // true\n</code></pre>"},{"location":"lanjutan/expression_custom/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"Konsep Penjelasan Custom Expression Membuat logika reusable menggunakan lambda/class Tujuan Menyusun logika sebagai objek atau fungsi Cocok untuk Validasi, kalkulasi, aturan dinamis Fitur yang dipakai Functional interface, lambda, predicate <p>\u27a1\ufe0f Lanjut: interface_functional.md atau lambda_expression.md</p> <p>```</p>"},{"location":"lanjutan/expression_custom/#catatan","title":"\ud83d\udd16 Catatan","text":"<p>Topik ini ideal untuk developer Java modern yang ingin: - Menulis kode ekspresif dan modular - Menyusun rule engine mini, validator dinamis, atau filter data</p> <p>Jika kamu tertarik, kita bisa eksplor lebih lanjut ke: - <code>rule_engine.md</code> (menggunakan strategi pola) - <code>expression_parser.md</code> (buat parser ekspresi dari string)</p>"},{"location":"lanjutan/generics/","title":"\ud83e\uddec Generics dalam Java","text":"<p>Generics memungkinkan kita menulis kode yang bisa bekerja dengan berbagai tipe data tanpa mengorbankan type safety.</p> <p>Tanpa generics: - Banyak cast - Rentan runtime error - Tidak fleksibel</p> <p>Dengan generics: - Lebih aman (cek tipe di compile-time) - Lebih fleksibel (reusable untuk banyak tipe) - Lebih bersih</p>"},{"location":"lanjutan/generics/#motivasi-sebelum-sesudah-generics","title":"\ud83d\udd30 Motivasi: Sebelum &amp; Sesudah Generics","text":"<p>Sebelum: <pre><code>ArrayList list = new ArrayList();\nlist.add(\"Marno\");\nString nama = (String) list.get(0); // perlu cast\n````\n\n**Sesudah:**\n\n```java\nArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();\nlist.add(\"Marno\");\nString nama = list.get(0); // tanpa cast, aman\n</code></pre></p>"},{"location":"lanjutan/generics/#generic-class","title":"\ud83d\udd27 Generic Class","text":"<pre><code>public class Kotak&lt;T&gt; {\n    private T isi;\n\n    public void setIsi(T isi) {\n        this.isi = isi;\n    }\n\n    public T getIsi() {\n        return isi;\n    }\n}\n</code></pre> <p>Penggunaan:</p> <pre><code>Kotak&lt;String&gt; k1 = new Kotak&lt;&gt;();\nk1.setIsi(\"Sawit\");\n\nKotak&lt;Integer&gt; k2 = new Kotak&lt;&gt;();\nk2.setIsi(100);\n</code></pre>"},{"location":"lanjutan/generics/#generic-method","title":"\ud83e\uddea Generic Method","text":"<pre><code>public class Util {\n    public static &lt;T&gt; void tampilkan(T data) {\n        System.out.println(data);\n    }\n}\n</code></pre> <p>Pemanggilan:</p> <pre><code>Util.tampilkan(\"Selamat datang\");\nUtil.tampilkan(123);\n</code></pre>"},{"location":"lanjutan/generics/#multiple-type-parameters","title":"\u2699\ufe0f Multiple Type Parameters","text":"<pre><code>public class Pasangan&lt;K, V&gt; {\n    private K kunci;\n    private V nilai;\n\n    public Pasangan(K k, V v) {\n        this.kunci = k;\n        this.nilai = v;\n    }\n\n    public K getKunci() { return kunci; }\n    public V getNilai() { return nilai; }\n}\n</code></pre> <p>Penggunaan:</p> <pre><code>Pasangan&lt;String, Integer&gt; p = new Pasangan&lt;&gt;(\"Ali\", 50);\nSystem.out.println(p.getKunci() + \" =&gt; \" + p.getNilai());\n</code></pre>"},{"location":"lanjutan/generics/#bounded-type-parameter-extends","title":"\ud83d\udce5 Bounded Type Parameter (<code>extends</code>)","text":"<pre><code>public class Pengolah&lt;T extends Number&gt; {\n    public double duaKali(T nilai) {\n        return nilai.doubleValue() * 2;\n    }\n}\n</code></pre> <p>Pemanggilan:</p> <pre><code>Pengolah&lt;Integer&gt; p = new Pengolah&lt;&gt;();\nSystem.out.println(p.duaKali(5)); // Output: 10.0\n</code></pre>"},{"location":"lanjutan/generics/#wildcard","title":"\ud83d\udcda Wildcard <code>?</code>","text":"Syntax Arti <code>&lt;?&gt;</code> Tipe bebas <code>&lt;? extends T&gt;</code> Turunan dari <code>T</code> (bisa <code>T</code> atau subclass) <code>&lt;? super T&gt;</code> <code>T</code> atau superclass-nya <p>Contoh:</p> <pre><code>public void cetakSemua(List&lt;?&gt; daftar) {\n    for (Object o : daftar) {\n        System.out.println(o);\n    }\n}\n</code></pre>"},{"location":"lanjutan/generics/#studi-kasus-stack-generik","title":"\ud83e\udde0 Studi Kasus: Stack Generik","text":"<pre><code>public class Stack&lt;T&gt; {\n    private ArrayList&lt;T&gt; data = new ArrayList&lt;&gt;();\n\n    public void push(T item) {\n        data.add(item);\n    }\n\n    public T pop() {\n        if (!data.isEmpty()) {\n            return data.remove(data.size() - 1);\n        }\n        return null;\n    }\n\n    public boolean isEmpty() {\n        return data.isEmpty();\n    }\n}\n</code></pre>"},{"location":"lanjutan/generics/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"Konsep Penjelasan <code>&lt;T&gt;</code> Parameter generik <code>Kotak&lt;T&gt;</code> Class generik <code>&lt;T extends A&gt;</code> Membatasi tipe hanya ke subclass dari A <code>&lt;?&gt;</code> Wildcard: tipe bebas Keuntungan Reusable, type-safe, lebih bersih dan modern <p>\u27a1\ufe0f Selanjutnya: Lambda Expression (Fungsi Ringkas)</p>"},{"location":"lanjutan/interface_functional/","title":"\ud83d\udd27 Functional Interface di Java","text":"<p>Functional Interface adalah interface yang hanya memiliki satu method abstrak. Cocok digunakan untuk: - Lambda Expression - Method Reference - Pemrograman fungsional</p>"},{"location":"lanjutan/interface_functional/#ciri-functional-interface","title":"\ud83d\udccc Ciri Functional Interface","text":"<pre><code>@FunctionalInterface\ninterface Pesan {\n    void kirim(String isi);\n}\n````\n\n* Hanya **satu method abstrak**\n* Boleh memiliki method default atau static\n* Anotasi `@FunctionalInterface` **tidak wajib**, tapi dianjurkan (untuk validasi)\n\n---\n\n## \ud83e\udde0 Contoh Sederhana\n\n```java\n@FunctionalInterface\ninterface Hitung {\n    int operasi(int a, int b);\n}\n</code></pre> <p>Pemakaian dengan lambda:</p> <pre><code>Hitung tambah = (a, b) -&gt; a + b;\nSystem.out.println(tambah.operasi(3, 5)); // Output: 8\n</code></pre>"},{"location":"lanjutan/interface_functional/#interface-fungsional-dari-java","title":"\ud83d\udce6 Interface Fungsional dari Java","text":"Interface Method Abstrak Keterangan <code>Runnable</code> <code>run()</code> Tanpa parameter, tanpa return <code>Callable&lt;T&gt;</code> <code>call()</code> Tanpa parameter, return nilai <code>Comparator&lt;T&gt;</code> <code>compare(T o1, T o2)</code> Untuk perbandingan dua objek <code>Consumer&lt;T&gt;</code> <code>accept(T t)</code> Menerima input, tanpa return <code>Supplier&lt;T&gt;</code> <code>get()</code> Tidak menerima input, return nilai <code>Function&lt;T,R&gt;</code> <code>apply(T t)</code> Input \u2192 Output <code>Predicate&lt;T&gt;</code> <code>test(T t)</code> Return boolean (true/false)"},{"location":"lanjutan/interface_functional/#contoh-nyata-filter-data","title":"\ud83d\udd0d Contoh Nyata: Filter Data","text":"<pre><code>List&lt;String&gt; nama = Arrays.asList(\"Ali\", \"Budi\", \"Cici\");\n\nPredicate&lt;String&gt; dimulaiDenganC = n -&gt; n.startsWith(\"C\");\n\nnama.stream()\n    .filter(dimulaiDenganC)\n    .forEach(System.out::println); // Output: Cici\n</code></pre>"},{"location":"lanjutan/interface_functional/#kenapa-functional-interface-penting","title":"\ud83d\udca1 Kenapa Functional Interface Penting?","text":"Alasan Penjelasan Mendukung lambda expression Tanpa harus membuat class tambahan Mendorong kode ringkas dan ekspresif Dekat dengan paradigma fungsional modern Membuat Java tidak terasa kaku Cocok untuk pemrosesan data, event, dsb."},{"location":"lanjutan/interface_functional/#interface-fungsional-kustom","title":"\ud83e\uddea Interface Fungsional Kustom","text":"<pre><code>@FunctionalInterface\ninterface Cetak {\n    void tampil(String isi);\n}\n\npublic class Demo {\n    public static void cetakTeks(Cetak c) {\n        c.tampil(\"Halo dari Java!\");\n    }\n\n    public static void main(String[] args) {\n        cetakTeks(s -&gt; System.out.println(s));\n    }\n}\n</code></pre>"},{"location":"lanjutan/interface_functional/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"Konsep Penjelasan Functional Interface Hanya 1 method abstrak <code>@FunctionalInterface</code> Untuk validasi compiler (tidak wajib) Cocok untuk Lambda, stream, event, callback Contoh built-in <code>Runnable</code>, <code>Predicate</code>, <code>Function</code>, dsb. <p>\u27a1\ufe0f Lanjutkan eksplorasi ke: lambda_expression.md dan stream_api.md</p>"},{"location":"lanjutan/jdbc_mysql/","title":"\ud83d\uddc3\ufe0f Koneksi Java ke MySQL menggunakan JDBC","text":"<p>JDBC (Java Database Connectivity) adalah API resmi Java untuk mengakses database relasional seperti MySQL, PostgreSQL, dll.</p> <p>Dengan JDBC, kamu bisa: - Terhubung ke database - Menjalankan perintah SQL (SELECT, INSERT, UPDATE, DELETE) - Mengambil hasil query - Mengelola transaksi</p>"},{"location":"lanjutan/jdbc_mysql/#persiapan-awal","title":"\ud83d\udd27 Persiapan Awal","text":"<ol> <li>\u2705 Pastikan MySQL aktif di komputer</li> <li>\u2705 Buat database: <code>java_db</code></li> <li>\u2705 Tambahkan file JDBC driver (<code>mysql-connector-j-*.jar</code>) ke project (atau via Maven/Gradle)</li> </ol>"},{"location":"lanjutan/jdbc_mysql/#struktur-tabel-contoh","title":"\ud83d\udce6 Struktur Tabel Contoh","text":"<pre><code>CREATE DATABASE java_db;\n\nUSE java_db;\n\nCREATE TABLE users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    nama VARCHAR(100),\n    email VARCHAR(100)\n);\n````\n\n---\n\n## \ud83d\udd0c Koneksi JDBC: Langkah Dasar\n\n```java\nimport java.sql.*;\n\npublic class Koneksi {\n    public static void main(String[] args) {\n        String url = \"jdbc:mysql://localhost:3306/java_db\";\n        String user = \"root\";\n        String pass = \"\";\n\n        try {\n            Connection conn = DriverManager.getConnection(url, user, pass);\n            System.out.println(\"Berhasil terkoneksi ke database!\");\n            conn.close();\n        } catch (SQLException e) {\n            System.out.println(\"Gagal koneksi: \" + e.getMessage());\n        }\n    }\n}\n</code></pre>"},{"location":"lanjutan/jdbc_mysql/#menjalankan-query-insert","title":"\ud83d\udcc4 Menjalankan Query <code>INSERT</code>","text":"<pre><code>String sql = \"INSERT INTO users (nama, email) VALUES (?, ?)\";\nPreparedStatement ps = conn.prepareStatement(sql);\nps.setString(1, \"Marno\");\nps.setString(2, \"marno@email.com\");\nps.executeUpdate();\n</code></pre>"},{"location":"lanjutan/jdbc_mysql/#menjalankan-query-select","title":"\ud83d\udcc4 Menjalankan Query <code>SELECT</code>","text":"<pre><code>String sql = \"SELECT * FROM users\";\nStatement stmt = conn.createStatement();\nResultSet rs = stmt.executeQuery(sql);\n\nwhile (rs.next()) {\n    System.out.println(rs.getInt(\"id\") + \" | \" +\n                       rs.getString(\"nama\") + \" | \" +\n                       rs.getString(\"email\"));\n}\n</code></pre>"},{"location":"lanjutan/jdbc_mysql/#update-delete","title":"\ud83d\udcc4 Update &amp; Delete","text":"<pre><code>// Update\nString sql = \"UPDATE users SET nama = ? WHERE id = ?\";\nPreparedStatement ps = conn.prepareStatement(sql);\nps.setString(1, \"Marno Update\");\nps.setInt(2, 1);\nps.executeUpdate();\n\n// Delete\nString del = \"DELETE FROM users WHERE id = ?\";\nPreparedStatement delps = conn.prepareStatement(del);\ndelps.setInt(1, 2);\ndelps.executeUpdate();\n</code></pre>"},{"location":"lanjutan/jdbc_mysql/#best-practice-jdbc","title":"\ud83d\udccc Best Practice JDBC","text":"Tips Penjelasan Gunakan <code>PreparedStatement</code> Hindari SQL Injection Tutup koneksi setelah pakai Gunakan <code>try-with-resources</code> bila perlu Tangani <code>SQLException</code> Log semua error dengan detail Pooling koneksi (lanjutan) Gunakan HikariCP/Apache DBCP di sistem besar"},{"location":"lanjutan/jdbc_mysql/#contoh-lengkap","title":"\ud83d\udd01 Contoh Lengkap","text":"<pre><code>public class UserDAO {\n    private Connection conn;\n\n    public UserDAO() throws SQLException {\n        conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/java_db\", \"root\", \"\");\n    }\n\n    public void tambahUser(String nama, String email) throws SQLException {\n        String sql = \"INSERT INTO users (nama, email) VALUES (?, ?)\";\n        PreparedStatement ps = conn.prepareStatement(sql);\n        ps.setString(1, nama);\n        ps.setString(2, email);\n        ps.executeUpdate();\n    }\n\n    public void tampilkanSemua() throws SQLException {\n        String sql = \"SELECT * FROM users\";\n        Statement stmt = conn.createStatement();\n        ResultSet rs = stmt.executeQuery(sql);\n\n        while (rs.next()) {\n            System.out.println(rs.getInt(\"id\") + \": \" + rs.getString(\"nama\"));\n        }\n    }\n}\n</code></pre>"},{"location":"lanjutan/jdbc_mysql/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"Langkah Penjelasan <code>DriverManager</code> Mengelola koneksi ke database <code>Connection</code> Objek utama koneksi <code>Statement</code> / <code>PreparedStatement</code> Menjalankan SQL <code>ResultSet</code> Menampung hasil SELECT Koneksi stabil Tutup koneksi setelah selesai <p>\u27a1\ufe0f Selanjutnya: Collection Framework Lanjutan</p>"},{"location":"lanjutan/lambda_expression/","title":"\ud83d\udd39 Lambda Expression di Java","text":"<p>Lambda Expression adalah cara baru dan ringkas untuk menulis fungsi anonim (tanpa nama) dalam Java. Biasanya digunakan untuk implementasi cepat dari interface fungsional (interface dengan satu method).</p>"},{"location":"lanjutan/lambda_expression/#format-dasar","title":"\ud83d\udd27 Format Dasar","text":"<pre><code>(parameter) -&gt; { body }\n````\n\nContoh:\n\n```java\n(a, b) -&gt; a + b\n() -&gt; System.out.println(\"Halo!\")\n</code></pre>"},{"location":"lanjutan/lambda_expression/#apa-itu-interface-fungsional","title":"\ud83e\udde0 Apa Itu Interface Fungsional?","text":"<p>Interface yang hanya memiliki satu method abstrak. Contoh:</p> <pre><code>@FunctionalInterface\ninterface Sapa {\n    void ucap();\n}\n</code></pre>"},{"location":"lanjutan/lambda_expression/#sebelum-vs-sesudah-lambda","title":"\ud83d\udd04 Sebelum vs Sesudah Lambda","text":"<p>Tanpa Lambda (Anonymous Class):</p> <pre><code>Runnable r = new Runnable() {\n    public void run() {\n        System.out.println(\"Berjalan!\");\n    }\n};\n</code></pre> <p>Dengan Lambda:</p> <pre><code>Runnable r = () -&gt; System.out.println(\"Berjalan!\");\n</code></pre>"},{"location":"lanjutan/lambda_expression/#contoh-lengkap-comparator","title":"\ud83d\udcd8 Contoh Lengkap: Comparator","text":"<pre><code>List&lt;String&gt; nama = Arrays.asList(\"Ali\", \"Marno\", \"Budi\");\n\nCollections.sort(nama, (a, b) -&gt; a.compareTo(b));\n</code></pre>"},{"location":"lanjutan/lambda_expression/#lambda-dengan-interface-kustom","title":"\ud83d\udca1 Lambda dengan Interface Kustom","text":"<pre><code>@FunctionalInterface\ninterface Operasi {\n    int hitung(int a, int b);\n}\n\npublic class Demo {\n    public static void main(String[] args) {\n        Operasi tambah = (a, b) -&gt; a + b;\n        Operasi kali = (a, b) -&gt; a * b;\n\n        System.out.println(tambah.hitung(5, 3)); // 8\n        System.out.println(kali.hitung(5, 3));   // 15\n    }\n}\n</code></pre>"},{"location":"lanjutan/lambda_expression/#lambda-sebagai-parameter","title":"\ud83d\udd04 Lambda sebagai Parameter","text":"<pre><code>public class Kalkulator {\n    public static int hitung(int a, int b, Operasi op) {\n        return op.hitung(a, b);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(hitung(10, 2, (x, y) -&gt; x - y)); // 8\n    }\n}\n</code></pre>"},{"location":"lanjutan/lambda_expression/#lambda-di-java-api-consumer-function-predicate","title":"\ud83d\udd0d Lambda di Java API: <code>Consumer</code>, <code>Function</code>, <code>Predicate</code>","text":"Interface Method Kegunaan <code>Consumer&lt;T&gt;</code> <code>accept(T t)</code> Melakukan aksi tanpa return <code>Function&lt;T,R&gt;</code> <code>apply(T t)</code> Mengubah data (return value) <code>Predicate&lt;T&gt;</code> <code>test(T t)</code> Mengecek kondisi (true/false) <p>Contoh:</p> <pre><code>Consumer&lt;String&gt; cetak = x -&gt; System.out.println(x);\nPredicate&lt;Integer&gt; genap = x -&gt; x % 2 == 0;\nFunction&lt;String, Integer&gt; panjang = s -&gt; s.length();\n</code></pre>"},{"location":"lanjutan/lambda_expression/#lambda-stream-preview","title":"\u2728 Lambda + Stream (Preview)","text":"<pre><code>List&lt;String&gt; nama = Arrays.asList(\"Ali\", \"Budi\", \"Cici\");\n\nnama.stream()\n    .filter(n -&gt; n.startsWith(\"C\"))\n    .forEach(n -&gt; System.out.println(n));\n</code></pre>"},{"location":"lanjutan/lambda_expression/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"Konsep Penjelasan Lambda Fungsi anonim (tanpa class atau method eksplisit) Functional Interface Hanya satu method abstrak Keunggulan Ringkas, efisien, ideal untuk pemrosesan koleksi <p>\u27a1\ufe0f Selanjutnya: Stream API (Pemrosesan Data Modern)</p>"},{"location":"lanjutan/multithreading/","title":"\ud83e\uddf5 Multithreading di Java","text":"<p>Multithreading adalah teknik untuk menjalankan banyak alur (thread) dalam satu program secara simultan/paralel.</p> <p>Setiap thread berjalan secara mandiri dan bisa dikelola bersama \u2014 sangat berguna untuk: - Aplikasi real-time - Proses background (ex: loading, sync) - Responsif UI (di Android / Swing) - Server concurrency (web, API)</p>"},{"location":"lanjutan/multithreading/#dua-cara-membuat-thread","title":"\ud83d\udccc Dua Cara Membuat Thread","text":""},{"location":"lanjutan/multithreading/#1-extend-thread-class","title":"1. Extend <code>Thread</code> Class","text":"<pre><code>public class Tugas extends Thread {\n    public void run() {\n        System.out.println(\"Thread berjalan: \" + getName());\n    }\n\n    public static void main(String[] args) {\n        Tugas t = new Tugas();\n        t.start(); // BUKAN t.run()\n    }\n}\n````\n\n---\n\n### 2. Implement `Runnable` Interface\n\n```java\npublic class Tugas implements Runnable {\n    public void run() {\n        System.out.println(\"Tugas dijalankan oleh: \" + Thread.currentThread().getName());\n    }\n\n    public static void main(String[] args) {\n        Thread t = new Thread(new Tugas());\n        t.start();\n    }\n}\n</code></pre>"},{"location":"lanjutan/multithreading/#perbedaan-start-vs-run","title":"\ud83d\udd01 Perbedaan <code>start()</code> vs <code>run()</code>","text":"Metode Apa yang Terjadi <code>start()</code> Membuat thread baru, lalu menjalankan <code>run()</code> di dalamnya <code>run()</code> Menjalankan method biasa, tanpa thread baru"},{"location":"lanjutan/multithreading/#contoh-loop-multithread","title":"\ud83e\uddea Contoh: Loop Multithread","text":"<pre><code>class CetakAngka implements Runnable {\n    public void run() {\n        for (int i = 1; i &lt;= 5; i++) {\n            System.out.println(Thread.currentThread().getName() + \": \" + i);\n        }\n    }\n\n    public static void main(String[] args) {\n        Thread t1 = new Thread(new CetakAngka(), \"Thread A\");\n        Thread t2 = new Thread(new CetakAngka(), \"Thread B\");\n\n        t1.start();\n        t2.start();\n    }\n}\n</code></pre>"},{"location":"lanjutan/multithreading/#sleep-dan-delay","title":"\u23f1\ufe0f Sleep dan Delay","text":"<pre><code>public class DelayDemo {\n    public static void main(String[] args) throws InterruptedException {\n        System.out.println(\"Mulai...\");\n        Thread.sleep(2000); // delay 2 detik\n        System.out.println(\"Selesai setelah delay\");\n    }\n}\n</code></pre>"},{"location":"lanjutan/multithreading/#prioritas-thread","title":"\ud83c\udfaf Prioritas Thread","text":"<pre><code>Thread t = new Thread(...);\nt.setPriority(Thread.MAX_PRIORITY); // atau MIN_PRIORITY / NORM_PRIORITY\n</code></pre>"},{"location":"lanjutan/multithreading/#interupsi-thread","title":"\u26d4 Interupsi Thread","text":"<pre><code>public class InterupsiDemo {\n    public static void main(String[] args) {\n        Thread t = new Thread(() -&gt; {\n            while (!Thread.currentThread().isInterrupted()) {\n                System.out.println(\"Berjalan...\");\n            }\n        });\n        t.start();\n        t.interrupt(); // mengirim sinyal interupsi\n    }\n}\n</code></pre>"},{"location":"lanjutan/multithreading/#tantangan-multithreading","title":"\u26a0\ufe0f Tantangan Multithreading","text":"<ul> <li>Race condition \u2192 dua thread menulis/membaca data bersamaan</li> <li>Deadlock \u2192 dua thread saling menunggu kunci</li> <li>Thread safety \u2192 pastikan akses ke resource dibatasi</li> </ul> <p>Solusinya: Gunakan <code>synchronized</code>, <code>Lock</code>, atau struktur data <code>Concurrent</code></p>"},{"location":"lanjutan/multithreading/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"Konsep Penjelasan Thread Jalur eksekusi paralel dalam satu program <code>run()</code> Method yang dijalankan oleh thread <code>start()</code> Memulai thread <code>Runnable</code> Interface untuk membuat thread fleksibel <code>sleep(ms)</code> Memberi delay sementara Bahaya Umum Race condition, deadlock, thread-safe <p>\u27a1\ufe0f Selanjutnya: Sinkronisasi Thread (synchronized)</p>"},{"location":"lanjutan/networking/","title":"\ud83c\udf10 Networking di Java (Client-Server via Socket)","text":"<p>Java mendukung pemrograman jaringan menggunakan <code>java.net</code>, termasuk: - Membuat koneksi TCP (client-server) - Komunikasi antar proses via Socket - Transfer data melalui stream</p>"},{"location":"lanjutan/networking/#konsep-dasar","title":"\ud83d\udcda Konsep Dasar","text":"Komponen Fungsi <code>ServerSocket</code> Mewakili server yang menunggu koneksi <code>Socket</code> Koneksi antara client dan server <code>InputStream</code> / <code>OutputStream</code> Mengirim dan menerima data via jaringan"},{"location":"lanjutan/networking/#membuat-server-tcp","title":"\ud83d\udda5\ufe0f Membuat Server TCP","text":"<pre><code>import java.io.*;\nimport java.net.*;\n\npublic class Server {\n    public static void main(String[] args) throws IOException {\n        ServerSocket server = new ServerSocket(1234);\n        System.out.println(\"Menunggu koneksi...\");\n\n        Socket client = server.accept();\n        System.out.println(\"Client terhubung!\");\n\n        BufferedReader input = new BufferedReader(new InputStreamReader(client.getInputStream()));\n        PrintWriter output = new PrintWriter(client.getOutputStream(), true);\n\n        String pesan = input.readLine();\n        System.out.println(\"Pesan dari client: \" + pesan);\n\n        output.println(\"Halo juga dari server!\");\n\n        client.close();\n        server.close();\n    }\n}\n````\n\n---\n\n## \ud83d\udcf1 Membuat Client TCP\n\n```java\nimport java.io.*;\nimport java.net.*;\n\npublic class Client {\n    public static void main(String[] args) throws IOException {\n        Socket socket = new Socket(\"localhost\", 1234);\n\n        BufferedReader input = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n        PrintWriter output = new PrintWriter(socket.getOutputStream(), true);\n\n        output.println(\"Hai server, saya client!\");\n        String balasan = input.readLine();\n        System.out.println(\"Dari server: \" + balasan);\n\n        socket.close();\n    }\n}\n</code></pre>"},{"location":"lanjutan/networking/#uji-program","title":"\ud83e\uddea Uji Program","text":"<ol> <li>Jalankan <code>Server.java</code> terlebih dahulu</li> <li>Jalankan <code>Client.java</code></li> <li>Perhatikan komunikasi antar dua program</li> </ol>"},{"location":"lanjutan/networking/#komunikasi-dua-arah-loop","title":"\ud83d\udd01 Komunikasi Dua Arah (Loop)","text":"<p>Tambahkan loop agar komunikasi bisa dilakukan berulang:</p> <pre><code>while (true) {\n    String pesan = input.readLine();\n    if (pesan.equalsIgnoreCase(\"exit\")) break;\n    output.println(\"Server balas: \" + pesan);\n}\n</code></pre>"},{"location":"lanjutan/networking/#tips-best-practice","title":"\ud83d\udea8 Tips &amp; Best Practice","text":"Saran Penjelasan Gunakan <code>try-with-resources</code> Untuk otomatis menutup koneksi/socket Tangani Exception dengan benar Gunakan <code>try-catch</code> agar tidak crash Gunakan multithreading Agar server bisa layani banyak client sekaligus Gunakan port &gt; 1024 Hindari port sistem (0\u20131023) tanpa izin admin"},{"location":"lanjutan/networking/#server-multithread-bonus","title":"\ud83e\uddf5 Server Multithread (Bonus)","text":"<pre><code>new Thread(() -&gt; {\n    try {\n        Socket client = server.accept();\n        // handle client di thread ini\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}).start();\n</code></pre>"},{"location":"lanjutan/networking/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"Konsep Penjelasan <code>ServerSocket</code> Menunggu koneksi client <code>Socket</code> Koneksi TCP aktif antara dua pihak <code>Input/OutputStream</code> Untuk mengirim/menerima data Threading Diperlukan untuk menangani banyak client <p>\u27a1\ufe0f Selanjutnya: Koneksi Database MySQL dengan JDBC</p>"},{"location":"lanjutan/overview/","title":"\ud83e\udded Java Tingkat Lanjutan: Roadmap &amp; Overview","text":"<p>Setelah memahami dasar-dasar dan konsep OOP di Java, saatnya melangkah ke level yang lebih dalam dan lebih luas. Java bukan hanya tentang class dan method \u2014 melainkan juga bagaimana kita membangun sistem yang fleksibel, efisien, dan scalable.</p>"},{"location":"lanjutan/overview/#apa-yang-akan-dipelajari","title":"\ud83d\udccc Apa yang Akan Dipelajari?","text":"Topik Deskripsi Singkat Generics Penulisan class dan method yang fleksibel untuk berbagai tipe data Lambda Expression Cara ringkas menulis kode fungsional menggunakan Java 8+ Stream API Pemrosesan data koleksi secara deklaratif &amp; efisien Multithreading Menjalankan banyak tugas secara paralel Synchronized Mengamankan data dalam lingkungan multi-thread Networking Komunikasi antara komputer (client-server) JDBC &amp; MySQL Koneksi dan manipulasi database langsung dari kode Java Collection Framework Lanjutan Struktur data profesional seperti <code>HashSet</code>, <code>TreeMap</code> Interface Fungsional Interface yang digunakan dalam lambda dan fungsional programming"},{"location":"lanjutan/overview/#mengapa-ini-penting","title":"\ud83d\udd0d Mengapa Ini Penting?","text":"<ul> <li>Generics membuat kode reusable tanpa kehilangan type safety</li> <li>Lambda &amp; Stream membuat penulisan logika koleksi lebih ringkas &amp; ekspresif</li> <li>Multithreading membantu program melakukan banyak hal sekaligus (tanpa delay)</li> <li>Networking &amp; JDBC menjembatani Java dengan dunia luar (API, DB, dll)</li> </ul>"},{"location":"lanjutan/overview/#prasyarat","title":"\ud83e\udde0 Prasyarat","text":"<p>Sebelum masuk bagian ini, kamu sebaiknya sudah menguasai:</p> <p>\u2705 Struktur dasar program Java \u2705 OOP: class, inheritance, polymorphism \u2705 Penggunaan collection seperti ArrayList &amp; HashMap \u2705 Penggunaan exception dan file I/O  </p>"},{"location":"lanjutan/overview/#alur-belajar-yang-disarankan","title":"\ud83d\uddfa\ufe0f Alur Belajar yang Disarankan","text":"<ol> <li>Generics \u2014 belajar generalisasi tipe data</li> <li>Lambda Expression \u2014 ringkas &amp; modern</li> <li>Stream API \u2014 pengolahan data ala Java 8</li> <li>Multithreading \u2014 concurrency dan paralelisme</li> <li>Synchronized \u2014 kendali keamanan di thread</li> <li>Networking \u2014 dasar komunikasi TCP/IP</li> <li>JDBC &amp; MySQL \u2014 koneksi database dari Java</li> <li>Interface Fungsional \u2014 dukungan OOP &amp; FP</li> <li>Struktur Data Lanjutan \u2014 untuk proyek nyata &amp; skala besar</li> </ol>"},{"location":"lanjutan/overview/#tujuan-akhir","title":"\ud83d\ude80 Tujuan Akhir","text":"<p>Setelah menyelesaikan bagian ini, kamu akan mampu membangun: - Aplikasi multithreaded - Program client-server sederhana - Sistem berbasis database - Program modular, efisien, dan siap dipakai di industri</p> <p>\u27a1\ufe0f Selanjutnya: Generics (Class &amp; Method Generik)</p>"},{"location":"lanjutan/stream_api/","title":"\ud83c\udf0a Stream API di Java","text":"<p>Stream API diperkenalkan di Java 8 untuk memproses koleksi data seperti <code>List</code>, <code>Set</code>, dll., dengan cara yang:</p> <p>\u2705 Lebih deklaratif \u2705 Lebih efisien \u2705 Lebih readable  </p> <p>Think: <code>data.stream().filter().map().collect()</code> \ud83c\udfaf</p>"},{"location":"lanjutan/stream_api/#cara-membuat-stream","title":"\ud83d\udd27 Cara Membuat Stream","text":"<pre><code>List&lt;String&gt; nama = Arrays.asList(\"Ali\", \"Budi\", \"Cici\");\nStream&lt;String&gt; stream = nama.stream();\n````\n\n---\n\n## \ud83d\ude80 Operasi Stream\n\n| Jenis        | Operasi                                 | Contoh                            |\n| ------------ | --------------------------------------- | --------------------------------- |\n| Intermediate | `filter`, `map`, `sorted`               | Mengubah atau menyaring data      |\n| Terminal     | `forEach`, `collect`, `count`, `reduce` | Mengakhiri dan menghasilkan hasil |\n\n---\n\n## \ud83c\udfaf Contoh: Filter Nama\n\n```java\nList&lt;String&gt; nama = Arrays.asList(\"Ali\", \"Budi\", \"Cici\");\n\nnama.stream()\n    .filter(n -&gt; n.startsWith(\"C\"))\n    .forEach(System.out::println);\n// Output: Cici\n</code></pre>"},{"location":"lanjutan/stream_api/#map-mengubah-isi-koleksi","title":"\ud83d\udd04 <code>map()</code>: Mengubah Isi Koleksi","text":"<pre><code>List&lt;String&gt; nama = Arrays.asList(\"Ali\", \"Budi\", \"Cici\");\n\nList&lt;String&gt; hurufBesar = nama.stream()\n    .map(String::toUpperCase)\n    .collect(Collectors.toList());\n\nSystem.out.println(hurufBesar); // [ALI, BUDI, CICI]\n</code></pre>"},{"location":"lanjutan/stream_api/#collect-mengubah-stream-jadi-koleksi","title":"\ud83d\udce6 <code>collect()</code>: Mengubah Stream Jadi Koleksi","text":"<pre><code>List&lt;Integer&gt; angka = Arrays.asList(1, 2, 3, 4);\n\nList&lt;Integer&gt; genap = angka.stream()\n    .filter(n -&gt; n % 2 == 0)\n    .collect(Collectors.toList());\n\nSystem.out.println(genap); // [2, 4]\n</code></pre>"},{"location":"lanjutan/stream_api/#count-menghitung-jumlah-elemen","title":"\ud83d\udd22 <code>count()</code>: Menghitung Jumlah Elemen","text":"<pre><code>long jumlah = nama.stream().count();\n</code></pre>"},{"location":"lanjutan/stream_api/#sorted-mengurutkan-elemen","title":"\ud83d\udd01 <code>sorted()</code>: Mengurutkan Elemen","text":"<pre><code>List&lt;String&gt; urut = nama.stream()\n    .sorted()\n    .collect(Collectors.toList());\n\nSystem.out.println(urut); // [Ali, Budi, Cici]\n</code></pre>"},{"location":"lanjutan/stream_api/#findfirst-dan-anymatch","title":"\ud83d\udd0d <code>findFirst()</code> dan <code>anyMatch()</code>","text":"<pre><code>Optional&lt;String&gt; pertama = nama.stream().findFirst();\nboolean adaC = nama.stream().anyMatch(n -&gt; n.startsWith(\"C\"));\n</code></pre>"},{"location":"lanjutan/stream_api/#reduce-menggabungkan-elemen","title":"\ud83d\udd02 <code>reduce()</code>: Menggabungkan Elemen","text":"<pre><code>int total = Arrays.asList(1, 2, 3, 4).stream()\n    .reduce(0, (a, b) -&gt; a + b);\n\nSystem.out.println(total); // 10\n</code></pre>"},{"location":"lanjutan/stream_api/#studi-kasus-gaji-pekerja","title":"\ud83d\udccc Studi Kasus: Gaji Pekerja","text":"<pre><code>class Pekerja {\n    String nama;\n    double gaji;\n\n    public Pekerja(String nama, double gaji) {\n        this.nama = nama;\n        this.gaji = gaji;\n    }\n\n    public double getGaji() { return gaji; }\n    public String getNama() { return nama; }\n}\n</code></pre> <pre><code>List&lt;Pekerja&gt; data = Arrays.asList(\n    new Pekerja(\"Ali\", 1500),\n    new Pekerja(\"Budi\", 1800),\n    new Pekerja(\"Cici\", 2000)\n);\n\ndouble total = data.stream()\n    .mapToDouble(Pekerja::getGaji)\n    .sum();\n\nSystem.out.println(\"Total gaji: \" + total);\n</code></pre>"},{"location":"lanjutan/stream_api/#catatan","title":"\u26a0\ufe0f Catatan","text":"<ul> <li>Stream sekali pakai</li> <li>Tidak mengubah data asli (immutable)</li> <li>Bisa digabung dengan lambda, method reference, dan generics</li> </ul>"},{"location":"lanjutan/stream_api/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"Operasi Fungsi <code>filter()</code> Menyaring data <code>map()</code> Mengubah data <code>sorted()</code> Mengurutkan <code>collect()</code> Menghasilkan koleksi baru <code>reduce()</code> Menggabungkan ke satu nilai <code>forEach()</code> Iterasi akhir <p>\u27a1\ufe0f Selanjutnya: Multithreading (Thread &amp; Runnable)</p>"},{"location":"lanjutan/synchronized/","title":"\ud83e\uddf7 Sinkronisasi dengan <code>synchronized</code> di Java","text":"<p>Ketika beberapa thread mengakses data atau resource yang sama, risiko konflik seperti race condition bisa terjadi. Untuk mencegahnya, Java menyediakan keyword <code>synchronized</code> \u2014 seperti lampu merah bagi thread \ud83d\udea6</p>"},{"location":"lanjutan/synchronized/#masalah-tanpa-sinkronisasi","title":"\ud83d\udd25 Masalah Tanpa Sinkronisasi","text":"<pre><code>public class Counter implements Runnable {\n    private int hitung = 0;\n\n    public void tambah() {\n        hitung++;\n    }\n\n    public void run() {\n        for (int i = 0; i &lt; 1000; i++) tambah();\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        Counter c = new Counter();\n        Thread t1 = new Thread(c);\n        Thread t2 = new Thread(c);\n\n        t1.start(); t2.start();\n        t1.join(); t2.join();\n\n        System.out.println(\"Total: \" + c.hitung); // hasil bisa acak!\n    }\n}\n````\n\n---\n\n## \u2705 Solusi: Gunakan `synchronized`\n\n### \ud83d\udd12 Pada Method\n\n```java\npublic synchronized void tambah() {\n    hitung++;\n}\n</code></pre>"},{"location":"lanjutan/synchronized/#pada-blok","title":"\ud83d\udd12 Pada Blok","text":"<pre><code>public void tambah() {\n    synchronized (this) {\n        hitung++;\n    }\n}\n</code></pre>"},{"location":"lanjutan/synchronized/#synchronized-static","title":"\ud83d\udcd8 synchronized Static","text":"<p>Jika method static, maka kunci berlaku untuk class, bukan objek.</p> <pre><code>public static synchronized void tulis() {\n    // hanya 1 thread bisa akses method ini di seluruh JVM\n}\n</code></pre>"},{"location":"lanjutan/synchronized/#contoh-atm-simulasi","title":"\ud83d\udca1 Contoh: ATM Simulasi","text":"<pre><code>class ATM {\n    private int saldo = 1000;\n\n    public synchronized void tarik(int jumlah) {\n        if (saldo &gt;= jumlah) {\n            System.out.println(Thread.currentThread().getName() + \" menarik \" + jumlah);\n            saldo -= jumlah;\n            System.out.println(\"Sisa saldo: \" + saldo);\n        } else {\n            System.out.println(\"Saldo tidak cukup untuk \" + Thread.currentThread().getName());\n        }\n    }\n}\n</code></pre>"},{"location":"lanjutan/synchronized/#synchronized-vs-lock","title":"\ud83d\udd0d synchronized vs Lock","text":"Fitur <code>synchronized</code> <code>Lock</code> (java.util.concurrent.locks) Syntax Mudah &amp; ringkas Lebih fleksibel Fitur lanjutan Tidak tersedia <code>tryLock</code>, <code>interruptible</code>, dll Performance Kadang kurang efisien Lebih optimal di sistem kompleks <p>Gunakan <code>ReentrantLock</code> jika butuh kontrol lebih dalam.</p>"},{"location":"lanjutan/synchronized/#best-practice","title":"\u26a0\ufe0f Best Practice","text":"<ul> <li>Gunakan <code>synchronized</code> hanya pada bagian kritis (yang akses resource bersama)</li> <li>Jangan menyinkronkan terlalu luas (bisa menyebabkan deadlock)</li> <li>Hindari nested <code>synchronized</code> kecuali benar-benar dibutuhkan</li> <li>Gunakan <code>volatile</code> untuk variable yang dibaca banyak thread tanpa sync</li> </ul>"},{"location":"lanjutan/synchronized/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"Konsep Penjelasan <code>synchronized</code> Kunci eksklusif agar hanya 1 thread yang akses blok data <code>synchronized</code> method Otomatis mengunci objek (atau class jika static) Blok sinkron Bisa hanya pada bagian kritis saja Tujuan utama Mencegah race condition &amp; data inkonsisten <p>\u27a1\ufe0f Selanjutnya: Networking (Socket Programming)</p>"},{"location":"menengah/array_list/","title":"\ud83e\uddee Array dan ArrayList dalam Java","text":"<p>Dalam pemrograman Java, Array dan ArrayList adalah dua struktur data yang digunakan untuk menyimpan kumpulan data secara berurutan. Keduanya memiliki kegunaan spesifik: Array cocok untuk data dengan ukuran tetap, sedangkan ArrayList menawarkan fleksibilitas dengan ukuran dinamis. Bagian ini menjelaskan cara menggunakan Array dan ArrayList, perbedaan utama, serta metode penting untuk mengelola data.</p>"},{"location":"menengah/array_list/#1-array-struktur-data-dengan-ukuran-tetap","title":"1\ufe0f\u20e3 Array: Struktur Data dengan Ukuran Tetap","text":"<p>Array adalah struktur data yang menyimpan elemen-elemen dengan tipe data yang sama dalam ukuran yang tetap (tidak dapat diubah setelah dideklarasikan). Array efisien untuk akses cepat berdasarkan indeks, tetapi kurang fleksibel untuk operasi seperti penambahan atau penghapusan elemen.</p>"},{"location":"menengah/array_list/#deklarasi-dan-inisialisasi-array","title":"Deklarasi dan Inisialisasi Array:","text":"<pre><code>public class ArrayDemo {\n    public static void main(String[] args) {\n        // Deklarasi dengan ukuran\n        int[] angka = new int[3];\n        angka[0] = 10;\n        angka[1] = 20;\n        angka[2] = 30;\n\n        // Deklarasi langsung\n        String[] nama = {\"Ali\", \"Budi\", \"Cici\"};\n    }\n}\n</code></pre>"},{"location":"menengah/array_list/#iterasi-array","title":"Iterasi Array:","text":"<pre><code>public class ArrayIterationDemo {\n    public static void main(String[] args) {\n        int[] angka = {10, 20, 30};\n\n        // Menggunakan for loop\n        for (int i = 0; i &lt; angka.length; i++) {\n            System.out.println(\"Angka ke-\" + i + \": \" + angka[i]);\n        }\n\n        // Menggunakan for-each\n        String[] nama = {\"Ali\", \"Budi\", \"Cici\"};\n        for (String n : nama) {\n            System.out.println(\"Nama: \" + n);\n        }\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Angka ke-0: 10\nAngka ke-1: 20\nAngka ke-2: 30\nNama: Ali\nNama: Budi\nNama: Cici\n</code></pre>"},{"location":"menengah/array_list/#keterbatasan-array","title":"Keterbatasan Array:","text":"<ul> <li>Ukuran Tetap: Tidak dapat menambah atau menghapus elemen setelah deklarasi.</li> <li>Fungsionalitas Terbatas: Tidak memiliki method bawaan untuk operasi seperti pencarian atau penghapusan.</li> <li>Rawan Kesalahan: Akses di luar batas array menyebabkan <code>ArrayIndexOutOfBoundsException</code>.</li> </ul>"},{"location":"menengah/array_list/#2-arraylist-struktur-data-dengan-ukuran-dinamis","title":"2\ufe0f\u20e3 ArrayList: Struktur Data dengan Ukuran Dinamis","text":"<p>ArrayList adalah bagian dari Java Collection Framework (JCF) yang menyediakan struktur data dinamis untuk menyimpan elemen. ArrayList dapat mengubah ukurannya secara otomatis dan mendukung berbagai method untuk manipulasi data. ArrayList hanya dapat menyimpan objek (bukan tipe primitif), sehingga tipe primitif seperti <code>int</code> harus menggunakan wrapper class seperti <code>Integer</code>.</p>"},{"location":"menengah/array_list/#deklarasi-dan-penggunaan","title":"Deklarasi dan Penggunaan:","text":"<pre><code>import java.util.ArrayList;\n\npublic class ArrayListDemo {\n    public static void main(String[] args) {\n        ArrayList&lt;String&gt; buah = new ArrayList&lt;&gt;();\n        buah.add(\"Mangga\");\n        buah.add(\"Durian\");\n        buah.add(\"Kelapa\");\n\n        System.out.println(\"Daftar buah: \" + buah);\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Daftar buah: [Mangga, Durian, Kelapa]\n</code></pre> <p>\ud83d\udccc Catatan: Pastikan untuk mengimpor <code>java.util.ArrayList</code> sebelum menggunakan ArrayList.</p>"},{"location":"menengah/array_list/#method-penting-arraylist","title":"Method Penting ArrayList:","text":"Method Keterangan <code>add(item)</code> Menambahkan elemen ke akhir daftar. <code>get(index)</code> Mengambil elemen pada indeks tertentu. <code>set(index, item)</code> Mengganti elemen pada indeks tertentu. <code>remove(index)</code> Menghapus elemen pada indeks tertentu. <code>size()</code> Mengembalikan jumlah elemen. <code>clear()</code> Menghapus semua elemen. <code>contains(item)</code> Memeriksa apakah elemen ada di daftar."},{"location":"menengah/array_list/#contoh-penggunaan-method","title":"Contoh Penggunaan Method:","text":"<pre><code>import java.util.ArrayList;\n\npublic class ArrayListMethodDemo {\n    public static void main(String[] args) {\n        ArrayList&lt;String&gt; tim = new ArrayList&lt;&gt;();\n        tim.add(\"Mandor\");\n        tim.add(\"Pemotong\");\n        tim.add(\"Penyusun\");\n\n        // Mengakses elemen\n        System.out.println(\"Elemen pertama: \" + tim.get(0));\n\n        // Mengganti elemen\n        tim.set(1, \"Pemanen\");\n        System.out.println(\"Setelah diganti: \" + tim);\n\n        // Menghapus elemen\n        tim.remove(2);\n        System.out.println(\"Setelah dihapus: \" + tim);\n\n        // Mengecek ukuran\n        System.out.println(\"Jumlah anggota tim: \" + tim.size());\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Elemen pertama: Mandor\nSetelah diganti: [Mandor, Pemanen, Penyusun]\nSetelah dihapus: [Mandor, Pemanen]\nJumlah anggota tim: 2\n</code></pre>"},{"location":"menengah/array_list/#perbandingan-array-vs-arraylist","title":"\u2696\ufe0f Perbandingan Array vs. ArrayList","text":"Fitur Array ArrayList Ukuran Tetap (tidak dapat diubah) Dinamis (dapat bertambah/kurang) Tipe Data Primitif atau objek Hanya objek (gunakan wrapper class untuk primitif) Import Tidak perlu Perlu <code>java.util.ArrayList</code> Method Bantu Terbatas (hanya <code>.length</code>) Banyak (<code>add</code>, <code>remove</code>, dll.) Performa Lebih cepat untuk akses sederhana Sedikit lebih lambat, tapi fleksibel <p>\ud83d\udca1 Tips: Gunakan Array untuk data dengan ukuran tetap dan performa tinggi, dan ArrayList untuk data yang sering berubah atau memerlukan manipulasi.</p>"},{"location":"menengah/array_list/#konversi-antara-array-dan-arraylist","title":"\ud83d\udd01 Konversi Antara Array dan ArrayList","text":""},{"location":"menengah/array_list/#array-ke-arraylist","title":"Array ke ArrayList:","text":"<pre><code>import java.util.ArrayList;\nimport java.util.Arrays;\n\npublic class ArrayToArrayListDemo {\n    public static void main(String[] args) {\n        String[] data = {\"A\", \"B\", \"C\"};\n        ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;(Arrays.asList(data));\n        System.out.println(\"ArrayList: \" + list);\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>ArrayList: [A, B, C]\n</code></pre>"},{"location":"menengah/array_list/#arraylist-ke-array","title":"ArrayList ke Array:","text":"<pre><code>import java.util.ArrayList;\n\npublic class ArrayListToArrayDemo {\n    public static void main(String[] args) {\n        ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();\n        list.add(\"A\");\n        list.add(\"B\");\n        String[] arrayBaru = list.toArray(new String[0]);\n        System.out.println(\"Array: \" + Arrays.toString(arrayBaru));\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Array: [A, B]\n</code></pre>"},{"location":"menengah/array_list/#studi-kasus-sistem-daftar-pekerja","title":"\ud83e\uddea Studi Kasus: Sistem Daftar Pekerja","text":"<p>Berikut adalah contoh penggunaan ArrayList untuk mengelola daftar nama pekerja dalam proyek.</p> <pre><code>import java.util.ArrayList;\n\npublic class PekerjaDemo {\n    public static void main(String[] args) {\n        ArrayList&lt;String&gt; pekerja = new ArrayList&lt;&gt;();\n        pekerja.add(\"Ali\");\n        pekerja.add(\"Budi\");\n        pekerja.add(\"Cici\");\n\n        // Iterasi dengan for loop\n        for (int i = 0; i &lt; pekerja.size(); i++) {\n            System.out.printf(\"Pekerja %d: %s%n\", i + 1, pekerja.get(i));\n        }\n\n        // Menambahkan pekerja baru\n        pekerja.add(\"Dedi\");\n        System.out.println(\"Setelah menambah pekerja: \" + pekerja);\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Pekerja 1: Ali\nPekerja 2: Budi\nPekerja 3: Cici\nSetelah menambah pekerja: [Ali, Budi, Cici, Dedi]\n</code></pre>"},{"location":"menengah/array_list/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"<p>Array dan ArrayList adalah alat penting untuk mengelola kumpulan data:</p> Konsep Penjelasan Array Struktur statis, efisien, cocok untuk ukuran tetap. ArrayList Struktur dinamis, fleksibel, cocok untuk manipulasi data. Pilihan Gunakan ArrayList untuk kebanyakan aplikasi modern. <p>\ud83c\udfaf Tujuan Utama: Memilih struktur data yang tepat (Array atau ArrayList) bergantung pada kebutuhan ukuran dan fleksibilitas.</p>"},{"location":"menengah/array_list/#langkah-selanjutnya","title":"\ud83d\udcda Langkah Selanjutnya","text":"<p>Pelajari lebih lanjut tentang HashMap dan Struktur Data Key-Value untuk memahami cara menyimpan data dengan pasangan kunci-nilai.</p> <p>\u2b05\ufe0f Kembali: Polymorphism (Polimorfisme)</p>"},{"location":"menengah/enum/","title":"\ud83c\udf96\ufe0f Enum (Enumerasi) dalam Java","text":"<p>Enum (singkatan dari enumeration) adalah tipe data khusus di Java yang memungkinkan kita menyimpan sekumpulan nilai tetap (konstanta) dalam satu blok.</p> <p>Sederhananya:</p> <p><code>enum</code> = sekumpulan <code>final static</code> value yang dikemas rapi</p>"},{"location":"menengah/enum/#contoh-penggunaan-enum","title":"\ud83d\udd27 Contoh Penggunaan Enum","text":"<pre><code>public enum Role {\n    ADMIN,\n    MANDOR,\n    PEKERJA\n}\n````\n\nCara menggunakannya:\n\n```java\npublic class User {\n    Role role;\n\n    public User(Role role) {\n        this.role = role;\n    }\n\n    public void printRole() {\n        System.out.println(\"Peran: \" + role);\n    }\n\n    public static void main(String[] args) {\n        User u = new User(Role.MANDOR);\n        u.printRole(); // Output: Peran: MANDOR\n    }\n}\n</code></pre>"},{"location":"menengah/enum/#kelebihan-enum","title":"\ud83d\udccb Kelebihan Enum","text":"<ul> <li>Nilai enum tidak bisa berubah (konstanta)</li> <li>Kode jadi lebih aman, tidak rawan typo</li> <li>Bisa digunakan dalam switch-case</li> <li>Enum di Java adalah class khusus, bisa punya method &amp; constructor</li> </ul>"},{"location":"menengah/enum/#enum-dalam-switch","title":"\ud83c\udfaf Enum dalam <code>switch</code>","text":"<pre><code>public class ContohSwitch {\n    public static void main(String[] args) {\n        Role role = Role.PEKERJA;\n\n        switch (role) {\n            case ADMIN:\n                System.out.println(\"Akses penuh\");\n                break;\n            case MANDOR:\n                System.out.println(\"Akses manajemen tim\");\n                break;\n            case PEKERJA:\n                System.out.println(\"Akses lihat data pribadi\");\n                break;\n        }\n    }\n}\n</code></pre>"},{"location":"menengah/enum/#enum-dengan-constructor-method","title":"\ud83e\udde0 Enum dengan Constructor &amp; Method","text":"<pre><code>public enum Grade {\n    PEMOTONG(0.4),\n    PENYUSUN(0.35),\n    PENGUTIP(0.25);\n\n    private final double persentase;\n\n    Grade(double persentase) {\n        this.persentase = persentase;\n    }\n\n    public double getPersentase() {\n        return persentase;\n    }\n}\n</code></pre> <p>Penggunaan:</p> <pre><code>System.out.println(\"Pemotong: \" + Grade.PEMOTONG.getPersentase());\n// Output: Pemotong: 0.4\n</code></pre>"},{"location":"menengah/enum/#best-practice-enum","title":"\ud83d\udccc Best Practice Enum","text":"<ul> <li>Gunakan enum untuk data tetap &amp; terbatas</li> <li>Enum membuat kode lebih bersih, aman, dan terstruktur</li> <li>Cocok untuk: status, kategori, role, jenis pekerjaan, level prioritas, dll</li> </ul>"},{"location":"menengah/enum/#studi-kasus-status-panen","title":"\ud83e\uddea Studi Kasus: Status Panen","text":"<pre><code>public enum StatusPanen {\n    TERJADWAL,\n    SELESAI,\n    DITUNDA\n}\n</code></pre> <pre><code>public class Panen {\n    StatusPanen status;\n\n    public Panen(StatusPanen status) {\n        this.status = status;\n    }\n\n    public void cekStatus() {\n        switch (status) {\n            case TERJADWAL:\n                System.out.println(\"Panen akan dilakukan sesuai jadwal.\");\n                break;\n            case SELESAI:\n                System.out.println(\"Panen telah selesai.\");\n                break;\n            case DITUNDA:\n                System.out.println(\"Panen ditunda karena cuaca.\");\n                break;\n        }\n    }\n}\n</code></pre>"},{"location":"menengah/enum/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"Konsep Penjelasan <code>enum</code> Tipe data untuk kumpulan nilai tetap Gunanya Menghindari hardcode string/int dalam logic Bisa Digunakan dalam switch, punya method &amp; constructor <p>\u27a1\ufe0f Selanjutnya: Inner Class (Class dalam Class)</p>"},{"location":"menengah/exception_handling/","title":"\ud83d\uded1 Exception Handling (Penanganan Error) dalam Java","text":"<p>Tidak semua program berjalan mulus. Error bisa terjadi karena: - Input tidak valid - File tidak ditemukan - Pembagian oleh nol - Koneksi gagal - Dan lainnya...</p> <p>Untuk itulah Java menyediakan mekanisme exception handling agar error bisa ditangani dengan elegan \u2014 bukan bikin program langsung crash.</p>"},{"location":"menengah/exception_handling/#apa-itu-exception","title":"\ud83e\udde0 Apa Itu Exception?","text":"<p>Exception adalah kondisi tidak normal yang terjadi saat program berjalan (runtime error), dan bisa ditangkap serta ditangani.</p> <p>Contoh: <pre><code>int a = 5 / 0; // ArithmeticException\n````\n\n---\n\n## \ud83e\uddf1 Struktur Dasar try-catch\n\n```java\ntry {\n    // kode yang berpotensi error\n} catch (ExceptionTipe e) {\n    // penanganan error\n}\n</code></pre></p> <p>Contoh:</p> <pre><code>public class Demo {\n    public static void main(String[] args) {\n        try {\n            int a = 5 / 0;\n        } catch (ArithmeticException e) {\n            System.out.println(\"Terjadi kesalahan: \" + e.getMessage());\n        }\n    }\n}\n</code></pre> <p>\ud83d\udca1 Output:</p> <pre><code>Terjadi kesalahan: / by zero\n</code></pre>"},{"location":"menengah/exception_handling/#blok-finally","title":"\ud83d\udd01 Blok finally","text":"<p><code>finally</code> akan selalu dieksekusi, baik ada exception maupun tidak. Cocok untuk:</p> <ul> <li>Menutup file</li> <li>Melepas koneksi</li> <li>Membersihkan resource</li> </ul> <pre><code>try {\n    int[] data = {1, 2};\n    System.out.println(data[5]);\n} catch (ArrayIndexOutOfBoundsException e) {\n    System.out.println(\"Index error!\");\n} finally {\n    System.out.println(\"Selesai.\");\n}\n</code></pre>"},{"location":"menengah/exception_handling/#multiple-catch","title":"\ud83c\udfaf Multiple Catch","text":"<p>Menangkap lebih dari satu tipe exception:</p> <pre><code>try {\n    String s = null;\n    System.out.println(s.length());\n} catch (ArithmeticException e) {\n    System.out.println(\"Error matematika\");\n} catch (NullPointerException e) {\n    System.out.println(\"Null error\");\n}\n</code></pre>"},{"location":"menengah/exception_handling/#menggunakan-throw","title":"\ud83c\udfaf Menggunakan <code>throw</code>","text":"<p>Digunakan untuk melempar exception secara manual:</p> <pre><code>throw new IllegalArgumentException(\"Umur tidak boleh negatif\");\n</code></pre>"},{"location":"menengah/exception_handling/#menggunakan-throws","title":"\ud83c\udfaf Menggunakan <code>throws</code>","text":"<p>Digunakan untuk mendeklarasikan bahwa method bisa melempar exception:</p> <pre><code>void bacaFile() throws IOException {\n    FileReader fr = new FileReader(\"data.txt\");\n}\n</code></pre>"},{"location":"menengah/exception_handling/#hierarki-exception-java","title":"\ud83d\udcda Hierarki Exception Java","text":"<pre><code>Throwable\n\u251c\u2500\u2500 Error (tidak perlu ditangani)\n\u2514\u2500\u2500 Exception\n    \u251c\u2500\u2500 CheckedException  (harus ditangani)\n    \u2514\u2500\u2500 UncheckedException (boleh ditangani)\n</code></pre> Jenis Contoh Harus ditangani? CheckedException IOException, SQLException \u2705 Ya UncheckedException NullPointerException, ArithmeticException \u274c Opsional"},{"location":"menengah/exception_handling/#studi-kasus-validasi-umur","title":"\ud83e\uddea Studi Kasus: Validasi Umur","text":"<pre><code>class Mahasiswa {\n    void setUmur(int umur) {\n        if (umur &lt; 0) {\n            throw new IllegalArgumentException(\"Umur tidak boleh negatif\");\n        }\n        System.out.println(\"Umur: \" + umur);\n    }\n}\n</code></pre>"},{"location":"menengah/exception_handling/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"Konsep Penjelasan try-catch Menangkap dan menangani error finally Eksekusi wajib (cleanup) throw Melempar error secara manual throws Mendeklarasikan bahwa method bisa error Exception Objek kesalahan yang bisa ditangani <p>\u27a1\ufe0f Selanjutnya: Array dan ArrayList</p>"},{"location":"menengah/file_io/","title":"\ud83d\udcc1 File I/O (Input dan Output File) dalam Java","text":"<p>Java menyediakan API yang kuat untuk File Input/Output (I/O), memungkinkan program untuk membaca dan menulis data ke file, baik dalam format teks maupun biner. Bagian ini berfokus pada operasi I/O untuk file teks menggunakan kelas seperti <code>FileReader</code>, <code>BufferedReader</code>, <code>FileWriter</code>, dan <code>BufferedWriter</code>, serta pengelolaan file dan folder dengan kelas <code>File</code>.</p>"},{"location":"menengah/file_io/#tujuan-file-io","title":"Tujuan File I/O","text":"<ul> <li>Membaca Data: Mengambil konten dari file untuk diproses.</li> <li>Menulis Data: Menyimpan hasil program ke file untuk penyimpanan permanen.</li> <li>Mengelola File/Folder: Memeriksa keberadaan file atau membuat direktori.</li> </ul>"},{"location":"menengah/file_io/#membaca-file-teks","title":"\ud83d\udce5 Membaca File Teks","text":"<p>Untuk membaca file teks, gunakan <code>BufferedReader</code> bersama <code>FileReader</code> untuk efisiensi, karena <code>BufferedReader</code> membaca data per baris dengan buffer, mengurangi akses langsung ke disk.</p>"},{"location":"menengah/file_io/#contoh-dengan-bufferedreader-menggunakan-try-with-resources","title":"Contoh dengan <code>BufferedReader</code> (Menggunakan Try-with-Resources):","text":"<pre><code>import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class BacaFileDemo {\n    public static void main(String[] args) {\n        try (BufferedReader reader = new BufferedReader(new FileReader(\"data.txt\"))) {\n            String baris;\n            while ((baris = reader.readLine()) != null) {\n                System.out.println(baris);\n            }\n        } catch (IOException e) {\n            System.out.println(\"Gagal membaca file: \" + e.getMessage());\n        }\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output (jika data.txt berisi):</p> <pre><code>Ali\nBudi\nCici\n</code></pre> <p>\ud83d\udca1 Tips: Gunakan try-with-resources untuk memastikan file ditutup secara otomatis, mengurangi risiko kebocoran sumber daya.</p>"},{"location":"menengah/file_io/#menulis-ke-file-teks","title":"\ud83d\udcdd Menulis ke File Teks","text":"<p>Untuk menulis ke file teks, gunakan <code>BufferedWriter</code> bersama <code>FileWriter</code> untuk efisiensi dan kemudahan menulis data per baris.</p>"},{"location":"menengah/file_io/#contoh-dengan-bufferedwriter","title":"Contoh dengan <code>BufferedWriter</code>:","text":"<pre><code>import java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic class TulisFileDemo {\n    public static void main(String[] args) {\n        try (BufferedWriter writer = new BufferedWriter(new FileWriter(\"output.txt\"))) {\n            writer.write(\"Data panen berhasil dicatat.\");\n            writer.newLine();\n            writer.write(\"Total berat: 1234 kg\");\n            System.out.println(\"Berhasil menulis file.\");\n        } catch (IOException e) {\n            System.out.println(\"Gagal menulis file: \" + e.getMessage());\n        }\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output (di konsol):</p> <pre><code>Berhasil menulis file.\n</code></pre> <p>Isi file output.txt:</p> <pre><code>Data panen berhasil dicatat.\nTotal berat: 1234 kg\n</code></pre>"},{"location":"menengah/file_io/#menambahkan-data-ke-file-append","title":"\ud83d\udd04 Menambahkan Data ke File (Append)","text":"<p>Untuk menambahkan data tanpa menimpa isi file yang ada, gunakan parameter <code>true</code> pada konstruktor <code>FileWriter</code>.</p>"},{"location":"menengah/file_io/#contoh-append","title":"Contoh Append:","text":"<pre><code>import java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic class AppendFileDemo {\n    public static void main(String[] args) {\n        try (BufferedWriter writer = new BufferedWriter(new FileWriter(\"log.txt\", true))) {\n            writer.write(\"Tambahan data: 2025-07-15\");\n            writer.newLine();\n            System.out.println(\"Berhasil menambahkan data ke file.\");\n        } catch (IOException e) {\n            System.out.println(\"Gagal menambahkan data: \" + e.getMessage());\n        }\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output (di konsol):</p> <pre><code>Berhasil menambahkan data ke file.\n</code></pre> <p>\ud83d\udccc Catatan: Parameter <code>true</code> pada <code>FileWriter</code> mengaktifkan mode append. Tanpa parameter ini, file akan ditimpa.</p>"},{"location":"menengah/file_io/#memeriksa-keberadaan-file","title":"\ud83d\udcc4 Memeriksa Keberadaan File","text":"<p>Kelas <code>File</code> digunakan untuk mengelola informasi file dan folder, seperti memeriksa keberadaan file.</p>"},{"location":"menengah/file_io/#contoh","title":"Contoh:","text":"<pre><code>import java.io.File;\n\npublic class CekFileDemo {\n    public static void main(String[] args) {\n        File file = new File(\"data.txt\");\n        if (file.exists()) {\n            System.out.println(\"File ditemukan: \" + file.getAbsolutePath());\n        } else {\n            System.out.println(\"File tidak ada.\");\n        }\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output (jika file ada):</p> <pre><code>File ditemukan: /path/to/data.txt\n</code></pre>"},{"location":"menengah/file_io/#membuat-folder","title":"\ud83d\udcc2 Membuat Folder","text":"<p>Kelas <code>File</code> juga dapat digunakan untuk membuat direktori baru.</p>"},{"location":"menengah/file_io/#contoh_1","title":"Contoh:","text":"<pre><code>import java.io.File;\n\npublic class BuatFolderDemo {\n    public static void main(String[] args) {\n        File folder = new File(\"rekap\");\n        if (!folder.exists()) {\n            if (folder.mkdir()) {\n                System.out.println(\"Folder 'rekap' berhasil dibuat.\");\n            } else {\n                System.out.println(\"Gagal membuat folder.\");\n            }\n        } else {\n            System.out.println(\"Folder sudah ada.\");\n        }\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output (jika folder belum ada):</p> <pre><code>Folder 'rekap' berhasil dibuat.\n</code></pre>"},{"location":"menengah/file_io/#exception-umum-dalam-file-io","title":"\u26a0\ufe0f Exception Umum dalam File I/O","text":"<p>Operasi File I/O sering kali memicu exception yang perlu ditangani:</p> Exception Penyebab <code>FileNotFoundException</code> File tidak ditemukan atau tidak dapat diakses. <code>IOException</code> Error umum I/O, seperti masalah izin atau kegagalan perangkat. <p>\ud83d\udca1 Tips: Selalu tangani exception dengan try-catch dan gunakan try-with-resources untuk menutup sumber daya secara otomatis.</p>"},{"location":"menengah/file_io/#studi-kasus-menyimpan-daftar-pekerja-ke-file","title":"\ud83e\uddea Studi Kasus: Menyimpan Daftar Pekerja ke File","text":"<p>Berikut adalah contoh penggunaan File I/O untuk menyimpan daftar nama pekerja ke file teks dan membacanya kembali.</p> <pre><code>import java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic class PekerjaFileDemo {\n    public static void main(String[] args) {\n        // Menulis daftar pekerja ke file\n        try (BufferedWriter writer = new BufferedWriter(new FileWriter(\"pekerja.txt\"))) {\n            writer.write(\"Ali\");\n            writer.newLine();\n            writer.write(\"Budi\");\n            writer.newLine();\n            writer.write(\"Cici\");\n            writer.newLine();\n            System.out.println(\"Data pekerja berhasil disimpan.\");\n        } catch (IOException e) {\n            System.out.println(\"Gagal menyimpan: \" + e.getMessage());\n        }\n\n        // Membaca daftar pekerja dari file\n        try (BufferedReader reader = new BufferedReader(new FileReader(\"pekerja.txt\"))) {\n            System.out.println(\"Daftar pekerja:\");\n            String baris;\n            int nomor = 1;\n            while ((baris = reader.readLine()) != null) {\n                System.out.printf(\"%d. %s%n\", nomor++, baris);\n            }\n        } catch (IOException e) {\n            System.out.println(\"Gagal membaca: \" + e.getMessage());\n        }\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Data pekerja berhasil disimpan.\nDaftar pekerja:\n1. Ali\n2. Budi\n3. Cici\n</code></pre> <p>Isi file pekerja.txt:</p> <pre><code>Ali\nBudi\nCici\n</code></pre>"},{"location":"menengah/file_io/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"<p>File I/O adalah alat penting untuk menyimpan dan mengambil data dari file:</p> Konsep Penjelasan <code>FileReader</code> Membaca karakter demi karakter dari file. <code>BufferedReader</code> Membaca per baris dengan buffer untuk efisiensi. <code>FileWriter</code> Menulis karakter demi karakter ke file. <code>BufferedWriter</code> Menulis dengan buffer untuk efisiensi. <code>File</code> Mengelola file dan folder (misalnya, cek keberadaan, buat folder). <p>\ud83c\udfaf Tujuan Utama: File I/O memungkinkan program untuk berinteraksi dengan sistem file, menyimpan data secara permanen, dan mengambil data untuk pemrosesan.</p>"},{"location":"menengah/file_io/#langkah-selanjutnya","title":"\ud83d\udcda Langkah Selanjutnya","text":"<p>Pelajari lebih lanjut tentang Enum (Konstanta Bertipe Kelas) untuk memahami cara mendefinisikan konstanta dengan tipe data khusus di Java.</p> <p>\u2b05\ufe0f Kembali: HashMap dalam Java</p>"},{"location":"menengah/hashmap/","title":"\ud83d\uddc2\ufe0f HashMap dalam Java","text":"<p>HashMap adalah bagian dari Java Collection Framework (JCF) yang digunakan untuk menyimpan data dalam bentuk pasangan kunci-nilai (key-value). Setiap kunci bersifat unik dan dipetakan ke satu nilai, memungkinkan akses data yang cepat berdasarkan kunci. HashMap sangat cocok untuk kasus seperti konfigurasi, pencarian (lookup), atau penyimpanan data asosiatif.</p> <p>Contoh analogi: - Kunci: \"NIM\" \u2192 Nilai: \"12345\" - Kunci: \"Nama\" \u2192 Nilai: \"Marno\" - Kunci: \"Role\" \u2192 Nilai: \"Pekerja\"</p>"},{"location":"menengah/hashmap/#deklarasi-dan-inisialisasi","title":"\ud83e\uddf1 Deklarasi dan Inisialisasi","text":"<p>Untuk menggunakan HashMap, impor <code>java.util.HashMap</code> dan deklarasikan instance dengan tipe kunci dan nilai.</p> <pre><code>import java.util.HashMap;\n\npublic class HashMapDemo {\n    public static void main(String[] args) {\n        HashMap&lt;String, String&gt; data = new HashMap&lt;&gt;();\n        data.put(\"id\", \"001\");\n        data.put(\"nama\", \"Marno\");\n        data.put(\"role\", \"Mandor\");\n\n        System.out.println(\"Nama: \" + data.get(\"nama\"));\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Nama: Marno\n</code></pre> <p>\ud83d\udccc Catatan: HashMap hanya dapat menyimpan objek, sehingga tipe primitif (seperti <code>int</code>) harus menggunakan wrapper class (seperti <code>Integer</code>).</p>"},{"location":"menengah/hashmap/#operasi-dasar-hashmap","title":"\ud83d\udd27 Operasi Dasar HashMap","text":"<p>HashMap menyediakan method untuk mengelola pasangan kunci-nilai:</p> Method Keterangan <code>put(key, value)</code> Menambahkan atau memperbarui pasangan kunci-nilai. <code>get(key)</code> Mengambil nilai berdasarkan kunci. <code>remove(key)</code> Menghapus pasangan berdasarkan kunci. <code>containsKey(key)</code> Memeriksa apakah kunci ada. <code>containsValue(value)</code> Memeriksa apakah nilai ada. <code>size()</code> Mengembalikan jumlah pasangan kunci-nilai. <code>clear()</code> Menghapus semua pasangan kunci-nilai."},{"location":"menengah/hashmap/#contoh-operasi","title":"Contoh Operasi:","text":"<pre><code>import java.util.HashMap;\n\npublic class HashMapOperationsDemo {\n    public static void main(String[] args) {\n        HashMap&lt;String, String&gt; user = new HashMap&lt;&gt;();\n        user.put(\"id\", \"001\");\n        user.put(\"nama\", \"Marno\");\n        user.put(\"role\", \"Mandor\");\n\n        // Mengambil nilai\n        System.out.println(\"Role: \" + user.get(\"role\"));\n\n        // Memeriksa kunci\n        System.out.println(\"Ada kunci 'id'? \" + user.containsKey(\"id\"));\n\n        // Menghapus pasangan\n        user.remove(\"id\");\n        System.out.println(\"Setelah menghapus 'id': \" + user);\n\n        // Mengecek ukuran\n        System.out.println(\"Jumlah pasangan: \" + user.size());\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Role: Mandor\nAda kunci 'id'? true\nSetelah menghapus 'id': {nama=Marno, role=Mandor}\nJumlah pasangan: 2\n</code></pre>"},{"location":"menengah/hashmap/#iterasi-hashmap","title":"\ud83d\udd01 Iterasi HashMap","text":"<p>HashMap dapat diiterasi menggunakan dua pendekatan utama: <code>keySet()</code> untuk mengakses kunci atau <code>entrySet()</code> untuk mengakses pasangan kunci-nilai secara langsung.</p>"},{"location":"menengah/hashmap/#1-iterasi-dengan-keyset","title":"1. Iterasi dengan <code>keySet()</code>:","text":"<pre><code>import java.util.HashMap;\n\npublic class KeySetDemo {\n    public static void main(String[] args) {\n        HashMap&lt;String, String&gt; user = new HashMap&lt;&gt;();\n        user.put(\"id\", \"001\");\n        user.put(\"nama\", \"Marno\");\n        user.put(\"role\", \"Mandor\");\n\n        for (String key : user.keySet()) {\n            System.out.printf(\"%s: %s%n\", key, user.get(key));\n        }\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>id: 001\nnama: Marno\nrole: Mandor\n</code></pre>"},{"location":"menengah/hashmap/#2-iterasi-dengan-entryset","title":"2. Iterasi dengan <code>entrySet()</code>:","text":"<pre><code>import java.util.HashMap;\nimport java.util.Map;\n\npublic class EntrySetDemo {\n    public static void main(String[] args) {\n        HashMap&lt;String, String&gt; user = new HashMap&lt;&gt;();\n        user.put(\"id\", \"001\");\n        user.put(\"nama\", \"Marno\");\n        user.put(\"role\", \"Mandor\");\n\n        for (Map.Entry&lt;String, String&gt; entry : user.entrySet()) {\n            System.out.printf(\"%s =&gt; %s%n\", entry.getKey(), entry.getValue());\n        }\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>id =&gt; 001\nnama =&gt; Marno\nrole =&gt; Mandor\n</code></pre> <p>\ud83d\udca1 Tips: Gunakan <code>entrySet()</code> untuk iterasi yang lebih efisien, karena tidak perlu memanggil <code>get(key)</code> berulang kali.</p>"},{"location":"menengah/hashmap/#studi-kasus-rekap-gaji-pekerja","title":"\ud83e\uddea Studi Kasus: Rekap Gaji Pekerja","text":"<p>Berikut adalah contoh penggunaan HashMap untuk menyimpan dan menampilkan data gaji pekerja berdasarkan nama sebagai kunci.</p> <pre><code>import java.util.HashMap;\n\npublic class GajiDemo {\n    public static void main(String[] args) {\n        HashMap&lt;String, Double&gt; gaji = new HashMap&lt;&gt;();\n        gaji.put(\"Ali\", 500.0);\n        gaji.put(\"Budi\", 450.0);\n        gaji.put(\"Cici\", 470.0);\n\n        for (Map.Entry&lt;String, Double&gt; entry : gaji.entrySet()) {\n            System.out.printf(\"%s menerima RM %.2f%n\", entry.getKey(), entry.getValue());\n        }\n\n        // Menambahkan pekerja baru\n        gaji.put(\"Dedi\", 480.0);\n        System.out.println(\"Setelah menambah Dedi: \" + gaji);\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Ali menerima RM 500.00\nBudi menerima RM 450.00\nCici menerima RM 470.00\nSetelah menambah Dedi: {Ali=500.0, Budi=450.0, Cici=470.0, Dedi=480.0}\n</code></pre>"},{"location":"menengah/hashmap/#hashmap-vs-arraylist","title":"\u2696\ufe0f HashMap vs. ArrayList","text":"Fitur HashMap ArrayList Akses Data Berdasarkan kunci (key) Berdasarkan indeks Struktur Tidak berurutan (unordered) Berurutan (ordered) Cocok Untuk Pencarian cepat, data asosiatif Koleksi data berurutan Duplikasi Kunci harus unik, nilai bisa duplikat Elemen bisa duplikat"},{"location":"menengah/hashmap/#catatan-penting","title":"\u26a0\ufe0f Catatan Penting","text":"<ul> <li>Kunci Unik: Setiap kunci dalam HashMap harus unik; jika kunci ditambahkan ulang, nilai lama akan ditimpa.</li> <li>Urutan Tidak Terjamin: HashMap tidak menjaga urutan input. Gunakan <code>LinkedHashMap</code> untuk mempertahankan urutan.</li> <li>Null Values: HashMap mengizinkan satu kunci <code>null</code> dan beberapa nilai <code>null</code>.</li> <li>Performa: HashMap menawarkan pencarian cepat (O(1) rata-rata) berkat struktur hash table-nya.</li> <li>Thread Safety: HashMap tidak thread-safe. Gunakan <code>ConcurrentHashMap</code> untuk aplikasi multi-threaded.</li> </ul>"},{"location":"menengah/hashmap/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"<p>HashMap adalah struktur data yang kuat untuk mengelola pasangan kunci-nilai:</p> Konsep Penjelasan HashMap Struktur data untuk menyimpan pasangan kunci-nilai. Keunggulan Akses cepat, fleksibel, cocok untuk lookup. Penggunaan Konfigurasi, data pengguna, cache, atau mapping. <p>\ud83c\udfaf Tujuan Utama: HashMap memungkinkan pengelolaan data asosiatif dengan efisiensi tinggi untuk pencarian dan manipulasi.</p>"},{"location":"menengah/hashmap/#langkah-selanjutnya","title":"\ud83d\udcda Langkah Selanjutnya","text":"<p>Pelajari lebih lanjut tentang File I/O (Baca &amp; Tulis File) untuk memahami cara membaca dan menulis data ke file di Java.</p> <p>\u2b05\ufe0f Kembali: Array dan ArrayList</p>"},{"location":"menengah/inner_class/","title":"\ud83e\uddec Inner Class (Class di Dalam Class)","text":"<p>Java memungkinkan kita untuk membuat class di dalam class lain. Ini disebut inner class. Tujuannya adalah untuk mengelompokkan class yang hanya digunakan di dalam induknya, menjaga struktur kode tetap rapi dan relevan.</p>"},{"location":"menengah/inner_class/#4-jenis-inner-class-di-java","title":"\ud83e\udde9 4 Jenis Inner Class di Java","text":"Jenis Penjelasan Singkat Inner Class Biasa Class di dalam class Static Nested Class Inner class yang bersifat static Local Inner Class Class di dalam method Anonymous Inner Class Class tanpa nama, langsung digunakan"},{"location":"menengah/inner_class/#1-inner-class-biasa","title":"1\ufe0f\u20e3 Inner Class Biasa","text":"<pre><code>public class Luar {\n    class Dalam {\n        void tampil() {\n            System.out.println(\"Ini class dalam.\");\n        }\n    }\n\n    void jalan() {\n        Dalam d = new Dalam();\n        d.tampil();\n    }\n\n    public static void main(String[] args) {\n        Luar l = new Luar();\n        l.jalan();\n    }\n}\n````\n\n---\n\n## 2\ufe0f\u20e3 Static Nested Class\n\n```java\npublic class Luar {\n    static class Dalam {\n        void tampil() {\n            System.out.println(\"Ini static inner class.\");\n        }\n    }\n\n    public static void main(String[] args) {\n        Luar.Dalam d = new Luar.Dalam();\n        d.tampil();\n    }\n}\n</code></pre> <ul> <li>Bisa dibuat tanpa membuat objek class luar</li> <li>Tidak bisa akses anggota non-static dari class luar</li> </ul>"},{"location":"menengah/inner_class/#3-local-inner-class-dalam-method","title":"3\ufe0f\u20e3 Local Inner Class (Dalam Method)","text":"<pre><code>public class Demo {\n    void tampil() {\n        class Lokal {\n            void sapa() {\n                System.out.println(\"Halo dari dalam method.\");\n            }\n        }\n\n        Lokal l = new Lokal();\n        l.sapa();\n    }\n\n    public static void main(String[] args) {\n        new Demo().tampil();\n    }\n}\n</code></pre>"},{"location":"menengah/inner_class/#4-anonymous-inner-class","title":"4\ufe0f\u20e3 Anonymous Inner Class","text":"<ul> <li>Digunakan saat membuat implementasi cepat satu kali pakai</li> <li>Sering dipakai pada listener atau callback</li> </ul> <pre><code>interface Sapa {\n    void ucap();\n}\n\npublic class Demo {\n    public static void main(String[] args) {\n        Sapa s = new Sapa() {\n            public void ucap() {\n                System.out.println(\"Halo dunia!\");\n            }\n        };\n\n        s.ucap();\n    }\n}\n</code></pre>"},{"location":"menengah/inner_class/#kapan-menggunakan-inner-class","title":"\ud83d\udccc Kapan Menggunakan Inner Class?","text":"Situasi Jenis Inner Class yang Cocok Struktur hanya digunakan dalam satu class Inner Class biasa Tidak butuh akses luar Static Nested Class Hanya dibutuhkan dalam satu method Local Inner Class Implementasi cepat (1x pakai) Anonymous Inner Class"},{"location":"menengah/inner_class/#studi-kasus-form-validasi","title":"\ud83e\uddea Studi Kasus: Form Validasi","text":"<pre><code>public class Form {\n    private String nama;\n\n    class Validator {\n        boolean isValid() {\n            return nama != null &amp;&amp; !nama.isEmpty();\n        }\n    }\n\n    public Form(String nama) {\n        this.nama = nama;\n    }\n\n    public boolean validasi() {\n        Validator v = new Validator();\n        return v.isValid();\n    }\n\n    public static void main(String[] args) {\n        Form f = new Form(\"Marno\");\n        System.out.println(\"Valid: \" + f.validasi());\n    }\n}\n</code></pre>"},{"location":"menengah/inner_class/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"Jenis Inner Class Bisa Static? Bisa Akses Anggota Luar? Digunakan Saat Inner Class \u274c Tidak \u2705 Ya Class bantu untuk outer Static Nested Class \u2705 Ya \u274c Tidak Class mandiri tapi terhubung Local Inner Class \u274c Tidak \u2705 Ya (jika final) Di dalam method Anonymous Inner Class \u274c Tidak \u2705 Ya Callback, event listener <p>\u27a1\ufe0f Selanjutnya: Level Mahir atau Framework Java</p>"},{"location":"menengah/package_import/","title":"\ud83d\udce6 Package &amp; Import dalam Java","text":"<p>Dalam Java, package digunakan untuk mengelompokkan class-class terkait agar proyek lebih rapi dan modular.</p> <p>Mirip seperti folder dalam komputer, package menyimpan class sesuai kategori atau fungsinya.</p>"},{"location":"menengah/package_import/#apa-itu-package","title":"\ud83e\uddf1 Apa Itu Package?","text":"<pre><code>package nama_package;\n````\n\nDidefinisikan di **baris pertama file Java**, sebelum deklarasi class.\n\nContoh:\n\n```java\npackage utils;\n\npublic class Kalkulator {\n    public int tambah(int a, int b) {\n        return a + b;\n    }\n}\n</code></pre>"},{"location":"menengah/package_import/#struktur-direktori-package","title":"\ud83d\udee0\ufe0f Struktur Direktori Package","text":"<p>Jika kita punya:</p> <pre><code>project/\n\u251c\u2500\u2500 Main.java\n\u2514\u2500\u2500 utils/\n    \u2514\u2500\u2500 Kalkulator.java\n</code></pre> <p>Isi <code>Kalkulator.java</code>:</p> <pre><code>package utils;\n\npublic class Kalkulator {\n    public int kali(int a, int b) {\n        return a * b;\n    }\n}\n</code></pre> <p>Isi <code>Main.java</code>:</p> <pre><code>import utils.Kalkulator;\n\npublic class Main {\n    public static void main(String[] args) {\n        Kalkulator k = new Kalkulator();\n        System.out.println(\"Hasil: \" + k.kali(4, 5));\n    }\n}\n</code></pre> <p>\ud83d\udca1 Output:</p> <pre><code>Hasil: 20\n</code></pre>"},{"location":"menengah/package_import/#import-menggunakan-class-dari-package-lain","title":"\ud83d\udce5 Import: Menggunakan Class dari Package Lain","text":"<pre><code>import nama_package.NamaClass;\n</code></pre> <p>Contoh:</p> <pre><code>import java.util.Scanner;\n</code></pre> <p>Gunakan <code>import java.util.*;</code> untuk mengimpor semua class dari package tersebut.</p>"},{"location":"menengah/package_import/#package-bawaan-java-java","title":"\ud83d\udce6 Package Bawaan Java (<code>java.*</code>)","text":"Package Deskripsi <code>java.lang</code> Class dasar (String, Math, Object) <code>java.util</code> Struktur data (ArrayList, HashMap) <code>java.io</code> Input/Output stream <code>java.net</code> Networking <code>java.time</code> Tanggal dan waktu (Java 8+)"},{"location":"menengah/package_import/#membuat-package-kustom","title":"\ud83c\udfd7\ufe0f Membuat Package Kustom","text":"<pre><code>mkdir utils\ntouch utils/Kalkulator.java\n</code></pre> <p>Isi file:</p> <pre><code>package utils;\n\npublic class Kalkulator {\n    public static int tambah(int a, int b) {\n        return a + b;\n    }\n}\n</code></pre>"},{"location":"menengah/package_import/#kompilasi-dan-jalankan-program-dengan-package","title":"\u2699\ufe0f Kompilasi dan Jalankan Program dengan Package","text":"<pre><code>javac utils/Kalkulator.java\njavac Main.java\njava Main\n</code></pre> <p>Jika package berada di dalam folder lain, gunakan <code>-cp</code> (classpath).</p>"},{"location":"menengah/package_import/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"Konsep Penjelasan Package Cara Java mengorganisasi class ke dalam folder Import Digunakan untuk memakai class dari package lain Best Practice Gunakan nama unik seperti <code>com.nama.app</code> untuk project besar <p>\u27a1\ufe0f Selanjutnya: Exception Handling (Penanganan Error)</p>"},{"location":"oop/abstraction/","title":"\ud83e\uddfc Abstraksi dalam Java","text":"<p>Abstraksi adalah salah satu pilar utama Object-Oriented Programming (OOP) yang memungkinkan kita menyembunyikan detail implementasi dan hanya menampilkan fungsi esensial kepada pengguna. Dengan abstraksi, kode menjadi lebih sederhana, mudah digunakan, dan fleksibel untuk pengembangan lebih lanjut.</p> <p>Analogi: Saat mengendarai mobil, Anda hanya perlu tahu cara menginjak pedal gas dan rem tanpa memahami cara kerja mesin secara detail. Abstraksi bekerja dengan cara yang sama dalam pemrograman.</p>"},{"location":"oop/abstraction/#tujuan-abstraksi","title":"\ud83e\udde0 Tujuan Abstraksi","text":"<ul> <li>Menyederhanakan Kompleksitas: Menyembunyikan detail teknis yang tidak perlu diketahui pengguna.</li> <li>Meningkatkan Fleksibilitas: Memungkinkan perubahan implementasi tanpa memengaruhi kode lain.</li> <li>Menyediakan Kontrak Jelas: Menentukan apa yang harus dilakukan tanpa menjelaskan bagaimana melakukannya.</li> </ul>"},{"location":"oop/abstraction/#cara-menerapkan-abstraksi-di-java","title":"\ud83d\udc51 Cara Menerapkan Abstraksi di Java","text":"<p>Java mendukung abstraksi melalui dua mekanisme utama: 1. Abstract Class: Kelas yang dapat memiliki kombinasi method abstrak (tanpa implementasi) dan method konkret (dengan implementasi). 2. Interface: Kontrak murni yang mendefinisikan method tanpa implementasi (meskipun sejak Java 8, interface dapat memiliki method <code>default</code> dan <code>static</code>).</p>"},{"location":"oop/abstraction/#1-abstract-class","title":"1. \ud83e\uddf1 Abstract Class","text":"<p>Abstract class adalah kelas yang dideklarasikan dengan kata kunci <code>abstract</code> dan tidak dapat diinstansiasi langsung. Kelas ini dapat memiliki: - Method abstrak (tanpa isi, harus diimplementasikan oleh subclass). - Method konkret (dengan isi, dapat digunakan langsung).</p>"},{"location":"oop/abstraction/#struktur","title":"Struktur:","text":"<pre><code>abstract class Kendaraan {\n    // Method abstrak (wajib diimplementasikan oleh subclass)\n    abstract void jalan();\n\n    // Method konkret (dapat digunakan langsung)\n    void info() {\n        System.out.println(\"Ini kendaraan umum\");\n    }\n}\n</code></pre>"},{"location":"oop/abstraction/#subclass","title":"Subclass:","text":"<pre><code>class Mobil extends Kendaraan {\n    @Override\n    void jalan() {\n        System.out.println(\"Mobil berjalan di jalan raya\");\n    }\n}\n</code></pre>"},{"location":"oop/abstraction/#penggunaan","title":"Penggunaan:","text":"<pre><code>public class AbstractClassDemo {\n    public static void main(String[] args) {\n        Kendaraan kendaraan = new Mobil();\n        kendaraan.jalan(); // Memanggil method dari subclass\n        kendaraan.info();  // Memanggil method konkret dari abstract class\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Mobil berjalan di jalan raya\nIni kendaraan umum\n</code></pre> <p>\ud83d\udccc Catatan: Subclass harus mengimplementasikan semua method abstrak dari parent class, kecuali jika subclass juga dideklarasikan sebagai <code>abstract</code>.</p>"},{"location":"oop/abstraction/#2-interface","title":"2. \ud83d\udca1 Interface","text":"<p>Interface adalah kontrak murni yang mendefinisikan method yang harus diimplementasikan oleh kelas yang menggunakannya. Semua method dalam interface bersifat <code>public</code> dan <code>abstract</code> secara default (sebelum Java 8). Sejak Java 8, interface dapat memiliki method <code>default</code> dan <code>static</code>.</p>"},{"location":"oop/abstraction/#struktur_1","title":"Struktur:","text":"<pre><code>interface Hewan {\n    void suara(); // Method abstrak\n}\n</code></pre>"},{"location":"oop/abstraction/#implementasi","title":"Implementasi:","text":"<pre><code>class Kucing implements Hewan {\n    @Override\n    public void suara() {\n        System.out.println(\"Meong\");\n    }\n}\n</code></pre>"},{"location":"oop/abstraction/#penggunaan_1","title":"Penggunaan:","text":"<pre><code>public class InterfaceDemo {\n    public static void main(String[] args) {\n        Hewan hewan = new Kucing();\n        hewan.suara(); // Memanggil implementasi dari Kucing\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Meong\n</code></pre> <p>\ud83d\udca1 Info: Sejak Java 8, interface dapat memiliki method <code>default</code> untuk menyediakan implementasi default, memungkinkan fleksibilitas tanpa memaksa semua kelas implementor mengoverride method tersebut.</p>"},{"location":"oop/abstraction/#contoh-interface-dengan-method-default","title":"Contoh Interface dengan Method <code>default</code>:","text":"<pre><code>interface Hewan {\n    void suara();\n    default void makan() {\n        System.out.println(\"Hewan ini sedang makan\");\n    }\n}\n</code></pre>"},{"location":"oop/abstraction/#abstract-class-vs-interface","title":"\ud83d\udd0d Abstract Class vs. Interface","text":"<p>Berikut adalah perbandingan antara <code>abstract class</code> dan <code>interface</code>:</p> Fitur Abstract Class Interface Keyword <code>abstract class</code> <code>interface</code> Konstruktor Bisa memiliki konstruktor Tidak bisa memiliki konstruktor Implementasi Method Bisa memiliki method konkret dan abstrak Hanya method abstrak (kecuali <code>default</code>/<code>static</code>) Multiple Inheritance Tidak mendukung (hanya satu parent class) Mendukung (bisa implementasi banyak interface) Field Bisa memiliki field (variabel instance) Hanya konstanta (<code>public static final</code>) Kapan Digunakan Logika umum yang dibagi antar subclass Kontrak murni untuk perilaku tertentu <p>\ud83d\udccc Tips: Gunakan <code>abstract class</code> jika ada logika atau state yang dapat dibagi, dan gunakan <code>interface</code> untuk mendefinisikan kontrak yang harus dipatuhi oleh banyak kelas.</p>"},{"location":"oop/abstraction/#studi-kasus-sistem-pembayaran","title":"\ud83e\uddea Studi Kasus: Sistem Pembayaran","text":"<p>Berikut adalah contoh penggunaan abstraksi untuk sistem pembayaran dengan <code>abstract class</code>:</p> <pre><code>abstract class Pembayaran {\n    abstract void proses(); // Method abstrak untuk diproses oleh subclass\n}\n\nclass TransferBank extends Pembayaran {\n    @Override\n    void proses() {\n        System.out.println(\"Memproses transfer bank...\");\n    }\n}\n\nclass EWallet extends Pembayaran {\n    @Override\n    void proses() {\n        System.out.println(\"Memproses pembayaran via E-Wallet...\");\n    }\n}\n\npublic class PaymentDemo {\n    public static void main(String[] args) {\n        Pembayaran pembayaran1 = new TransferBank();\n        Pembayaran pembayaran2 = new EWallet();\n        pembayaran1.proses();\n        pembayaran2.proses();\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Memproses transfer bank...\nMemproses pembayaran via E-Wallet...\n</code></pre>"},{"location":"oop/abstraction/#contoh-dengan-interface","title":"Contoh dengan Interface:","text":"<pre><code>interface PaymentProcessor {\n    void processPayment();\n    default void logTransaction() {\n        System.out.println(\"Transaksi dicatat\");\n    }\n}\n\nclass CreditCard implements PaymentProcessor {\n    @Override\n    public void processPayment() {\n        System.out.println(\"Memproses pembayaran kartu kredit...\");\n    }\n}\n\npublic class PaymentProcessorDemo {\n    public static void main(String[] args) {\n        PaymentProcessor processor = new CreditCard();\n        processor.processPayment();\n        processor.logTransaction();\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Memproses pembayaran kartu kredit...\nTransaksi dicatat\n</code></pre>"},{"location":"oop/abstraction/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"<p>Abstraksi adalah kunci untuk membuat kode yang modular dan mudah dipelihara:</p> Konsep Penjelasan Abstraksi Menyembunyikan detail implementasi, menampilkan fungsi esensial Abstract Class Kelas dengan logika umum dan method abstrak/konkret Interface Kontrak murni untuk mendefinisikan perilaku Manfaat Menyederhanakan kode, meningkatkan fleksibilitas <p>\ud83c\udfaf Dengan abstraksi, developer fokus pada apa yang dilakukan sistem, bukan bagaimana implementasinya.</p>"},{"location":"oop/abstraction/#langkah-selanjutnya","title":"\ud83d\udcda Langkah Selanjutnya","text":"<p>Pelajari lebih lanjut tentang Ringkasan OOP dan Studi Kasus Proyek untuk melihat penerapan semua konsep OOP dalam proyek nyata.</p>"},{"location":"oop/class_objek/","title":"\ud83c\udfd7\ufe0f Membuat Class dan Object dalam Java","text":"<p>Dalam Object-Oriented Programming (OOP) di Java, class dan object adalah konsep dasar yang menjadi fondasi pembuatan program berbasis objek. Class adalah cetak biru (blueprint) yang mendefinisikan struktur dan perilaku, sedangkan object adalah instance nyata dari class tersebut. Bagian ini menjelaskan cara membuat class, object, dan constructor, serta peran field dan method dalam OOP.</p>"},{"location":"oop/class_objek/#1-membuat-class","title":"1. \u270f\ufe0f Membuat Class","text":"<p>Class adalah template yang mendefinisikan: - Field (atribut): Data atau properti yang dimiliki class. - Method: Fungsi atau aksi yang dapat dilakukan oleh class.</p>"},{"location":"oop/class_objek/#contoh-class","title":"Contoh Class:","text":"<pre><code>public class Mahasiswa {\n    // Field\n    String nama;\n    int umur;\n\n    // Method\n    void sapa() {\n        System.out.println(\"Halo, saya \" + nama);\n    }\n}\n</code></pre> <ul> <li>Field: <code>nama</code> (String) dan <code>umur</code> (int) menyimpan data mahasiswa.</li> <li>Method: <code>sapa()</code> mendefinisikan perilaku untuk mencetak sapaan.</li> </ul>"},{"location":"oop/class_objek/#2-membuat-dan-menggunakan-object","title":"2. \ud83e\uddea Membuat dan Menggunakan Object","text":"<p>Object adalah instance dari class yang dibuat menggunakan kata kunci <code>new</code>. Object memungkinkan kita untuk menggunakan field dan method yang didefinisikan dalam class.</p>"},{"location":"oop/class_objek/#contoh-membuat-object","title":"Contoh Membuat Object:","text":"<pre><code>public class MahasiswaDemo {\n    public static void main(String[] args) {\n        // Membuat object dari class Mahasiswa\n        Mahasiswa mhs1 = new Mahasiswa();\n\n        // Mengisi field\n        mhs1.nama = \"Marno\";\n        mhs1.umur = 21;\n\n        // Memanggil method\n        mhs1.sapa();\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Halo, saya Marno\n</code></pre> <p>\ud83d\udccc Catatan: Object dibuat dengan <code>new</code> diikuti oleh nama class dan tanda kurung, misalnya <code>new Mahasiswa()</code>.</p>"},{"location":"oop/class_objek/#3-constructor-inisialisasi-object","title":"3. \u2699\ufe0f Constructor: Inisialisasi Object","text":"<p>Constructor adalah method khusus yang dipanggil secara otomatis saat object dibuat. Constructor memiliki nama yang sama dengan class dan tidak memiliki tipe kembalian. Constructor biasanya digunakan untuk menginisialisasi field.</p>"},{"location":"oop/class_objek/#contoh-class-dengan-constructor","title":"Contoh Class dengan Constructor:","text":"<pre><code>public class Mahasiswa {\n    String nama;\n    int umur;\n\n    // Constructor\n    public Mahasiswa(String nama, int umur) {\n        this.nama = nama;\n        this.umur = umur;\n    }\n\n    // Method\n    void sapa() {\n        System.out.println(\"Saya \" + nama + \", umur \" + umur);\n    }\n}\n</code></pre>"},{"location":"oop/class_objek/#contoh-pemanggilan","title":"Contoh Pemanggilan:","text":"<pre><code>public class MahasiswaConstructorDemo {\n    public static void main(String[] args) {\n        // Membuat object dengan constructor\n        Mahasiswa mhs1 = new Mahasiswa(\"Marno\", 21);\n        mhs1.sapa();\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Saya Marno, umur 21\n</code></pre> <p>\ud83d\udca1 Tips: Gunakan kata kunci <code>this</code> untuk membedakan field class dari parameter constructor dengan nama yang sama.</p>"},{"location":"oop/class_objek/#4-perbedaan-field-method-dan-constructor","title":"4. \ud83e\uddf1 Perbedaan Field, Method, dan Constructor","text":"Elemen Fungsi Field Menyimpan data atau properti class. Method Mendefinisikan perilaku atau aksi class. Constructor Menginisialisasi object saat dibuat dengan <code>new</code>."},{"location":"oop/class_objek/#5-studi-kasus-class-mobil","title":"5. \ud83e\udde0 Studi Kasus: Class <code>Mobil</code>","text":"<p>Berikut adalah contoh lengkap yang menggabungkan class, object, dan constructor untuk memodelkan mobil.</p> <pre><code>public class Mobil {\n    // Field\n    String merk;\n    int tahun;\n\n    // Constructor\n    public Mobil(String merk, int tahun) {\n        this.merk = merk;\n        this.tahun = tahun;\n    }\n\n    // Method\n    void info() {\n        System.out.printf(\"Merk: %s, Tahun: %d%n\", merk, tahun);\n    }\n}\n\nclass DemoMobil {\n    public static void main(String[] args) {\n        // Membuat object\n        Mobil m1 = new Mobil(\"Toyota\", 2020);\n        Mobil m2 = new Mobil(\"Honda\", 2022);\n\n        // Memanggil method\n        m1.info();\n        m2.info();\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Merk: Toyota, Tahun: 2020\nMerk: Honda, Tahun: 2022\n</code></pre>"},{"location":"oop/class_objek/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"<p>Class dan object adalah fondasi OOP di Java:</p> Konsep Penjelasan Class Blueprint yang mendefinisikan field dan method. Object Instance nyata dari class, dibuat dengan <code>new</code>. Constructor Method khusus untuk menginisialisasi object. Field &amp; Method Menyimpan data dan mendefinisikan perilaku. <p>Memahami cara membuat class dan object adalah langkah awal untuk menguasai OOP dan membangun aplikasi yang terstruktur.</p>"},{"location":"oop/class_objek/#langkah-selanjutnya","title":"\ud83d\udcda Langkah Selanjutnya","text":"<p>Pelajari lebih lanjut tentang Encapsulation (Enkapsulasi) untuk memahami cara melindungi data dalam class.</p> <p>\u2b05\ufe0f Kembali: Ringkasan OOP dan Studi Kasus</p>"},{"location":"oop/encapsulation/","title":"\ud83d\udd12 Encapsulation (Enkapsulasi) dalam Java","text":"<p>Encapsulation (enkapsulasi) adalah pilar utama Object-Oriented Programming (OOP) yang menggabungkan data (field) dan method dalam satu unit (class) sambil menyembunyikan detail implementasi dari dunia luar. Dengan enkapsulasi, data hanya dapat diakses melalui method tertentu, seperti getter dan setter, untuk memastikan keamanan dan validasi.</p>"},{"location":"oop/encapsulation/#tujuan-enkapsulasi","title":"Tujuan Enkapsulasi","text":"<ul> <li>Melindungi Data: Mencegah perubahan data yang tidak sah.</li> <li>Mengontrol Akses: Mengatur bagaimana dan kapan data dapat diakses atau diubah.</li> <li>Meningkatkan Perawatan: Memudahkan perubahan logika tanpa memengaruhi kode lain.</li> </ul>"},{"location":"oop/encapsulation/#struktur-enkapsulasi","title":"\ud83e\uddf1 Struktur Enkapsulasi","text":"<p>Untuk menerapkan enkapsulasi di Java: 1. Deklarasikan field sebagai <code>private</code> untuk menyembunyikan dari akses langsung. 2. Sediakan method <code>public</code> (getter dan setter) untuk mengakses dan memodifikasi data. 3. (Opsional) Tambahkan logika validasi dalam setter untuk memastikan integritas data.</p>"},{"location":"oop/encapsulation/#contoh-class-dengan-enkapsulasi","title":"Contoh Class dengan Enkapsulasi:","text":"<pre><code>public class Mahasiswa {\n    // Field private untuk enkapsulasi\n    private String nama;\n    private int umur;\n\n    // Getter untuk nama\n    public String getNama() {\n        return nama;\n    }\n\n    // Setter untuk nama\n    public void setNama(String nama) {\n        this.nama = nama;\n    }\n\n    // Getter untuk umur\n    public int getUmur() {\n        return umur;\n    }\n\n    // Setter untuk umur dengan validasi\n    public void setUmur(int umur) {\n        if (umur &gt;= 0) {\n            this.umur = umur;\n        } else {\n            System.out.println(\"Umur tidak valid!\");\n        }\n    }\n}\n</code></pre>"},{"location":"oop/encapsulation/#penggunaan-di-kelas-lain","title":"\ud83d\udd0d Penggunaan di Kelas Lain","text":"<pre><code>public class MahasiswaDemo {\n    public static void main(String[] args) {\n        Mahasiswa mhs = new Mahasiswa();\n        mhs.setNama(\"Marno\");\n        mhs.setUmur(21);\n        mhs.setUmur(-5); // Akan menampilkan pesan error\n\n        System.out.printf(\"Nama: %s, Umur: %d%n\", mhs.getNama(), mhs.getUmur());\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Umur tidak valid!\nNama: Marno, Umur: 21\n</code></pre>"},{"location":"oop/encapsulation/#mengapa-menggunakan-private","title":"\u2757 Mengapa Menggunakan <code>private</code>?","text":"<p>Dengan menjadikan field <code>private</code>, data tidak dapat diakses atau diubah langsung dari luar class, mencegah perubahan yang tidak diinginkan.</p>"},{"location":"oop/encapsulation/#contoh-akses-langsung-yang-salah","title":"Contoh Akses Langsung yang Salah:","text":"<pre><code>public class MahasiswaErrorDemo {\n    public static void main(String[] args) {\n        Mahasiswa mhs = new Mahasiswa();\n        // mhs.nama = \"Marno\"; // \u274c Error: 'nama' has private access\n    }\n}\n</code></pre> <p>\ud83d\udca1 Info: Enkapsulasi memastikan bahwa data hanya diubah melalui setter, yang dapat mencakup logika validasi.</p>"},{"location":"oop/encapsulation/#keuntungan-enkapsulasi","title":"\u2705 Keuntungan Enkapsulasi","text":"Keuntungan Penjelasan Keamanan Data Hanya method getter/setter yang dapat mengakses data. Validasi Nilai Setter dapat memeriksa nilai sebelum menyimpan (misalnya, umur \u2265 0). Mudah Perawatan Perubahan logika hanya dilakukan di getter/setter, tidak memengaruhi kode lain. Modularitas Kode lebih terorganisir dan mudah dipahami."},{"location":"oop/encapsulation/#studi-kasus-validasi-umur-siswa","title":"\ud83e\udde0 Studi Kasus: Validasi Umur Siswa","text":"<p>Berikut adalah contoh enkapsulasi dengan validasi ketat untuk umur siswa, memastikan umur berada dalam rentang yang sesuai untuk siswa sekolah.</p> <pre><code>public class Siswa {\n    // Field private\n    private int umur;\n\n    // Setter dengan validasi\n    public void setUmur(int umur) {\n        if (umur &gt;= 5 &amp;&amp; umur &lt;= 18) {\n            this.umur = umur;\n            System.out.println(\"Umur berhasil diatur ke: \" + umur);\n        } else {\n            System.out.println(\"Umur tidak valid! Harus antara 5 dan 18 tahun.\");\n        }\n    }\n\n    // Getter\n    public int getUmur() {\n        return umur;\n    }\n}\n</code></pre>"},{"location":"oop/encapsulation/#penggunaan","title":"Penggunaan:","text":"<pre><code>public class SiswaDemo {\n    public static void main(String[] args) {\n        Siswa siswa = new Siswa();\n        siswa.setUmur(4);  // Akan menampilkan pesan error\n        siswa.setUmur(12); // Umur valid\n        System.out.println(\"Umur siswa: \" + siswa.getUmur());\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Umur tidak valid! Harus antara 5 dan 18 tahun.\nUmur berhasil diatur ke: 12\nUmur siswa: 12\n</code></pre>"},{"location":"oop/encapsulation/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"<p>Enkapsulasi adalah fondasi untuk membangun kode yang aman dan terorganisir:</p> Konsep Penjelasan <code>private</code> Menyembunyikan field dari akses langsung. Getter/Setter Mengontrol akses dan memungkinkan validasi data. Enkapsulasi Menggabungkan data dan logika dalam unit yang terlindungi. <p>\ud83c\udfaf Tujuan Utama: Enkapsulasi memastikan data hanya diubah dengan cara yang terkendali, meningkatkan keamanan dan fleksibilitas kode.</p>"},{"location":"oop/encapsulation/#langkah-selanjutnya","title":"\ud83d\udcda Langkah Selanjutnya","text":"<p>Pelajari lebih lanjut tentang Inheritance (Pewarisan) untuk memahami cara mewarisi fitur dari kelas lain.</p> <p>\u2b05\ufe0f Kembali: Konsep Dasar OOP</p>"},{"location":"oop/inheritance/","title":"\ud83e\uddec Inheritance (Pewarisan) dalam Java","text":"<p>Inheritance (pewarisan) adalah pilar utama Object-Oriented Programming (OOP) yang memungkinkan sebuah kelas (disebut subclass atau child class) untuk mewarisi properti (field) dan perilaku (method) dari kelas lain (disebut superclass atau parent class). Inheritance mempromosikan reuse kode, mengurangi duplikasi, dan mendefinisikan hubungan \"is-a\" (misalnya, \"Mobil adalah Kendaraan\").</p>"},{"location":"oop/inheritance/#tujuan-inheritance","title":"Tujuan Inheritance","text":"<ul> <li>Efisiensi Kode: Menggunakan kembali kode dari superclass tanpa menulis ulang.</li> <li>Hierarki yang Jelas: Membangun hubungan antar kelas berdasarkan hubungan \"is-a\".</li> <li>Fleksibilitas: Memungkinkan subclass untuk menyesuaikan atau memperluas perilaku superclass.</li> </ul>"},{"location":"oop/inheritance/#struktur-dasar-inheritance","title":"\ud83e\uddf1 Struktur Dasar Inheritance","text":"<p>Gunakan kata kunci <code>extends</code> untuk mendefinisikan bahwa sebuah kelas adalah turunan dari kelas lain.</p>"},{"location":"oop/inheritance/#contoh-struktur","title":"Contoh Struktur:","text":"<pre><code>public class Induk {\n    public void salam() {\n        System.out.println(\"Halo dari kelas induk!\");\n    }\n}\n\nclass Anak extends Induk {\n    public void perkenalan() {\n        System.out.println(\"Saya dari kelas anak.\");\n    }\n}\n</code></pre>"},{"location":"oop/inheritance/#penggunaan","title":"Penggunaan:","text":"<pre><code>public class InheritanceDemo {\n    public static void main(String[] args) {\n        Anak anak = new Anak();\n        anak.salam();       // Diwarisi dari Induk\n        anak.perkenalan();  // Method milik Anak\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Halo dari kelas induk!\nSaya dari kelas anak.\n</code></pre> <p>\ud83d\udccc Catatan: Subclass mewarisi semua member <code>public</code> dan <code>protected</code> dari superclass, tetapi tidak member <code>private</code>.</p>"},{"location":"oop/inheritance/#hubungan-is-a","title":"\ud83c\udfd7\ufe0f Hubungan \"Is-a\"","text":"<p>Inheritance mencerminkan hubungan \"is-a\", di mana subclass adalah jenis spesifik dari superclass.</p> <pre><code>public class Kendaraan {\n    public void info() {\n        System.out.println(\"Ini adalah kendaraan.\");\n    }\n}\n\nclass Mobil extends Kendaraan {\n    // Mobil adalah Kendaraan\n}\n</code></pre>"},{"location":"oop/inheritance/#penggunaan_1","title":"Penggunaan:","text":"<pre><code>public class IsADemo {\n    public static void main(String[] args) {\n        Mobil mobil = new Mobil();\n        mobil.info(); // Diwarisi dari Kendaraan\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Ini adalah kendaraan.\n</code></pre>"},{"location":"oop/inheritance/#method-overriding","title":"\ud83c\udfaf Method Overriding","text":"<p>Method overriding memungkinkan subclass untuk menyediakan implementasi baru untuk method yang diwarisi dari superclass. Gunakan anotasi <code>@Override</code> untuk memastikan method benar-benar menimpa method superclass.</p>"},{"location":"oop/inheritance/#contoh-overriding","title":"Contoh Overriding:","text":"<pre><code>public class Hewan {\n    public void suara() {\n        System.out.println(\"Hewan bersuara...\");\n    }\n}\n\nclass Kucing extends Hewan {\n    @Override\n    public void suara() {\n        System.out.println(\"Meong\");\n    }\n}\n</code></pre>"},{"location":"oop/inheritance/#penggunaan_2","title":"Penggunaan:","text":"<pre><code>public class OverridingDemo {\n    public static void main(String[] args) {\n        Hewan hewan = new Kucing(); // Polymorphism\n        hewan.suara();\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Meong\n</code></pre> <p>\ud83d\udca1 Info: Overriding memungkinkan perilaku yang berbeda untuk method yang sama, tergantung pada tipe objek yang sebenarnya.</p>"},{"location":"oop/inheritance/#keyword-penting","title":"\ud83d\udd11 Keyword Penting","text":"Keyword Fungsi <code>extends</code> Menunjukkan bahwa kelas adalah turunan dari kelas lain. <code>super</code> Mengakses constructor, field, atau method dari superclass. <code>@Override</code> Menandakan bahwa method menimpa method dari superclass."},{"location":"oop/inheritance/#contoh-penggunaan-super","title":"Contoh Penggunaan <code>super</code>:","text":"<pre><code>public class Person {\n    protected String nama;\n\n    public Person(String nama) {\n        this.nama = nama;\n    }\n}\n\nclass Mahasiswa extends Person {\n    public Mahasiswa(String nama) {\n        super(nama); // Memanggil constructor superclass\n    }\n\n    public void info() {\n        System.out.println(\"Nama mahasiswa: \" + super.nama);\n    }\n}\n</code></pre>"},{"location":"oop/inheritance/#penggunaan_3","title":"Penggunaan:","text":"<pre><code>public class SuperDemo {\n    public static void main(String[] args) {\n        Mahasiswa mhs = new Mahasiswa(\"Marno\");\n        mhs.info();\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Nama mahasiswa: Marno\n</code></pre>"},{"location":"oop/inheritance/#studi-kasus-pegawai-dan-manager","title":"\ud83e\uddea Studi Kasus: Pegawai dan Manager","text":"<p>Berikut adalah contoh inheritance yang memodelkan hubungan antara Pegawai dan Manager, dengan overriding dan penggunaan <code>super</code>.</p> <pre><code>public class Pegawai {\n    protected String nama;\n    protected int gaji;\n\n    public Pegawai(String nama, int gaji) {\n        this.nama = nama;\n        this.gaji = gaji;\n    }\n\n    public void info() {\n        System.out.printf(\"%s bergaji %d%n\", nama, gaji);\n    }\n}\n\nclass Manager extends Pegawai {\n    private int bonus;\n\n    public Manager(String nama, int gaji, int bonus) {\n        super(nama, gaji); // Memanggil constructor superclass\n        this.bonus = bonus;\n    }\n\n    @Override\n    public void info() {\n        super.info(); // Memanggil method info dari superclass\n        System.out.printf(\"Total gaji (dengan bonus %d): %d%n\", bonus, gaji + bonus);\n    }\n}\n</code></pre>"},{"location":"oop/inheritance/#penggunaan_4","title":"Penggunaan:","text":"<pre><code>public class PegawaiDemo {\n    public static void main(String[] args) {\n        Manager manager = new Manager(\"Marno\", 5000, 2000);\n        manager.info();\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Marno bergaji 5000\nTotal gaji (dengan bonus 2000): 7000\n</code></pre>"},{"location":"oop/inheritance/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"<p>Inheritance adalah alat penting untuk membangun hierarki kelas yang efisien:</p> Konsep Penjelasan Inheritance Subclass mewarisi field dan method dari superclass. <code>extends</code> Digunakan untuk mendefinisikan hubungan pewarisan. <code>super</code> Mengakses member superclass (constructor, field, method). Overriding Menyesuaikan implementasi method dari superclass. <p>\ud83c\udfaf Tujuan Utama: Inheritance memungkinkan reuse kode dan pembuatan hierarki kelas yang mencerminkan hubungan dunia nyata.</p>"},{"location":"oop/inheritance/#langkah-selanjutnya","title":"\ud83d\udcda Langkah Selanjutnya","text":"<p>Pelajari lebih lanjut tentang Polymorphism (Polimorfisme) untuk memahami cara method dapat memiliki perilaku berbeda berdasarkan tipe objek.</p> <p>\u2b05\ufe0f Kembali: Encapsulation (Enkapsulasi)</p>"},{"location":"oop/konsep/","title":"\ud83e\udded Konsep Dasar OOP (Object-Oriented Programming) dalam Java","text":"<p>Java adalah bahasa pemrograman berorientasi objek (Object-Oriented Programming, OOP), yang berfokus pada pembuatan kelas (class) dan objek (object) untuk membangun kode yang modular, fleksibel, dan mudah dipelihara. OOP memungkinkan pengembang untuk memodelkan entitas dunia nyata dalam kode, seperti mobil, mahasiswa, atau hewan. Bagian ini menjelaskan konsep dasar OOP, termasuk class, object, dan empat pilar utama: Encapsulation, Inheritance, Polymorphism, dan Abstraction.</p>"},{"location":"oop/konsep/#1-apa-itu-class-dan-object","title":"\ud83e\udde0 1. Apa Itu Class dan Object?","text":""},{"location":"oop/konsep/#class","title":"Class","text":"<p>Class adalah cetak biru (blueprint) atau template yang mendefinisikan struktur (data) dan perilaku (aksi) dari sebuah entitas. Class berisi field (atribut) dan method (fungsi).</p> <pre><code>public class Mobil {\n    // Field\n    String merk;\n    int tahun;\n}\n</code></pre>"},{"location":"oop/konsep/#object","title":"Object","text":"<p>Object adalah instance nyata dari class, dibuat menggunakan kata kunci <code>new</code>. Object mewakili wujud konkret dari class.</p> <pre><code>public class MobilDemo {\n    public static void main(String[] args) {\n        // Membuat object dari class Mobil\n        Mobil m1 = new Mobil();\n        m1.merk = \"Toyota\";\n        m1.tahun = 2020;\n        System.out.println(\"Mobil: \" + m1.merk + \", Tahun: \" + m1.tahun);\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Mobil: Toyota, Tahun: 2020\n</code></pre> <p>\ud83d\udccc Catatan: Class seperti desain rumah, sedangkan object adalah rumah yang dibangun berdasarkan desain tersebut.</p>"},{"location":"oop/konsep/#2-empat-pilar-oop","title":"\ud83c\udfaf 2. Empat Pilar OOP","text":"<p>OOP di Java dibangun di atas empat pilar utama yang memungkinkan pembuatan kode yang terstruktur dan efisien.</p>"},{"location":"oop/konsep/#a-encapsulation-enkapsulasi","title":"a) Encapsulation (Enkapsulasi)","text":"<p>Encapsulation menyembunyikan detail implementasi data dan hanya memberikan akses terkontrol melalui getter dan setter. Ini meningkatkan keamanan dan fleksibilitas kode.</p> <pre><code>public class Mahasiswa {\n    // Field private untuk encapsulation\n    private String nama;\n\n    // Getter\n    public String getNama() {\n        return nama;\n    }\n\n    // Setter\n    public void setNama(String nama) {\n        this.nama = nama;\n    }\n}\n</code></pre>"},{"location":"oop/konsep/#penggunaan","title":"Penggunaan:","text":"<pre><code>public class EncapsulationDemo {\n    public static void main(String[] args) {\n        Mahasiswa mhs = new Mahasiswa();\n        mhs.setNama(\"Marno\");\n        System.out.println(\"Nama: \" + mhs.getNama());\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Nama: Marno\n</code></pre> <p>\ud83d\udca1 Tips: Gunakan modifier <code>private</code> untuk field dan sediakan method <code>public</code> (getter/setter) untuk mengontrol akses.</p>"},{"location":"oop/konsep/#b-inheritance-pewarisan","title":"b) Inheritance (Pewarisan)","text":"<p>Inheritance memungkinkan kelas anak mewarisi field dan method dari kelas induk, mempromosikan reuse kode.</p> <pre><code>public class Hewan {\n    public void makan() {\n        System.out.println(\"Hewan sedang makan\");\n    }\n}\n\nclass Kucing extends Hewan {\n    public void suara() {\n        System.out.println(\"Meong\");\n    }\n}\n</code></pre>"},{"location":"oop/konsep/#penggunaan_1","title":"Penggunaan:","text":"<pre><code>public class InheritanceDemo {\n    public static void main(String[] args) {\n        Kucing kucing = new Kucing();\n        kucing.makan(); // Diwarisi dari Hewan\n        kucing.suara(); // Method khusus Kucing\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Hewan sedang makan\nMeong\n</code></pre> <p>\ud83d\udccc Catatan: Gunakan kata kunci <code>extends</code> untuk mewarisi kelas induk.</p>"},{"location":"oop/konsep/#c-polymorphism-polimorfisme","title":"c) Polymorphism (Polimorfisme)","text":"<p>Polymorphism memungkinkan satu method memiliki banyak perilaku tergantung pada objek yang memanggilnya, biasanya melalui method overriding.</p> <pre><code>public class Bentuk {\n    public void gambar() {\n        System.out.println(\"Menggambar bentuk\");\n    }\n}\n\nclass Lingkaran extends Bentuk {\n    @Override\n    public void gambar() {\n        System.out.println(\"Menggambar lingkaran\");\n    }\n}\n</code></pre>"},{"location":"oop/konsep/#penggunaan_2","title":"Penggunaan:","text":"<pre><code>public class PolymorphismDemo {\n    public static void main(String[] args) {\n        Bentuk bentuk = new Lingkaran(); // Polymorphism\n        bentuk.gambar();\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Menggambar lingkaran\n</code></pre> <p>\ud83d\udca1 Info: Polymorphism memungkinkan fleksibilitas dengan menggunakan tipe induk untuk merujuk ke objek anak.</p>"},{"location":"oop/konsep/#d-abstraction-abstraksi","title":"d) Abstraction (Abstraksi)","text":"<p>Abstraction menyembunyikan kompleksitas implementasi dan hanya menampilkan fungsi esensial melalui kelas abstrak atau interface.</p> <pre><code>public abstract class Kendaraan {\n    public abstract void jalan();\n}\n</code></pre> <pre><code>public class Mobil extends Kendaraan {\n    @Override\n    public void jalan() {\n        System.out.println(\"Mobil berjalan di jalan raya\");\n    }\n}\n</code></pre>"},{"location":"oop/konsep/#penggunaan_3","title":"Penggunaan:","text":"<pre><code>public class AbstractionDemo {\n    public static void main(String[] args) {\n        Kendaraan kendaraan = new Mobil();\n        kendaraan.jalan();\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Mobil berjalan di jalan raya\n</code></pre> <p>\ud83d\udccc Catatan: Gunakan kata kunci <code>abstract</code> untuk kelas atau method yang tidak memiliki implementasi langsung.</p>"},{"location":"oop/konsep/#studi-kasus-class-dan-object","title":"\ud83e\uddea Studi Kasus: Class dan Object","text":"<p>Berikut adalah contoh sederhana yang menggabungkan konsep class dan object.</p> <pre><code>public class Mahasiswa {\n    // Field\n    String nama;\n    int umur;\n\n    // Method\n    public void sapa() {\n        System.out.println(\"Halo, nama saya \" + nama + \", umur \" + umur);\n    }\n}\n\nclass MahasiswaDemo {\n    public static void main(String[] args) {\n        // Membuat object\n        Mahasiswa m1 = new Mahasiswa();\n        m1.nama = \"Marno\";\n        m1.umur = 22;\n        m1.sapa();\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Halo, nama saya Marno, umur 22\n</code></pre>"},{"location":"oop/konsep/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"<p>Empat pilar OOP membentuk dasar untuk membangun aplikasi Java yang terstruktur:</p> Konsep Penjelasan Sederhana Class Cetak biru untuk mendefinisikan struktur dan perilaku. Object Instance nyata dari class. Encapsulation Melindungi data dengan akses terkontrol. Inheritance Mewarisi fitur dari kelas induk untuk reuse kode. Polymorphism Satu nama method dengan banyak perilaku. Abstraction Menyembunyikan kompleksitas, menampilkan esensi. <p>Memahami konsep-konsep ini adalah langkah awal untuk menguasai OOP di Java.</p>"},{"location":"oop/konsep/#langkah-selanjutnya","title":"\ud83d\udcda Langkah Selanjutnya","text":"<p>Pelajari lebih lanjut tentang Encapsulation (Enkapsulasi) untuk memahami cara melindungi data dalam class dengan lebih mendalam.</p> <p>\u2b05\ufe0f Kembali: Membuat Class dan Object</p>"},{"location":"oop/polymorphism/","title":"\ud83c\udf00 Polymorphism (Polimorfisme) dalam Java","text":"<p>Polymorphism (polimorfisme) berasal dari kata Yunani poly (banyak) dan morph (bentuk), yang berarti kemampuan sebuah method atau objek untuk memiliki banyak bentuk perilaku. Dalam Java, polimorfisme memungkinkan method yang sama untuk berperilaku berbeda tergantung pada objek yang memanggilnya. Ini meningkatkan fleksibilitas dan reusabilitas kode, mendukung prinsip Open/Closed dalam desain OOP (kode terbuka untuk ekstensi, tertutup untuk modifikasi).</p> <p>Polimorfisme di Java terdiri dari dua jenis utama: 1. Compile-time Polymorphism (Static): Dicapai melalui method overloading. 2. Runtime Polymorphism (Dynamic): Dicapai melalui method overriding.</p>"},{"location":"oop/polymorphism/#jenis-jenis-polimorfisme","title":"\ud83d\udd27 Jenis-Jenis Polimorfisme","text":""},{"location":"oop/polymorphism/#1-compile-time-polymorphism-method-overloading","title":"1. Compile-Time Polymorphism (Method Overloading)","text":"<p>Method overloading terjadi ketika sebuah kelas memiliki beberapa method dengan nama yang sama tetapi parameter yang berbeda (dalam jumlah, tipe, atau urutan). Kompiler menentukan method mana yang dipanggil berdasarkan parameter saat kode dikompilasi.</p>"},{"location":"oop/polymorphism/#contoh-overloading","title":"Contoh Overloading:","text":"<pre><code>public class Kalkulator {\n    public int tambah(int a, int b) {\n        return a + b;\n    }\n\n    public double tambah(double a, double b) {\n        return a + b;\n    }\n\n    public int tambah(int a, int b, int c) {\n        return a + b + c;\n    }\n}\n</code></pre>"},{"location":"oop/polymorphism/#penggunaan","title":"Penggunaan:","text":"<pre><code>public class KalkulatorDemo {\n    public static void main(String[] args) {\n        Kalkulator k = new Kalkulator();\n        System.out.println(\"2 + 3 = \" + k.tambah(2, 3));\n        System.out.println(\"2.5 + 3.5 = \" + k.tambah(2.5, 3.5));\n        System.out.println(\"1 + 2 + 3 = \" + k.tambah(1, 2, 3));\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>2 + 3 = 5\n2.5 + 3.5 = 6.0\n1 + 2 + 3 = 6\n</code></pre> <p>\ud83d\udccc Catatan: Overloading terjadi saat compile-time, karena kompiler memilih method berdasarkan tanda tangan (signature) method.</p>"},{"location":"oop/polymorphism/#2-runtime-polymorphism-method-overriding","title":"2. Runtime Polymorphism (Method Overriding)","text":"<p>Method overriding terjadi ketika subclass menyediakan implementasi baru untuk method yang diwarisi dari superclass. Method yang di-override harus memiliki nama, parameter, dan tipe kembalian yang sama, ditandai dengan anotasi <code>@Override</code> untuk kejelasan.</p>"},{"location":"oop/polymorphism/#contoh-overriding","title":"Contoh Overriding:","text":"<pre><code>public class Hewan {\n    public void suara() {\n        System.out.println(\"Hewan bersuara...\");\n    }\n}\n\nclass Kucing extends Hewan {\n    @Override\n    public void suara() {\n        System.out.println(\"Meong\");\n    }\n}\n\nclass Anjing extends Hewan {\n    @Override\n    public void suara() {\n        System.out.println(\"Guk Guk\");\n    }\n}\n</code></pre>"},{"location":"oop/polymorphism/#penggunaan_1","title":"Penggunaan:","text":"<pre><code>public class HewanDemo {\n    public static void main(String[] args) {\n        Hewan h1 = new Kucing(); // Polymorphism\n        Hewan h2 = new Anjing(); // Polymorphism\n\n        h1.suara();\n        h2.suara();\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Meong\nGuk Guk\n</code></pre> <p>\ud83d\udca1 Info: Method yang dipanggil ditentukan saat runtime berdasarkan tipe objek aktual, bukan tipe referensi (Hewan).</p>"},{"location":"oop/polymorphism/#polymorphism-dengan-referensi-superclass","title":"\ud83c\udfaf Polymorphism dengan Referensi Superclass","text":"<p>Polimorfisme sering digunakan dengan referensi superclass untuk merujuk ke objek subclass, memungkinkan fleksibilitas dalam menangani berbagai tipe objek secara seragam.</p>"},{"location":"oop/polymorphism/#contoh","title":"Contoh:","text":"<pre><code>public class PolymorphismDemo {\n    public static void main(String[] args) {\n        Hewan[] hewan = { new Kucing(), new Anjing() };\n        for (Hewan h : hewan) {\n            h.suara(); // Memanggil method sesuai tipe objek\n        }\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Meong\nGuk Guk\n</code></pre> <p>\ud83d\udccc Catatan: Polimorfisme runtime memungkinkan kode untuk bekerja dengan tipe yang berbeda tanpa perlu tahu tipe spesifiknya.</p>"},{"location":"oop/polymorphism/#mengapa-polimorfisme-penting","title":"\u26a0\ufe0f Mengapa Polimorfisme Penting?","text":"<p>Polimorfisme adalah kunci untuk membangun kode yang fleksibel dan mudah diperluas:</p> Manfaat Penjelasan Modularitas Kode dapat menangani berbagai tipe objek dengan antarmuka yang sama. Skalabilitas Mudah menambahkan subclass baru tanpa mengubah kode utama. Prinsip Open/Closed Kelas dapat diperluas tanpa memodifikasi kode yang ada. Reusabilitas Satu antarmuka dapat digunakan untuk banyak implementasi."},{"location":"oop/polymorphism/#studi-kasus-sistem-kendaraan","title":"\ud83e\uddea Studi Kasus: Sistem Kendaraan","text":"<p>Berikut adalah contoh polimorfisme yang memodelkan kendaraan dengan perilaku berbeda untuk setiap jenis.</p> <pre><code>public class Kendaraan {\n    public void jalan() {\n        System.out.println(\"Kendaraan bergerak...\");\n    }\n}\n\nclass Mobil extends Kendaraan {\n    @Override\n    public void jalan() {\n        System.out.println(\"Mobil melaju di jalan raya\");\n    }\n}\n\nclass Motor extends Kendaraan {\n    @Override\n    public void jalan() {\n        System.out.println(\"Motor menyusuri gang kecil\");\n    }\n}\n</code></pre>"},{"location":"oop/polymorphism/#penggunaan_2","title":"Penggunaan:","text":"<pre><code>public class KendaraanDemo {\n    public static void main(String[] args) {\n        Kendaraan[] kendaraan = { new Mobil(), new Motor() };\n        for (Kendaraan k : kendaraan) {\n            k.jalan(); // Memanggil method sesuai tipe objek\n        }\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Mobil melaju di jalan raya\nMotor menyusuri gang kecil\n</code></pre>"},{"location":"oop/polymorphism/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"<p>Polimorfisme memungkinkan fleksibilitas dalam desain kode:</p> Jenis Polimorfisme Teknik Waktu Terjadi Compile-time Method Overloading Saat kompilasi Runtime Method Overriding Saat program berjalan Tujuan Umum Fleksibilitas dan reusabilitas kode <p>\ud83c\udfaf Tujuan Utama: Polimorfisme memungkinkan satu antarmuka untuk mendukung banyak implementasi, membuat kode lebih modular dan mudah diperluas.</p>"},{"location":"oop/polymorphism/#langkah-selanjutnya","title":"\ud83d\udcda Langkah Selanjutnya","text":"<p>Pelajari lebih lanjut tentang Abstraction (Abstraksi) untuk memahami cara menyembunyikan kompleksitas implementasi.</p> <p>\u2b05\ufe0f Kembali: Inheritance (Pewarisan)</p>"},{"location":"oop/ringkasan/","title":"\ud83e\uddfe Ringkasan OOP dan Studi Kasus","text":"<p>Setelah mempelajari pilar-pilar Object-Oriented Programming (OOP), bagian ini merangkum konsep-konsep inti dan menunjukkan penerapannya dalam studi kasus praktis. Studi kasus ini mengilustrasikan bagaimana Encapsulation, Inheritance, Polymorphism, dan Abstraction bekerja bersama untuk membangun sistem yang terorganisir dan fleksibel.</p>"},{"location":"oop/ringkasan/#ringkasan-empat-pilar-oop","title":"\ud83e\uddf1 Ringkasan Empat Pilar OOP","text":"<p>OOP di Java dibangun di atas empat pilar utama:</p> Pilar Konsep Inti Encapsulation Menyembunyikan data dengan akses terkontrol melalui getter dan setter. Inheritance Mewarisi atribut dan method dari kelas induk ke kelas anak untuk reuse kode. Polymorphism Memungkinkan satu interface memiliki banyak implementasi melalui overriding. Abstraction Menyembunyikan kompleksitas implementasi, hanya menampilkan fungsi esensial. <p>\ud83d\udca1 Info: Pilar-pilar ini memungkinkan pembuatan kode yang modular, mudah dipelihara, dan dapat diskalakan.</p>"},{"location":"oop/ringkasan/#studi-kasus-sistem-rekap-panen-sawit","title":"\ud83d\udcd8 Studi Kasus: Sistem Rekap Panen Sawit","text":"<p>Mari kita bangun sistem sederhana untuk mencatat hasil panen kelapa sawit. Dalam sistem ini, terdapat tiga jenis pekerja: Pemotong, Penyusun, dan Pengutip, masing-masing dengan peran dan kontribusi berbeda terhadap total berat panen. Gaji mereka dihitung berdasarkan persentase dari total berat panen.</p>"},{"location":"oop/ringkasan/#1-membuat-abstract-class-pekerja","title":"1. Membuat Abstract Class: <code>Pekerja</code>","text":"<p>Kelas abstrak <code>Pekerja</code> mendefinisikan struktur umum untuk semua jenis pekerja, dengan method abstrak untuk menghitung gaji.</p> <pre><code>abstract class Pekerja {\n    protected String nama;\n\n    public Pekerja(String nama) {\n        this.nama = nama;\n    }\n\n    // Method abstrak untuk diimplementasikan oleh subclass\n    abstract double hitungGaji(double totalBerat);\n\n    public String getNama() {\n        return nama;\n    }\n}\n</code></pre> <p>\ud83d\udccc Catatan: Atribut <code>nama</code> dideklarasikan sebagai <code>protected</code> untuk mendukung encapsulation dengan akses terbatas ke subclass.</p>"},{"location":"oop/ringkasan/#2-membuat-kelas-turanan","title":"2. Membuat Kelas Tur,anan","text":"<p>Kelas turunan mengimplementasikan method <code>hitungGaji</code> sesuai peran masing-masing pekerja.</p>"},{"location":"oop/ringkasan/#a-pemotong","title":"a) Pemotong","text":"<pre><code>class Pemotong extends Pekerja {\n    public Pemotong(String nama) {\n        super(nama);\n    }\n\n    @Override\n    double hitungGaji(double totalBerat) {\n        return totalBerat * 0.4; // 40% dari total berat\n    }\n}\n</code></pre>"},{"location":"oop/ringkasan/#b-penyusun","title":"b) Penyusun","text":"<pre><code>class Penyusun extends Pekerja {\n    public Penyusun(String nama) {\n        super(nama);\n    }\n\n    @Override\n    double hitungGaji(double totalBerat) {\n        return totalBerat * 0.35; // 35% dari total berat\n    }\n}\n</code></pre>"},{"location":"oop/ringkasan/#c-pengutip","title":"c) Pengutip","text":"<pre><code>class Pengutip extends Pekerja {\n    public Pengutip(String nama) {\n        super(nama);\n    }\n\n    @Override\n    double hitungGaji(double totalBerat) {\n        return totalBerat * 0.25; // 25% dari total berat\n    }\n}\n</code></pre>"},{"location":"oop/ringkasan/#3-implementasi-program-utama","title":"3. Implementasi Program Utama","text":"<p>Program utama menunjukkan bagaimana pilar-pilar OOP diterapkan melalui polymorphism dan inheritance.</p> <pre><code>public class DemoPanen {\n    public static void main(String[] args) {\n        double beratPanen = 1000; // Total berat panen dalam kg\n\n        // Membuat objek pekerja dengan polymorphism\n        Pekerja p1 = new Pemotong(\"Ali\");\n        Pekerja p2 = new Penyusun(\"Budi\");\n        Pekerja p3 = new Pengutip(\"Cici\");\n\n        // Menghitung dan menampilkan gaji\n        System.out.printf(\"%s: RM %.2f%n\", p1.getNama(), p1.hitungGaji(beratPanen));\n        System.out.printf(\"%s: RM %.2f%n\", p2.getNama(), p2.hitungGaji(beratPanen));\n        System.out.printf(\"%s: RM %.2f%n\", p3.getNama(), p3.hitungGaji(beratPanen));\n    }\n}\n</code></pre> <p>\ud83d\udda8\ufe0f Output:</p> <pre><code>Ali: RM 400.00\nBudi: RM 350.00\nCici: RM 250.00\n</code></pre>"},{"location":"oop/ringkasan/#analisis-penerapan-oop","title":"Analisis Penerapan OOP","text":"Pilar OOP Realisasi dalam Studi Kasus Encapsulation Atribut <code>nama</code> bersifat <code>protected</code>, diakses via getter. Inheritance Kelas <code>Pemotong</code>, <code>Penyusun</code>, dan <code>Pengutip</code> mewarisi <code>Pekerja</code>. Polymorphism Method <code>hitungGaji</code> dipanggil secara polimorfik pada tipe <code>Pekerja</code>. Abstraction Kelas abstrak <code>Pekerja</code> menyediakan kontrak untuk <code>hitungGaji</code>."},{"location":"oop/ringkasan/#kesimpulan-akhir","title":"\ud83c\udf93 Kesimpulan Akhir","text":"<p>Empat pilar OOP\u2014Encapsulation, Inheritance, Polymorphism, dan Abstraction\u2014memungkinkan pembuatan kode yang: - Modular: Mudah dikelola dan diperluas. - Reusable: Kode dapat digunakan kembali melalui pewarisan dan polimorfisme. - Scalable: Dapat diintegrasikan dengan sistem yang lebih besar, seperti database atau API.</p> <p>Studi kasus sistem rekap panen sawit menunjukkan bagaimana pilar-pilar ini bekerja bersama untuk membangun aplikasi yang terstruktur dan efisien.</p>"},{"location":"oop/ringkasan/#catatan-tambahan","title":"\ud83d\udcce Catatan Tambahan","text":"<ul> <li>Dalam proyek nyata, OOP sering dipadukan dengan teknologi seperti database (misalnya, JDBC atau JPA), API (RESTful services), atau framework (Spring, Hibernate).</li> <li>Gunakan OOP untuk memodelkan entitas bisnis seperti <code>User</code>, <code>Gaji</code>, <code>Panen</code>, atau <code>Tim</code> untuk menjaga kode tetap terorganisir.</li> <li>Pertimbangkan prinsip SOLID (Single Responsibility, Open-Closed, dll.) untuk desain OOP yang lebih baik di proyek besar.</li> </ul>"},{"location":"oop/ringkasan/#langkah-selanjutnya","title":"\ud83d\udcda Langkah Selanjutnya","text":"<p>Pelajari lebih lanjut tentang Java Collection Framework (JCF) untuk memahami cara mengelola kumpulan data secara efisien dalam program Java.</p> <p>\u2b05\ufe0f Kembali: Abstraksi dalam Java</p>"}]}